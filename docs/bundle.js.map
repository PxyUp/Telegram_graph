{"version":3,"file":"bundle.js","sources":["../src/utils/misc.ts","../src/interfaces/chart.ts","../src/charts/chart.ts","../src/charts/generator.ts","../src/index.ts"],"sourcesContent":["import { Container, MinMax, Point, RectangleOptions } from '../interfaces/chart';\n\nconst withDayOptions = {\n  weekday: 'short',\n  month: 'short',\n  day: 'numeric',\n};\n\nconst withoutDayOptions = {\n  month: 'short',\n  day: 'numeric',\n};\n\nconst computedIntlDateArr = {\n  long: {},\n  short: {},\n} as { long: { [key: number]: any }; short: { [key: number]: any } };\n\nconst computedOldDateArr = {} as { [key: number]: Date };\nconst isIntl = !!(window as any).Intl;\nconst IntlLong = isIntl && new Intl.DateTimeFormat('en-US', withDayOptions);\nconst IntlShort = isIntl && new Intl.DateTimeFormat('en-US', withoutDayOptions);\n\nexport function setStyleBatch(node: HTMLElement | SVGElement, styles: { [key: string]: string }) {\n  const computedStyle = Object.keys(styles).reduce(\n    (prev, cur) => prev + `${cur}: ${styles[cur]};`,\n    '',\n  );\n  node.style.cssText = computedStyle;\n}\n\nexport function getSize(container: Container, defaultValue?: any): RectangleOptions {\n  if (container && container.size) {\n    return {\n      height: container.size.height,\n      width: container.size.width,\n    };\n  }\n  return defaultValue;\n}\n\nexport function getRelativeOffset(targetCoords: number, parentCoords: number): number {\n  return targetCoords - parentCoords;\n}\n\nexport function findClosestIndexPointX(arr: Array<Point>, value: number): number {\n  let rightIndex = 0;\n  let leftIndex = arr.length - 1;\n  let middleIndex;\n  while (leftIndex - rightIndex > 1) {\n    middleIndex = Math.floor((rightIndex + leftIndex) / 2);\n    if (value < arr[middleIndex].x) {\n      leftIndex = middleIndex;\n    } else {\n      if (value > arr[middleIndex].x) {\n        rightIndex = middleIndex;\n      } else {\n        return middleIndex;\n      }\n    }\n  }\n  if (value - (arr[rightIndex].x as number) <= (arr[leftIndex].x as number) - value) {\n    return rightIndex;\n  }\n  return leftIndex;\n}\n\nexport function getMinMax(arr: Array<number>): MinMax {\n  const minMax = {\n    min: Number.POSITIVE_INFINITY,\n    max: Number.NEGATIVE_INFINITY,\n  };\n  return arr.reduce((prev, curr) => {\n    prev['min'] = Math.min(prev.min, curr);\n    prev['max'] = Math.max(prev.max, curr);\n    return prev;\n  }, minMax);\n}\n\nconst createGetterForDate = () => {\n  if (isIntl) {\n    return (unix: number, withWeekday = false): string => {\n      if (withWeekday) {\n        if (!computedIntlDateArr.long[unix]) {\n          computedIntlDateArr.long[unix] = IntlLong.format(unix);\n        }\n        return computedIntlDateArr.long[unix];\n      }\n      if (!computedIntlDateArr.short[unix]) {\n        computedIntlDateArr.short[unix] = IntlShort.format(unix);\n      }\n      return computedIntlDateArr.short[unix];\n    };\n  }\n  return (unix: number, withWeekday = false): string => {\n    if (!computedOldDateArr[unix]) {\n      computedOldDateArr[unix] = new Date(unix);\n    }\n    return computedOldDateArr[unix].toLocaleString('en-us', {\n      weekday: withWeekday ? 'short' : undefined,\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n};\n\nconst generatorDate = createGetterForDate();\n\nexport function getShortDateByUnix(unix: number, withWeekday = false): string {\n  return generatorDate(unix, withWeekday);\n}\n\nexport function getPathByPoints(points: Array<Point>): string {\n  return points.reduce((prev, point, index) => {\n    if (index === 0) {\n      return prev + `M ${point.x} ${point.y}`;\n    }\n    return prev + ` L ${point.x} ${point.y}`;\n  }, '');\n}\n\nexport function changePathOnElement(el: SVGPathElement, path: string) {\n  el.setAttribute('d', path);\n}\n\nexport function removeAllChild(node: HTMLElement) {\n  while (node.firstChild) {\n    node.removeChild(node.firstChild);\n  }\n}\n\nexport function addNodeListener(\n  node: HTMLElement | Document | SVGElement,\n  listeners: { [key: string]: any | Array<any> },\n) {\n  Object.keys(listeners).forEach(event => {\n    if (!Array.isArray(listeners[event])) {\n      node.addEventListener(event, listeners[event]);\n      return;\n    }\n    listeners[event].forEach((callback: any) => {\n      node.addEventListener(event, callback);\n    });\n  });\n}\n\nexport function removeNodeListener(\n  node: HTMLElement | Document | SVGElement,\n  listeners: { [key: string]: any | Array<any> },\n) {\n  Object.keys(listeners).forEach(event => {\n    if (!Array.isArray(listeners[event])) {\n      node.removeEventListener(event, listeners[event]);\n      return;\n    }\n    listeners[event].forEach((callback: any) => {\n      node.removeEventListener(event, callback);\n    });\n  });\n}\n\nexport function setNodeAttrs(\n  node: HTMLElement | SVGElement | Element,\n  attrs: { [key: string]: string },\n) {\n  Object.keys(attrs).forEach(key => {\n    node.setAttribute(key, attrs[key]);\n  });\n}\n\nexport function getCoordsX(\n  chartsWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  indexElem: number,\n  count: number,\n): number {\n  if (count === 1) {\n    return spacingLeft + (chartsWidth - spacingLeft - spacingRight) / 2;\n  }\n  return spacingLeft + ((chartsWidth - spacingLeft - spacingRight) / (count - 1)) * indexElem;\n}\n\nexport function getCoordsY(\n  chartsHeight: number,\n  spacingTop: number,\n  spacingBtn: number,\n  maxValue: number,\n  minValue: number,\n  value: number,\n): number {\n  if (value === maxValue) {\n    return spacingTop;\n  }\n  if (value === minValue) {\n    return chartsHeight - spacingBtn;\n  }\n  if (minValue === maxValue) {\n    return chartsHeight - spacingBtn - (chartsHeight - spacingTop - spacingBtn) / 2;\n  }\n\n  return (\n    chartsHeight -\n    spacingBtn -\n    (chartsHeight - spacingTop - spacingBtn) * ((value - minValue) / (maxValue - minValue))\n  );\n}\n\nexport function relativeIndexByOffset(\n  offsetX: number,\n  fullWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  count: number,\n): number {\n  if (offsetX <= spacingLeft) {\n    return 0;\n  }\n\n  if (offsetX >= fullWidth - spacingRight) {\n    return count - 1;\n  }\n\n  return Math.min(\n    count - 1,\n    Math.round(((offsetX - spacingLeft) / (fullWidth - spacingLeft - spacingRight)) * (count - 1)),\n  );\n}\n\nexport function getLeftTransitionByIndex(\n  leftIndex: number,\n  fullWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  count: number,\n): number {\n  return -(\n    fullWidth -\n    (leftIndex / (count - 1)) * (fullWidth - spacingLeft - spacingRight) -\n    spacingRight\n  );\n}\n\nexport function getRightTransitionByIndex(\n  rightIndex: number,\n  fullWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  count: number,\n): number {\n  return (rightIndex / (count - 1)) * (fullWidth - spacingLeft - spacingRight) + spacingLeft;\n}\n","export interface Chart {\n  columns: Array<Column>;\n  types: Types;\n  colors: { [key: string]: string };\n  names: { [key: string]: string };\n}\n\nexport interface LinePoints {\n  x1: number | string;\n  x2: number | string;\n  y1: number | string;\n  y2: number | string;\n}\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport interface PointWithColor extends Point {\n  color: string;\n}\n\nexport interface PointWithValue extends Point {\n  value: number;\n  date: number;\n}\n\nexport interface PointWithValueAndColor extends Point {\n  value: number;\n  color: string;\n  date: number;\n  key?: string;\n}\n\nexport interface ChartOptions {\n  withoutPreview?: boolean;\n  withoutControls?: boolean;\n  withoutNightMode?: boolean;\n  withoutAxisLabel?: boolean;\n  chartsContainer?: Container;\n  previewContainer?: Container;\n  horizontSteps?: number;\n}\n\nexport interface Container {\n  size: RectangleOptions;\n}\n\nexport interface RectangleOptions {\n  width: string | number;\n  height: string | number;\n}\n\nexport type Column = [String, ...Array<number>];\n\nexport enum Type {\n  Line = 'line',\n  X = 'x',\n}\n\nexport type Types = { [key: string]: Type };\n\nexport interface MinMax {\n  min: number;\n  max: number;\n}\n","import {\n  Chart,\n  ChartOptions,\n  Point,\n  PointWithColor,\n  PointWithValue,\n  PointWithValueAndColor,\n  Type,\n} from '../interfaces/chart';\nimport {\n  addNodeListener,\n  changePathOnElement,\n  findClosestIndexPointX,\n  getCoordsX,\n  getCoordsY,\n  getLeftTransitionByIndex,\n  getMinMax,\n  getPathByPoints,\n  getRelativeOffset,\n  getRightTransitionByIndex,\n  getShortDateByUnix,\n  relativeIndexByOffset,\n  removeAllChild,\n  removeNodeListener,\n  setNodeAttrs,\n  setStyleBatch,\n} from '../utils/misc';\nimport { generateNode, generateSvgElement } from './generator';\n\n// constant number\nconst POINT_RADIUS = 5;\nconst MIN_TOOLTIP_WIDTH = 90;\nconst DEFAULT_HOR_STEPS = 6;\nconst DEFAULT_SPACING_RIGHT = 30;\nconst DEFAULT_SPACING_LEFT = 30;\nconst DEFAULT_SPACING_PREVIEW = 10;\nconst DEFAULT_SPACING_TOP = 10;\nconst DEFAULT_SPACING_BTM = 10;\nconst DEFAULT_SPACING_TOP_PREVIEW = 5;\nconst DEFAULT_SPACING_BTM_PREVIEW = 5;\nconst DEFAULT_SPACING = DEFAULT_SPACING_RIGHT + DEFAULT_SPACING_LEFT;\nconst DEFAULT_PREVIEW_SPACING = 10;\nconst DEFAULT_SLICE = 19; // Programming + 1\nconst SLICE_NUMBER = 5.5;\nconst DEFAULT_DAY_COUNT = 6;\n\n// ClassNames\nconst classNameStepLine = 'line_step';\nconst classNameStepTitle = 'text_step';\n\nexport class PxyUpChart {\n  private isDragActive = false;\n  private isResizeActive = false;\n  private activeResize: boolean | null = null;\n  private resizeAnimationFrame: number | null = null;\n  private dragAnimationFrame: number | null = null;\n  private mouseMoveAnimationFrame: number | null = null;\n  private toggleColumnAnimationFrame: number | null = null;\n\n  private maxValue: number;\n  private minValue: number;\n\n  private maxValueGlobal: number;\n  private minValueGlobal: number;\n\n  private height: number;\n  private width: number;\n\n  private previewWidth: number;\n  private previewHeight: number;\n\n  private night_mod = false;\n\n  private horizontSteps: number;\n\n  private sliceStartIndex = 0;\n\n  private sliceEndIndex = 0;\n\n  private currentSlicePoint: { [key: string]: Array<PointWithValue> } = {};\n\n  private columnsVisible: { [key: string]: boolean } = {};\n\n  private columnDatasets: { [key: string]: Array<number> } = {};\n\n  private countElements: number;\n\n  private _position: ClientRect;\n\n  private animationTimer: number | null = null;\n\n  constructor(\n    private id: number,\n    private node: HTMLElement,\n    private charts_svg: HTMLElement | SVGElement,\n    private preview_svg: HTMLElement | SVGElement,\n    private toolTip: HTMLElement,\n    private toolTipDate: HTMLElement,\n    private controlsContainer: HTMLElement,\n    private nightModeControl: HTMLElement,\n    private axisContainer: HTMLElement,\n    private leftPreviewControl: HTMLElement,\n    private rightPreviewControl: HTMLElement,\n    private centerPreviewControl: HTMLElement,\n    private leftResizeControl: HTMLElement,\n    private rightResizeControl: HTMLElement,\n    private previewControlContainer: HTMLElement,\n    private verticleLine: SVGElement,\n    private dataset: Chart,\n    private options: ChartOptions,\n  ) {\n    // Hi Telegram Team!\n    // I tried charts with get min time for Scripting/Rendering/Painting in Chrome Dev Tools and Application size\n    // And i tried do it scalable, animation of axis X with point on chart > 1000, will be slow\n    // Because you every time need hide/show/translate more > 994 elements, i wanna scalable solution(And it is looks ugly when you fast  repeat left to right)\n    // That reason why i tried optimize all of them appendChild, remove, setStyle and more another things\n    // Thank you for challenge!\n    this.height = +this.charts_svg.getAttribute('height');\n    this.width = +this.charts_svg.getAttribute('width');\n    // Set tooltip max width\n    this.toolTip.style.maxWidth = `${this.width - 2 * DEFAULT_SPACING}px`;\n\n    Object.keys(this.dataset.names).forEach(key => {\n      this.columnsVisible[key] = true;\n    });\n    // Create dataset help and set first slice size and indexes\n    this.dataset.columns.forEach(column => {\n      const keyOfColumn = column.shift() as any;\n      this.columnDatasets[keyOfColumn] = column as any;\n      if (!this.countElements) {\n        this.countElements = this.columnDatasets[keyOfColumn].length;\n      }\n      if (!this.sliceStartIndex) {\n        const sliceSize = Math.max(DEFAULT_SLICE, Math.floor(this.countElements / SLICE_NUMBER));\n        this.sliceStartIndex = Math.max(this.columnDatasets[keyOfColumn].length - sliceSize - 1, 0);\n      }\n      if (!this.sliceEndIndex) {\n        this.sliceEndIndex = this.columnDatasets[keyOfColumn].length - 1;\n      }\n    });\n\n    this.horizontSteps = (options && options.horizontSteps) || DEFAULT_HOR_STEPS;\n\n    this.addMouseListener();\n\n    if (!options.withoutAxisLabel) {\n      setStyleBatch(this.axisContainer, {\n        top: `${this.height - DEFAULT_SPACING_BTM}px`,\n        width: `${this.width - (DEFAULT_SPACING_LEFT + DEFAULT_SPACING_RIGHT) / 2}px`,\n        'padding-left': `${(DEFAULT_SPACING_LEFT / 3) * 2}px`,\n        'padding-right': `${DEFAULT_SPACING_RIGHT / 2}px`,\n      });\n    }\n    this.draw();\n\n    if (!options.withoutPreview) {\n      this.previewHeight = +this.preview_svg.getAttribute('height');\n      this.previewWidth = +this.preview_svg.getAttribute('width');\n      this.drawPreview();\n      this.drawPreviewControls(true);\n    }\n\n    if (!options.withoutControls) {\n      this.generateControls();\n    }\n\n    if (!options.withoutNightMode) {\n      this.addNightModeListener();\n    }\n  }\n\n  addNightModeListener() {\n    this.nightModeControl.addEventListener('click', this.onNightModeClick);\n  }\n\n  generateControls() {\n    this.controlsContainer.style.width = `${this.width}px`;\n    Object.keys(this.columnsVisible).forEach(key => {\n      const checkBoxControl = generateNode({\n        tag: 'div',\n        classList: ['checkbox_container'],\n        attrs: {\n          'data-key': key,\n        },\n        children: [\n          {\n            tag: 'div',\n            classList: ['round'],\n          },\n          {\n            tag: 'div',\n            classList: ['label'],\n            textValue: this.dataset.names[key],\n          },\n        ],\n      });\n      this.controlsContainer.appendChild(checkBoxControl);\n      checkBoxControl.addEventListener('click', this.onCheckBoxClick, false);\n      this.setColorCheckboxByKey(key, checkBoxControl as HTMLElement);\n    });\n  }\n\n  doPreventDefault = (e: MouseEvent) => {\n    e.stopPropagation();\n  };\n\n  onNightModeClick = () => {\n    this.toggleNightMode();\n  };\n\n  onCheckBoxClick = (e: MouseEvent) => {\n    if (this.toggleColumnAnimationFrame) {\n      cancelAnimationFrame(this.toggleColumnAnimationFrame);\n    }\n    this.toggleColumnAnimationFrame = requestAnimationFrame(() => {\n      this.removePoints();\n      let target = e.target as HTMLElement;\n      let key = target.dataset.key;\n      while (!key || target === document.body) {\n        target = target.parentNode as HTMLElement;\n        key = target.dataset.key;\n      }\n      if (key) {\n        this.toggleColumnVisible(key, target);\n      }\n    });\n  };\n\n  addMouseListener() {\n    addNodeListener(this.charts_svg, this.SVG_CHARTS_LISTENERS);\n    addNodeListener(document, this.DOCUMENT_LISTENERS);\n    addNodeListener(this.toolTip, this.TOOLTIP_LISTENERS);\n  }\n\n  destroy(withRemove = true) {\n    this.resetTimer();\n    removeNodeListener(this.charts_svg, this.SVG_CHARTS_LISTENERS);\n    removeNodeListener(document, this.DOCUMENT_LISTENERS);\n    removeNodeListener(this.toolTip, this.TOOLTIP_LISTENERS);\n\n    if (!this.options.withoutControls) {\n      for (let i = 0; i < this.controlsContainer.children.length; i++) {\n        this.controlsContainer.children[i].removeEventListener('click', this.onCheckBoxClick);\n      }\n    }\n\n    if (!this.options.withoutNightMode) {\n      this.nightModeControl.removeEventListener('click', this.onNightModeClick);\n    }\n    if (!this.options.withoutPreview) {\n      removeNodeListener(this.centerPreviewControl, this.CENTRAL_CONTROL_LISTENERS);\n\n      removeNodeListener(this.previewControlContainer, this.PREVIEW_CHART_LISTENERS);\n\n      removeNodeListener(this.leftResizeControl, this.LEFT_RESIZE_CONTROL_LISTENERS);\n\n      removeNodeListener(this.rightResizeControl, this.RIGHT_RESIZE_CONTROL_LISTENERS);\n\n      removeNodeListener(this.leftPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n\n      removeNodeListener(this.rightPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n    }\n    if (withRemove) {\n      this.node.remove();\n    }\n  }\n\n  onMouseUp = (e: any) => {\n    this.isResizeActive = false;\n    this.isDragActive = false;\n    this.activeResize = null;\n  };\n\n  onResizeStartRight = (e: MouseEvent) => {\n    e.stopPropagation();\n    this.isDragActive = false;\n    this.hideHoverLineAndPoints();\n    this.isResizeActive = true;\n    this.activeResize = true;\n  };\n\n  onResizeStartLeft = (e: MouseEvent) => {\n    e.stopPropagation();\n    this.isDragActive = false;\n    this.hideHoverLineAndPoints();\n    this.isResizeActive = true;\n    this.activeResize = false;\n  };\n\n  stopProp = (e: MouseEvent) => {\n    e.stopPropagation();\n  };\n\n  onResizeEndLeft = () => {\n    this.isResizeActive = false;\n    this.activeResize = null;\n  };\n\n  onResizeEndRight = () => {\n    this.isResizeActive = false;\n    this.activeResize = null;\n  };\n\n  onResize = (e: MouseEvent | TouchEvent) => {\n    e.preventDefault();\n    if (this.isResizeActive) {\n      if (this.resizeAnimationFrame) {\n        cancelAnimationFrame(this.resizeAnimationFrame);\n      }\n      this.resizeAnimationFrame = requestAnimationFrame(() => this.doResize(this.activeResize, e));\n    }\n  };\n\n  onDragStart = (e: MouseEvent | TouchEvent) => {\n    e.stopPropagation();\n    this.hideHoverLineAndPoints();\n    this.isDragActive = true;\n  };\n\n  onDragEnd = (e: MouseEvent | TouchEvent) => {\n    this.isDragActive = false;\n  };\n\n  onDrag = (e: MouseEvent | TouchEvent) => {\n    e.preventDefault();\n    if (this.isDragActive) {\n      if (this.dragAnimationFrame) {\n        cancelAnimationFrame(this.dragAnimationFrame);\n      }\n      this.dragAnimationFrame = requestAnimationFrame(() => this.onPreviewControlClick(e));\n    }\n  };\n\n  onMouseLeave = (e: MouseEvent) => {\n    const cordY = getRelativeOffset(e.clientY, this.positions.top);\n    if (e.toElement !== this.toolTip || cordY >= this.height - 100 || cordY < 0) {\n      this.hideHoverLineAndPoints();\n    }\n  };\n\n  onToolTipLeave = () => {\n    this.hideHoverLineAndPoints();\n  };\n\n  hideHoverLineAndPoints() {\n    if (this.mouseMoveAnimationFrame) {\n      cancelAnimationFrame(this.mouseMoveAnimationFrame);\n    }\n    this.removePoints();\n    setStyleBatch(this.verticleLine, {\n      transform: 'translateX(-50px)',\n    });\n    this.toolTip.style.display = 'none';\n  }\n\n  doResize(isRight: boolean, e: MouseEvent | TouchEvent) {\n    if (isRight === null) {\n      return;\n    }\n    const cursorX = getRelativeOffset(\n      (e as MouseEvent).clientX || (e as TouchEvent).touches[0].clientX,\n      this.positions.left,\n    );\n    const offsetIndex = relativeIndexByOffset(\n      cursorX,\n      this.previewWidth,\n      DEFAULT_PREVIEW_SPACING,\n      DEFAULT_PREVIEW_SPACING,\n      this.countElements,\n    );\n    if (!isRight) {\n      this.sliceStartIndex = offsetIndex;\n      if (this.sliceStartIndex >= this.sliceEndIndex) {\n        this.sliceStartIndex = this.sliceEndIndex - 1;\n      }\n    } else {\n      this.sliceEndIndex = offsetIndex;\n\n      if (this.sliceEndIndex <= this.sliceStartIndex) {\n        this.sliceEndIndex = this.sliceStartIndex + 1;\n      }\n    }\n\n    this.drawPreviewControls();\n    this.draw();\n  }\n\n  onPreviewControlClick = (e: MouseEvent | TouchEvent) => {\n    const cursorX = getRelativeOffset(\n      (e as MouseEvent).clientX || (e as TouchEvent).touches[0].clientX,\n      this.positions.left,\n    );\n    const sliceSize = this.sliceEndIndex - this.sliceStartIndex;\n    const offsetIndexLeft = Math.floor(\n      relativeIndexByOffset(\n        cursorX,\n        this.previewWidth,\n        DEFAULT_PREVIEW_SPACING,\n        DEFAULT_PREVIEW_SPACING,\n        this.countElements,\n      ) -\n        sliceSize / 2,\n    );\n    this.sliceStartIndex = Math.max(offsetIndexLeft, 0);\n    this.sliceEndIndex = Math.min(this.sliceStartIndex + sliceSize, this.countElements - 1);\n\n    if (this.sliceEndIndex === this.countElements - 1) {\n      this.sliceStartIndex = Math.max(0, this.sliceEndIndex - sliceSize);\n    }\n    if (this.sliceStartIndex === 0) {\n      this.sliceEndIndex = Math.min(this.sliceStartIndex + sliceSize, this.countElements - 1);\n    }\n\n    this.drawPreviewControls();\n    this.draw();\n  };\n\n  onMouseMove = (e: MouseEvent) => {\n    if (this.mouseMoveAnimationFrame) {\n      cancelAnimationFrame(this.mouseMoveAnimationFrame);\n    }\n    this.mouseMoveAnimationFrame = requestAnimationFrame(() => {\n      const cordX = e.offsetX;\n      const cordY = e.offsetY;\n      if (\n        cordX > DEFAULT_SPACING_LEFT / 2 &&\n        cordX < this.width - DEFAULT_SPACING_RIGHT / 2 &&\n        cordY < this.height - DEFAULT_SPACING_BTM\n      ) {\n        setStyleBatch(this.verticleLine, {\n          transform: `translateX(${cordX}px)`,\n        });\n        const closestIndex = this.findClosesIndexOfPoint(cordX);\n        if (closestIndex === null) {\n          return;\n        }\n        const points = Object.keys(this.columnsVisible)\n          .filter(key => this.columnsVisible[key])\n          .map(key => ({\n            key: key,\n            color: this.dataset.colors[key],\n            x: this.currentSlicePoint[key][closestIndex].x,\n            y: this.currentSlicePoint[key][closestIndex].y,\n            value: this.currentSlicePoint[key][closestIndex].value,\n            date: this.currentSlicePoint[key][closestIndex].date,\n          }));\n        this.showPoints(points);\n        this.showTooltip(points, { x: cordX, y: cordY });\n      }\n    });\n  };\n\n  showPoints(arr: Array<PointWithColor> = []) {\n    this.removePoints();\n    arr.forEach(point => {\n      const circle = generateSvgElement('circle', null, {\n        cx: point.x as any,\n        cy: point.y as any,\n        stroke: point.color,\n        r: POINT_RADIUS as any,\n      });\n      this.charts_svg.appendChild(circle);\n    });\n  }\n\n  removePoints() {\n    this.charts_svg.querySelectorAll('circle').forEach(el => el.remove());\n  }\n\n  showTooltip(arr: Array<PointWithValueAndColor>, point: Point) {\n    const leftPosition = (point.x as number) + DEFAULT_SPACING_LEFT;\n    const topPosition = (point.y as number) + DEFAULT_SPACING_TOP;\n    const stylesTooltip = {\n      display: 'flex',\n      right: 'unset',\n      left: `${leftPosition}px`,\n      top: `${topPosition}px`,\n    };\n    const childContainer = this.toolTip.querySelector('.items') as HTMLElement;\n\n    removeAllChild(childContainer);\n\n    this.toolTipDate.textContent = getShortDateByUnix(arr[0].date, true);\n    arr.forEach(item =>\n      childContainer.appendChild(\n        generateNode({\n          tag: 'div',\n          attrs: {\n            style: `color: ${item.color}`,\n          },\n          children: [\n            {\n              tag: 'span',\n              classList: ['value'],\n              textValue: item.value as any,\n            },\n            {\n              tag: 'span',\n              classList: ['item'],\n              textValue: this.dataset.names[item.key],\n            },\n          ],\n        }),\n      ),\n    );\n\n    if (leftPosition > this.width - MIN_TOOLTIP_WIDTH - DEFAULT_SPACING_RIGHT) {\n      stylesTooltip.right = `${Math.min(\n        MIN_TOOLTIP_WIDTH,\n        this.width - leftPosition + DEFAULT_SPACING_LEFT + DEFAULT_SPACING_RIGHT,\n      )}px`;\n      stylesTooltip.left = 'unset';\n    }\n\n    setStyleBatch(this.toolTip, stylesTooltip);\n  }\n\n  findClosesIndexOfPoint(cordX: number): number | null {\n    const arr = Object.keys(this.columnsVisible).filter(key => this.columnsVisible[key]);\n    if (!arr.length) {\n      return null;\n    }\n    return findClosestIndexPointX(this.currentSlicePoint[arr[0]], cordX);\n  }\n\n  removePathByKey(key: string) {\n    const path = document.getElementById(`pxyup_path_${this.id}_${key}`);\n    if (path) {\n      path.remove();\n    }\n  }\n\n  setColorCheckboxByKey(key: string, checkBoxControl: HTMLElement) {\n    const color = this.dataset.colors[key];\n    const checkbox = checkBoxControl.firstElementChild as HTMLElement;\n    if (!this.columnsVisible[key]) {\n      checkbox.classList.add('not_active');\n    } else {\n      checkbox.classList.remove('not_active');\n      setStyleBatch(checkbox, {\n        'border-color': color,\n        'background-color': color,\n      });\n    }\n  }\n\n  toggleColumnVisible(key: string, checkBoxControl: HTMLElement) {\n    this.columnsVisible[key] = !this.columnsVisible[key];\n    this.setColorCheckboxByKey(key, checkBoxControl);\n\n    if (!this.columnsVisible[key]) {\n      this.removePathByKey(key);\n    }\n    this.node.classList.add('animation');\n    if (!this.options.withoutPreview) {\n      this.drawPreview(false);\n    }\n    this.refresh(false, false);\n    if (this.animationTimer) {\n      clearTimeout(this.animationTimer);\n    }\n    this.animationTimer = window.setTimeout(() => {\n      this.node.classList.remove('animation');\n    }, 150);\n  }\n\n  drawPreviewControls(withEvents: boolean = false) {\n    const leftControlTranslate = getLeftTransitionByIndex(\n      this.sliceStartIndex,\n      this.previewWidth,\n      DEFAULT_PREVIEW_SPACING,\n      DEFAULT_PREVIEW_SPACING,\n      this.countElements,\n    );\n    const rightControlTranslate = getRightTransitionByIndex(\n      this.sliceEndIndex,\n      this.previewWidth,\n      DEFAULT_PREVIEW_SPACING,\n      DEFAULT_PREVIEW_SPACING,\n      this.countElements,\n    );\n    setStyleBatch(this.leftPreviewControl, {\n      transform: `translateX(${leftControlTranslate}px)`,\n    });\n    setStyleBatch(this.rightPreviewControl, {\n      transform: `translateX(${rightControlTranslate}px)`,\n    });\n    const centralWidth = Math.ceil(\n      Math.abs(\n        Math.abs(this.previewWidth - rightControlTranslate) - Math.abs(leftControlTranslate),\n      ),\n    );\n    setStyleBatch(this.centerPreviewControl, {\n      width: `${centralWidth}px`,\n      transform: `translateX(${Math.round(rightControlTranslate - centralWidth)}px)`,\n    });\n\n    if (withEvents) {\n      addNodeListener(this.leftPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n\n      addNodeListener(this.rightPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n\n      // PC\n\n      addNodeListener(this.centerPreviewControl, this.CENTRAL_CONTROL_LISTENERS);\n\n      addNodeListener(this.previewControlContainer, this.PREVIEW_CHART_LISTENERS);\n\n      addNodeListener(this.leftResizeControl, this.LEFT_RESIZE_CONTROL_LISTENERS);\n\n      addNodeListener(this.rightResizeControl, this.RIGHT_RESIZE_CONTROL_LISTENERS);\n    }\n  }\n\n  draw(withAnimation = true, withXAxis = true) {\n    this.setSupportsLines();\n    this.drawCurrentSlice(withAnimation, withXAxis);\n  }\n\n  refresh(withAnimation = true, withXAxis = true) {\n    this.resetTimer();\n    this.draw(withAnimation, withXAxis);\n  }\n\n  drawAxisX() {\n    removeAllChild(this.axisContainer);\n    const sliceSize = this.sliceEndIndex - this.sliceStartIndex + 1;\n    let labelCount = Math.min(DEFAULT_DAY_COUNT, sliceSize + 1);\n    const mustGeneratedLabels = labelCount;\n    const deltaDays =\n      sliceSize <= DEFAULT_DAY_COUNT + 2 ? 1 : Math.max(sliceSize / (mustGeneratedLabels - 1), 1);\n    let index = this.sliceStartIndex;\n\n    const generateLabel = (text: string) => {\n      return generateNode({\n        tag: 'div',\n        textValue: text,\n      });\n    };\n    if (deltaDays == 1) {\n      for (let i = this.sliceStartIndex; i <= this.sliceEndIndex; i++) {\n        this.axisContainer.appendChild(\n          generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][i])),\n        );\n      }\n    } else {\n      this.axisContainer.appendChild(\n        generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][this.sliceStartIndex])),\n      );\n      index += deltaDays;\n\n      while (labelCount - 2 > 0 && index < this.sliceEndIndex - 2) {\n        this.axisContainer.appendChild(\n          generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][Math.ceil(index)])),\n        );\n        labelCount -= 1;\n        index += deltaDays;\n      }\n      this.axisContainer.appendChild(\n        generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][this.sliceEndIndex])),\n      );\n    }\n  }\n\n  resetTimer() {\n    if (this.dragAnimationFrame) {\n      cancelAnimationFrame(this.dragAnimationFrame);\n      this.dragAnimationFrame = null;\n    }\n    if (this.resizeAnimationFrame) {\n      cancelAnimationFrame(this.resizeAnimationFrame);\n      this.resizeAnimationFrame = null;\n    }\n    if (this.mouseMoveAnimationFrame) {\n      cancelAnimationFrame(this.mouseMoveAnimationFrame);\n      this.mouseMoveAnimationFrame = null;\n    }\n    if (this.toggleColumnAnimationFrame) {\n      cancelAnimationFrame(this.toggleColumnAnimationFrame);\n      this.toggleColumnAnimationFrame = null;\n    }\n    if (this.animationTimer) {\n      clearTimeout(this.animationTimer);\n      this.animationTimer = null;\n    }\n  }\n\n  setRightIndexSlice(size: number) {\n    this.sliceStartIndex = size;\n    this.refresh();\n  }\n\n  setLeftIndexSlice(size: number) {\n    this.sliceEndIndex = size;\n    this.refresh();\n  }\n\n  drawCurrentSlice(withAnimation = true, withXAxis = true) {\n    const realMinValue = this.minValue >= 0 ? 0 : this.minValue;\n    const sliceSize = this.sliceEndIndex - this.sliceStartIndex + 1;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n\n      if (columnVisible) {\n        const currentPath = document.getElementById(`${`pxyup_path_${this.id}_${key}`}`) as any;\n\n        this.currentSlicePoint[key] = this.columnDatasets[key]\n          .slice(this.sliceStartIndex, this.sliceEndIndex + 1)\n          .map((point, index) => {\n            return {\n              x: getCoordsX(\n                this.width,\n                DEFAULT_SPACING_LEFT,\n                DEFAULT_SPACING_RIGHT,\n                index,\n                sliceSize,\n              ),\n              y: getCoordsY(\n                this.height,\n                DEFAULT_SPACING_TOP,\n                DEFAULT_SPACING_BTM,\n                this.maxValue,\n                realMinValue,\n                point,\n              ),\n              value: point,\n              date: this.columnDatasets[Type.X][this.sliceStartIndex + index],\n            };\n          });\n\n        if (currentPath) {\n          changePathOnElement(currentPath, getPathByPoints(this.currentSlicePoint[key]));\n          return;\n        }\n\n        const path = generateSvgElement('path', [], {\n          id: `pxyup_path_${this.id}_${key}`,\n          stroke: this.dataset.colors[key],\n          fill: 'none',\n          d: getPathByPoints(this.currentSlicePoint[key]),\n        });\n\n        this.charts_svg.appendChild(path);\n      }\n    });\n\n    if (!this.options.withoutAxisLabel && withXAxis) {\n      this.drawAxisX();\n    }\n  }\n\n  drawPreview(withAnimation = true) {\n    this.preview_svg.querySelectorAll(`path`).forEach(el => el.remove());\n    const values = [] as Array<number>;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n      if (columnVisible) {\n        values.push(...this.columnDatasets[key]);\n      }\n    });\n\n    const minMax = getMinMax(values);\n    this.minValueGlobal = minMax.min;\n    this.maxValueGlobal = minMax.max;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n      if (columnVisible) {\n        const path = generateSvgElement('path', [], {\n          id: `pxyup_path_preview_${this.id}_${key}`,\n          d: getPathByPoints(\n            this.columnDatasets[key].map((point, index) => ({\n              x: getCoordsX(\n                this.previewWidth,\n                DEFAULT_SPACING_PREVIEW,\n                DEFAULT_SPACING_PREVIEW,\n                index,\n                this.countElements,\n              ),\n              y: getCoordsY(\n                this.previewHeight,\n                DEFAULT_SPACING_TOP_PREVIEW,\n                DEFAULT_SPACING_BTM_PREVIEW,\n                this.maxValueGlobal,\n                this.minValueGlobal,\n                point,\n              ),\n            })),\n          ),\n          stroke: this.dataset.colors[key],\n          fill: 'none',\n        });\n\n        this.preview_svg.prepend(path);\n      }\n    });\n  }\n\n  setSupportsLines() {\n    const values = [] as Array<number>;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n      if (columnVisible) {\n        values.push(\n          ...this.columnDatasets[key].slice(this.sliceStartIndex, this.sliceEndIndex + 1),\n        );\n      }\n    });\n    if (values.length === 0) {\n      this.minValue = undefined;\n      this.maxValue = undefined;\n      this.removeSteps();\n      return;\n    }\n    const minMax = getMinMax(values);\n    if (this.minValue === minMax.min && this.maxValue === minMax.max) {\n      return;\n    }\n    this.minValue = minMax.min;\n    this.maxValue = minMax.max;\n    const step =\n      values.length === 0\n        ? 0\n        : Math.ceil(\n            (this.minValue > 0 ? this.maxValue : this.maxValue - this.minValue) /\n              this.horizontSteps,\n          );\n\n    const stepsArr = this.minValue > 0 ? [0] : [this.minValue];\n    for (let index = 1; index < this.horizontSteps; index++) {\n      stepsArr.push(stepsArr[0] + step * index || index);\n    }\n\n    this.drawSteps(stepsArr);\n  }\n\n  toggleNightMode() {\n    this.night_mod = !this.night_mod;\n    if (this.night_mod) {\n      this.node.classList.add('night');\n      this.nightModeControl.textContent = 'Switch to day mode';\n    } else {\n      this.node.classList.remove('night');\n      this.nightModeControl.textContent = 'Switch to night mode';\n    }\n  }\n\n  removeSteps() {\n    const groupSteps = this.charts_svg.querySelector('g.steps');\n    if (groupSteps) {\n      groupSteps.remove();\n    }\n  }\n\n  drawSteps(arr: Array<number>) {\n    this.removeSteps();\n    const realMinValue = this.minValue >= 0 ? 0 : this.minValue;\n    const stepsElements = [] as Array<SVGElement>;\n    arr.forEach((step, index) => {\n      const cordY =\n        index === 0\n          ? this.height - DEFAULT_SPACING_BTM\n          : (getCoordsY(\n              this.height,\n              DEFAULT_SPACING_TOP,\n              DEFAULT_SPACING_BTM,\n              this.maxValue,\n              realMinValue,\n              step,\n            ) as any);\n      const line = generateSvgElement('line', [classNameStepLine], {\n        x1: 0 as any,\n        x2: this.width as any,\n        y1: cordY,\n        y2: cordY,\n      });\n      const text = generateSvgElement(\n        'text',\n        [classNameStepTitle],\n        {\n          x: 0 as any,\n          y: (cordY - 5) as any,\n        },\n        [],\n        step as any,\n      );\n      stepsElements.push(line);\n      stepsElements.push(text);\n    });\n    const groupStepsEl = generateSvgElement('g', ['steps'], null, stepsElements);\n    this.charts_svg.prepend(groupStepsEl);\n  }\n\n  preventDrag = (e: DragEvent) => {\n    e.preventDefault();\n    return false;\n  };\n\n  getTranspilingDataset() {\n    return this.columnDatasets;\n  }\n\n  onMouseEnterPreview = () => {\n    if (this.mouseMoveAnimationFrame) {\n      cancelAnimationFrame(this.mouseMoveAnimationFrame);\n    }\n  };\n\n  private SVG_CHARTS_LISTENERS = {\n    mouseleave: this.onMouseLeave,\n    mousemove: this.onMouseMove,\n  };\n\n  private CENTRAL_CONTROL_LISTENERS = {\n    mousedown: this.onDragStart,\n    dragstart: this.preventDrag,\n    mouseup: this.onDragEnd,\n    touchstart: this.onDragStart,\n    touchend: this.onDragEnd,\n  };\n\n  private PREVIEW_CHART_LISTENERS = {\n    mouseenter: this.onMouseEnterPreview,\n    mousemove: [this.onDrag, this.onResize],\n    touchmove: [this.onDrag, this.onResize],\n  };\n\n  private DOCUMENT_LISTENERS = {\n    mouseup: this.onMouseUp,\n  };\n\n  private TOOLTIP_LISTENERS = {\n    mouseleave: this.onToolTipLeave,\n  };\n\n  private LEFT_RESIZE_CONTROL_LISTENERS = {\n    mouseup: this.onResizeEndLeft,\n    dragstart: this.preventDrag,\n    mousedown: this.onResizeStartLeft,\n    touchend: this.onResizeEndLeft,\n    touchstart: this.onResizeStartLeft,\n    click: this.stopProp,\n  };\n\n  private RIGHT_RESIZE_CONTROL_LISTENERS = {\n    mouseup: this.onResizeEndRight,\n    dragstart: this.preventDrag,\n    mousedown: this.onResizeStartRight,\n    touchend: this.onResizeEndRight,\n    touchstart: this.onResizeStartRight,\n    click: this.stopProp,\n  };\n\n  get positions() {\n    if (!this._position) {\n      this._position = this.charts_svg.getBoundingClientRect();\n    }\n    return this._position;\n  }\n}\n","import { Chart, ChartOptions } from '../interfaces/chart';\nimport { getSize, setNodeAttrs } from '../utils/misc';\n\nimport { PxyUpChart } from './chart';\nimport { PxyupNode } from '../interfaces/node';\n\nlet id = 0;\n\nexport function generateSvgElement(\n  type: string,\n  classList?: Array<string>,\n  attrs?: { [key: string]: string },\n  childs?: Array<SVGElement>,\n  value?: string,\n): SVGElement {\n  const element = document.createElementNS('http://www.w3.org/2000/svg', type);\n\n  if (classList) {\n    classList.forEach(item => {\n      element.classList.add(item);\n    });\n  }\n  if (attrs) {\n    setNodeAttrs(element, attrs);\n  }\n\n  if (childs) {\n    childs.forEach(item => {\n      element.appendChild(item);\n    });\n  }\n\n  if (value !== undefined) {\n    element.textContent = value;\n  }\n\n  return element;\n}\n\nexport function generateNode(node: PxyupNode): HTMLElement | SVGSVGElement | null {\n  if (node.skip) {\n    return null;\n  }\n\n  const rootNode =\n    node.tag === 'svg'\n      ? document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n      : document.createElement(node.tag);\n\n  if (node.textValue) {\n    rootNode.textContent = node.textValue;\n  }\n\n  if (node.classList) {\n    node.classList.forEach(item => {\n      rootNode.classList.add(item);\n    });\n  }\n\n  if (node.attrs) {\n    if (node.tag === 'svg') {\n      Object.keys(node.attrs).forEach(key => {\n        rootNode.setAttributeNS(null, key, node.attrs[key]);\n      });\n      rootNode.setAttributeNS(\n        null,\n        'viewBox',\n        `0 0 ${node.attrs['width']} ${node.attrs['height']}`,\n      );\n    } else {\n      setNodeAttrs(rootNode, node.attrs);\n    }\n  }\n\n  if (node.children) {\n    node.children.forEach((item: any) => {\n      if (!item) {\n        return;\n      }\n      if (!item.tag) {\n        rootNode.appendChild(item as HTMLHtmlElement);\n        return;\n      }\n      const child = generateNode(item as PxyupNode);\n      if (child) {\n        rootNode.appendChild(child);\n      }\n    });\n  }\n\n  return rootNode;\n}\n\nexport function chartsGenerator(\n  rootNode: HTMLElement,\n): (dataset: Chart, options?: ChartOptions) => PxyUpChart {\n  return (dataset: Chart, options: ChartOptions = {}) => {\n    const size = getSize(options.chartsContainer, {\n      width: '400',\n      height: '400',\n    });\n\n    const verticleLine = generateSvgElement('line', ['verticle'], {\n      x1: 0 as any,\n      x2: 0 as any,\n      y1: 0 as any,\n      y2: (+size.height - 10) as any,\n    });\n\n    const axisContainer = generateNode({\n      tag: 'div',\n      classList: ['axis_labels'],\n      skip: options.withoutAxisLabel,\n    });\n\n    const chartsNode = generateNode({\n      tag: 'svg',\n      classList: ['main_chart'],\n      children: [verticleLine],\n      attrs: {\n        ...size,\n      },\n    });\n\n    const previewNode = generateNode({\n      tag: 'svg',\n      skip: options.withoutPreview,\n      classList: ['chart_preview'],\n      attrs: {\n        ...getSize(options.previewContainer, {\n          width: '400',\n          height: '60',\n        }),\n      },\n    });\n\n    const leftResizeControl = generateNode({\n      tag: 'div',\n      classList: ['resize'],\n      children: [\n        generateNode({\n          tag: 'div',\n          classList: ['caret'],\n        }),\n      ],\n    });\n\n    const rightResizeControl = generateNode({\n      tag: 'div',\n      classList: ['resize'],\n      children: [\n        generateNode({\n          tag: 'div',\n          classList: ['caret'],\n        }),\n      ],\n    });\n\n    const leftPreviewContainer = generateNode({\n      tag: 'div',\n      classList: ['control', 'left'],\n      children: [leftResizeControl],\n    });\n\n    const centerPreviewContainer = generateNode({\n      tag: 'div',\n      classList: ['control', 'center'],\n    });\n\n    const rightPreviewContainer = generateNode({\n      tag: 'div',\n      classList: ['control', 'right'],\n      children: [rightResizeControl],\n    });\n\n    const previewControlContainer = generateNode({\n      tag: 'div',\n      classList: ['preview_controls'],\n      children: [leftPreviewContainer, centerPreviewContainer, rightPreviewContainer],\n    });\n\n    const previewContainer = generateNode({\n      tag: 'div',\n      skip: options.withoutPreview,\n      classList: ['preview_container'],\n      children: [previewNode, previewControlContainer],\n    });\n\n    const toolTipDateNode = generateNode({\n      tag: 'p',\n      classList: ['date'],\n    });\n    const toolTipNode = generateNode({\n      tag: 'div',\n      classList: ['tooltip'],\n      children: [\n        toolTipDateNode,\n        {\n          tag: 'div',\n          classList: ['items'],\n        },\n      ],\n    });\n    const controlsNode = generateNode({\n      tag: 'div',\n      classList: ['controls'],\n      skip: options.withoutControls,\n    });\n    const nightModeControl = generateNode({\n      tag: 'a',\n      textValue: 'Switch to Night mode',\n    });\n    const basicNode = generateNode({\n      attrs: {\n        id: `pxyup_chart_${id}`,\n      },\n      classList: ['pxyup_chart_container'],\n      tag: 'div',\n      children: [\n        chartsNode,\n        axisContainer,\n        previewContainer,\n        toolTipNode,\n        controlsNode,\n        {\n          tag: 'div',\n          classList: ['night_mode_control'],\n          skip: options.withoutNightMode,\n          children: [nightModeControl],\n        },\n      ],\n    });\n    return new PxyUpChart(\n      id++,\n      rootNode.appendChild(basicNode) as HTMLElement,\n      chartsNode,\n      previewNode,\n      toolTipNode as HTMLElement,\n      toolTipDateNode as HTMLElement,\n      controlsNode as HTMLElement,\n      nightModeControl as HTMLElement,\n      axisContainer as HTMLElement,\n      leftPreviewContainer as HTMLElement,\n      rightPreviewContainer as HTMLElement,\n      centerPreviewContainer as HTMLElement,\n      leftResizeControl as HTMLElement,\n      rightResizeControl as HTMLElement,\n      previewControlContainer as HTMLElement,\n      verticleLine as SVGElement,\n      dataset,\n      options,\n    );\n  };\n}\n","import { Chart, chartsGenerator } from './charts';\n\nconst generator = chartsGenerator(document.querySelector('.draw_engine'));\n\nfetch('./chart_data.json')\n  .then(res => res.json())\n  .then(dataSets => {\n    dataSets.forEach((dataset: any) => {\n      generator(dataset as Chart);\n    });\n  });\n"],"names":["computedIntlDateArr","long","short","computedOldDateArr","isIntl","window","Intl","IntlLong","DateTimeFormat","weekday","month","day","IntlShort","setStyleBatch","node","styles","computedStyle","Object","keys","reduce","prev","cur","style","cssText","getSize","container","defaultValue","size","height","width","getRelativeOffset","targetCoords","parentCoords","getMinMax","arr","minMax","min","Number","POSITIVE_INFINITY","max","NEGATIVE_INFINITY","curr","Math","generatorDate","unix","withWeekday","format","Date","toLocaleString","undefined","createGetterForDate","getShortDateByUnix","getPathByPoints","points","point","index","x","y","removeAllChild","firstChild","removeChild","addNodeListener","listeners","forEach","event","Array","isArray","callback","addEventListener","removeNodeListener","removeEventListener","setNodeAttrs","attrs","key","setAttribute","getCoordsX","chartsWidth","spacingLeft","spacingRight","indexElem","count","getCoordsY","chartsHeight","spacingTop","spacingBtn","maxValue","minValue","value","relativeIndexByOffset","offsetX","fullWidth","round","Type","POINT_RADIUS","MIN_TOOLTIP_WIDTH","DEFAULT_HOR_STEPS","DEFAULT_SPACING_RIGHT","DEFAULT_SPACING_LEFT","DEFAULT_SPACING_PREVIEW","DEFAULT_SPACING_TOP","DEFAULT_SPACING_BTM","DEFAULT_SPACING_TOP_PREVIEW","DEFAULT_SPACING_BTM_PREVIEW","DEFAULT_SPACING","DEFAULT_PREVIEW_SPACING","DEFAULT_SLICE","SLICE_NUMBER","DEFAULT_DAY_COUNT","classNameStepLine","classNameStepTitle","PxyUpChart","[object Object]","id","charts_svg","preview_svg","toolTip","toolTipDate","controlsContainer","nightModeControl","axisContainer","leftPreviewControl","rightPreviewControl","centerPreviewControl","leftResizeControl","rightResizeControl","previewControlContainer","verticleLine","dataset","options","this","e","stopPropagation","toggleNightMode","toggleColumnAnimationFrame","cancelAnimationFrame","requestAnimationFrame","removePoints","target","document","body","parentNode","toggleColumnVisible","isResizeActive","isDragActive","activeResize","hideHoverLineAndPoints","preventDefault","resizeAnimationFrame","doResize","dragAnimationFrame","onPreviewControlClick","cordY","clientY","positions","top","toElement","cursorX","clientX","touches","left","sliceSize","sliceEndIndex","sliceStartIndex","offsetIndexLeft","floor","previewWidth","countElements","drawPreviewControls","draw","mouseMoveAnimationFrame","cordX","offsetY","transform","closestIndex","findClosesIndexOfPoint","columnsVisible","filter","map","color","colors","currentSlicePoint","date","showPoints","showTooltip","mouseleave","onMouseLeave","mousemove","onMouseMove","mousedown","onDragStart","dragstart","preventDrag","mouseup","onDragEnd","touchstart","touchend","mouseenter","onMouseEnterPreview","onDrag","onResize","touchmove","onMouseUp","onToolTipLeave","onResizeEndLeft","onResizeStartLeft","click","stopProp","onResizeEndRight","onResizeStartRight","getAttribute","maxWidth","names","columns","column","keyOfColumn","shift","columnDatasets","length","horizontSteps","addMouseListener","withoutAxisLabel","padding-left","padding-right","withoutPreview","previewHeight","drawPreview","withoutControls","generateControls","withoutNightMode","addNightModeListener","onNightModeClick","checkBoxControl","generateNode","tag","classList","data-key","children","textValue","appendChild","onCheckBoxClick","setColorCheckboxByKey","SVG_CHARTS_LISTENERS","DOCUMENT_LISTENERS","TOOLTIP_LISTENERS","withRemove","resetTimer","i","CENTRAL_CONTROL_LISTENERS","PREVIEW_CHART_LISTENERS","LEFT_RESIZE_CONTROL_LISTENERS","RIGHT_RESIZE_CONTROL_LISTENERS","remove","display","isRight","offsetIndex","circle","generateSvgElement","cx","cy","stroke","r","querySelectorAll","el","leftPosition","stylesTooltip","right","childContainer","querySelector","textContent","item","middleIndex","rightIndex","leftIndex","findClosestIndexPointX","path","getElementById","checkbox","firstElementChild","border-color","background-color","add","removePathByKey","refresh","animationTimer","clearTimeout","setTimeout","withEvents","leftControlTranslate","rightControlTranslate","getRightTransitionByIndex","centralWidth","ceil","abs","withAnimation","withXAxis","setSupportsLines","drawCurrentSlice","labelCount","mustGeneratedLabels","deltaDays","generateLabel","text","X","realMinValue","currentPath","slice","changePathOnElement","fill","d","drawAxisX","values","push","minValueGlobal","maxValueGlobal","prepend","removeSteps","step","stepsArr","drawSteps","night_mod","groupSteps","stepsElements","line","x1","x2","y1","y2","groupStepsEl","_position","getBoundingClientRect","type","childs","element","createElementNS","skip","rootNode","createElement","setAttributeNS","child","generator","chartsContainer","chartsNode","previewNode","previewContainer","leftPreviewContainer","centerPreviewContainer","rightPreviewContainer","toolTipDateNode","toolTipNode","controlsNode","basicNode","fetch","then","res","json","dataSets"],"mappings":"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"}