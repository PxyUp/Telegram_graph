{"version":3,"file":"bundle.js","sources":["../src/utils/misc.ts","../src/interfaces/chart.ts","../src/charts/chart.ts","../src/charts/generator.ts","../src/index.ts"],"sourcesContent":["import { Container, MinMax, Point, RectangleOptions } from '../interfaces/chart';\n\nconst withDayOptions = {\n  weekday: 'short',\n  month: 'short',\n  day: 'numeric',\n};\n\nconst withoutDayOptions = {\n  month: 'short',\n  day: 'numeric',\n};\n\nconst computedIntlDateArr = {\n  long: {},\n  short: {},\n} as { long: { [key: number]: any }; short: { [key: number]: any } };\n\nconst computedOldDateArr = {} as { [key: number]: Date };\nconst isIntl = !!(window as any).Intl;\nconst IntlLong = isIntl && new Intl.DateTimeFormat('en-US', withDayOptions);\nconst IntlShort = isIntl && new Intl.DateTimeFormat('en-US', withoutDayOptions);\n\nexport function setStyleBatch(node: HTMLElement | SVGElement, styles: { [key: string]: string }) {\n  const computedStyle = Object.keys(styles).reduce(\n    (prev, cur) => prev + `${cur}: ${styles[cur]};`,\n    '',\n  );\n  node.style.cssText = computedStyle;\n}\n\nexport function getSize(container: Container, defaultValue?: any): RectangleOptions {\n  if (container && container.size) {\n    return {\n      height: container.size.height,\n      width: container.size.width,\n    };\n  }\n  return defaultValue;\n}\n\nexport function getRelativeOffset(targetCoords: number, parentCoords: number): number {\n  return targetCoords - parentCoords;\n}\n\nexport function findClosestIndexPointX(arr: Array<Point>, value: number): number {\n  let rightIndex = 0;\n  let leftIndex = arr.length - 1;\n  let middleIndex;\n  while (leftIndex - rightIndex > 1) {\n    middleIndex = Math.floor((rightIndex + leftIndex) / 2);\n    if (value < arr[middleIndex].x) {\n      leftIndex = middleIndex;\n    } else {\n      if (value > arr[middleIndex].x) {\n        rightIndex = middleIndex;\n      } else {\n        return middleIndex;\n      }\n    }\n  }\n  if (value - (arr[rightIndex].x as number) <= (arr[leftIndex].x as number) - value) {\n    return rightIndex;\n  }\n  return leftIndex;\n}\n\nexport function getMinMax(arr: Array<number>): MinMax {\n  const minMax = {\n    min: Number.POSITIVE_INFINITY,\n    max: Number.NEGATIVE_INFINITY,\n  };\n  return arr.reduce((prev, curr) => {\n    prev['min'] = Math.min(prev.min, curr);\n    prev['max'] = Math.max(prev.max, curr);\n    return prev;\n  }, minMax);\n}\n\nconst createGetterForDate = () => {\n  if (isIntl) {\n    return (unix: number, withWeekday = false): string => {\n      if (withWeekday) {\n        if (!computedIntlDateArr.long[unix]) {\n          computedIntlDateArr.long[unix] = IntlLong.format(unix);\n        }\n        return computedIntlDateArr.long[unix];\n      }\n      if (!computedIntlDateArr.short[unix]) {\n        computedIntlDateArr.short[unix] = IntlShort.format(unix);\n      }\n      return computedIntlDateArr.short[unix];\n    };\n  }\n  return (unix: number, withWeekday = false): string => {\n    if (!computedOldDateArr[unix]) {\n      computedOldDateArr[unix] = new Date(unix);\n    }\n    return computedOldDateArr[unix].toLocaleString('en-us', {\n      weekday: withWeekday ? 'short' : undefined,\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n};\n\nconst generatorDate = createGetterForDate();\n\nexport function getShortDateByUnix(unix: number, withWeekday = false): string {\n  return generatorDate(unix, withWeekday);\n}\n\nexport function getPathByPoints(points: Array<Point>): string {\n  return points.reduce((prev, point, index) => {\n    if (index === 0) {\n      return prev + `M ${point.x} ${point.y}`;\n    }\n    return prev + ` L ${point.x} ${point.y}`;\n  }, '');\n}\n\nexport function changePathOnElement(el: SVGPathElement, path: string) {\n  el.setAttribute('d', path);\n}\n\nexport function removeAllChild(node: HTMLElement) {\n  while (node.firstChild) {\n    node.removeChild(node.firstChild);\n  }\n}\n\nexport function addNodeListener(\n  node: HTMLElement | Document | SVGElement,\n  listeners: { [key: string]: any | Array<any> },\n) {\n  Object.keys(listeners).forEach(event => {\n    if (!Array.isArray(listeners[event])) {\n      node.addEventListener(event, listeners[event]);\n      return;\n    }\n    listeners[event].forEach((callback: any) => {\n      node.addEventListener(event, callback);\n    });\n  });\n}\n\nexport function removeNodeListener(\n  node: HTMLElement | Document | SVGElement,\n  listeners: { [key: string]: any | Array<any> },\n) {\n  Object.keys(listeners).forEach(event => {\n    if (!Array.isArray(listeners[event])) {\n      node.removeEventListener(event, listeners[event]);\n      return;\n    }\n    listeners[event].forEach((callback: any) => {\n      node.removeEventListener(event, callback);\n    });\n  });\n}\n\nexport function setNodeAttrs(\n  node: HTMLElement | SVGElement | Element,\n  attrs: { [key: string]: string },\n) {\n  Object.keys(attrs).forEach(key => {\n    node.setAttribute(key, attrs[key]);\n  });\n}\n\nexport function getCoordsX(\n  chartsWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  indexElem: number,\n  count: number,\n): number {\n  if (count === 1) {\n    return spacingLeft + (chartsWidth - spacingLeft - spacingRight) / 2;\n  }\n  return spacingLeft + ((chartsWidth - spacingLeft - spacingRight) / (count - 1)) * indexElem;\n}\n\nexport function getCoordsY(\n  chartsHeight: number,\n  spacingTop: number,\n  spacingBtn: number,\n  maxValue: number,\n  minValue: number,\n  value: number,\n): number {\n  if (value === maxValue) {\n    return spacingTop;\n  }\n  if (value === minValue) {\n    return chartsHeight - spacingBtn;\n  }\n  if (minValue === maxValue) {\n    return chartsHeight - spacingBtn - (chartsHeight - spacingTop - spacingBtn) / 2;\n  }\n\n  return (\n    chartsHeight -\n    spacingBtn -\n    (chartsHeight - spacingTop - spacingBtn) * ((value - minValue) / (maxValue - minValue))\n  );\n}\n\nexport function relativeIndexByOffset(\n  offsetX: number,\n  fullWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  count: number,\n): number {\n  if (offsetX <= spacingLeft) {\n    return 0;\n  }\n\n  if (offsetX >= fullWidth - spacingRight) {\n    return count - 1;\n  }\n\n  return Math.min(\n    count - 1,\n    Math.round(((offsetX - spacingLeft) / (fullWidth - spacingLeft - spacingRight)) * (count - 1)),\n  );\n}\n\nexport function getLeftTransitionByIndex(\n  leftIndex: number,\n  fullWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  count: number,\n): number {\n  return -(\n    fullWidth -\n    (leftIndex / (count - 1)) * (fullWidth - spacingLeft - spacingRight) -\n    spacingRight\n  );\n}\n\nexport function getRightTransitionByIndex(\n  rightIndex: number,\n  fullWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  count: number,\n): number {\n  return (rightIndex / (count - 1)) * (fullWidth - spacingLeft - spacingRight) + spacingLeft;\n}\n","export interface Chart {\n  columns: Array<Column>;\n  types: Types;\n  colors: { [key: string]: string };\n  names: { [key: string]: string };\n}\n\nexport interface LinePoints {\n  x1: number | string;\n  x2: number | string;\n  y1: number | string;\n  y2: number | string;\n}\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport interface PointWithColor extends Point {\n  color: string;\n}\n\nexport interface PointWithValue extends Point {\n  value: number;\n  date: number;\n}\n\nexport interface PointWithValueAndColor extends Point {\n  value: number;\n  color: string;\n  date: number;\n  key?: string;\n}\n\nexport interface ChartOptions {\n  withoutPreview?: boolean;\n  withoutControls?: boolean;\n  withoutNightMode?: boolean;\n  withoutAxisLabel?: boolean;\n  chartsContainer?: Container;\n  previewContainer?: Container;\n  horizontSteps?: number;\n}\n\nexport interface Container {\n  size: RectangleOptions;\n}\n\nexport interface RectangleOptions {\n  width: string | number;\n  height: string | number;\n}\n\nexport type Column = [String, ...Array<number>];\n\nexport enum Type {\n  Line = 'line',\n  X = 'x',\n}\n\nexport type Types = { [key: string]: Type };\n\nexport interface MinMax {\n  min: number;\n  max: number;\n}\n","import {\n  Chart,\n  ChartOptions,\n  Point,\n  PointWithColor,\n  PointWithValue,\n  PointWithValueAndColor,\n  Type,\n} from '../interfaces/chart';\nimport {\n  addNodeListener,\n  changePathOnElement,\n  findClosestIndexPointX,\n  getCoordsX,\n  getCoordsY,\n  getLeftTransitionByIndex,\n  getMinMax,\n  getPathByPoints,\n  getRelativeOffset,\n  getRightTransitionByIndex,\n  getShortDateByUnix,\n  relativeIndexByOffset,\n  removeAllChild,\n  removeNodeListener,\n  setNodeAttrs,\n  setStyleBatch,\n} from '../utils/misc';\nimport { generateNode, generateSvgElement } from './generator';\n\n// constant number\nconst POINT_RADIUS = 5;\nconst MIN_TOOLTIP_WIDTH = 90;\nconst DEFAULT_HOR_STEPS = 6;\nconst DEFAULT_SPACING_RIGHT = 30;\nconst DEFAULT_SPACING_LEFT = 30;\nconst DEFAULT_SPACING_PREVIEW = 10;\nconst DEFAULT_SPACING_TOP = 10;\nconst DEFAULT_SPACING_BTM = 10;\nconst DEFAULT_SPACING_TOP_PREVIEW = 5;\nconst DEFAULT_SPACING_BTM_PREVIEW = 5;\nconst DEFAULT_SPACING = DEFAULT_SPACING_RIGHT + DEFAULT_SPACING_LEFT;\nconst DEFAULT_PREVIEW_SPACING = 10;\nconst DEFAULT_SLICE = 19; // Programming + 1\nconst SLICE_NUMBER = 5.5;\nconst DEFAULT_DAY_COUNT = 6;\n\n// ClassNames\nconst classNameStepLine = 'line_step';\nconst classNameStepTitle = 'text_step';\n\nexport class PxyUpChart {\n  private isDragActive = false;\n  private isResizeActive = false;\n  private activeResize: boolean | null = null;\n  private resizeAnimationFrame: number | null = null;\n  private dragAnimationFrame: number | null = null;\n  private mouseMoveAnimationFrame: number | null = null;\n  private toggleColumnAnimationFrame: number | null = null;\n\n  private maxValue: number;\n  private minValue: number;\n\n  private maxValueGlobal: number;\n  private minValueGlobal: number;\n\n  private height: number;\n  private width: number;\n\n  private previewWidth: number;\n  private previewHeight: number;\n\n  private night_mod = false;\n\n  private horizontSteps: number;\n\n  private sliceStartIndex = 0;\n\n  private sliceEndIndex = 0;\n\n  private currentSlicePoint: { [key: string]: Array<PointWithValue> } = {};\n\n  private columnsVisible: { [key: string]: boolean } = {};\n\n  private columnDatasets: { [key: string]: Array<number> } = {};\n\n  private countElements: number;\n\n  private _position: ClientRect;\n\n  private animationTimer: number | null = null;\n\n  constructor(\n    private id: number,\n    private node: HTMLElement,\n    private charts_svg: HTMLElement | SVGElement,\n    private preview_svg: HTMLElement | SVGElement,\n    private toolTip: HTMLElement,\n    private toolTipDate: HTMLElement,\n    private controlsContainer: HTMLElement,\n    private nightModeControl: HTMLElement,\n    private axisContainer: HTMLElement,\n    private leftPreviewControl: HTMLElement,\n    private rightPreviewControl: HTMLElement,\n    private centerPreviewControl: HTMLElement,\n    private leftResizeControl: HTMLElement,\n    private rightResizeControl: HTMLElement,\n    private previewControlContainer: HTMLElement,\n    private verticleLine: SVGElement,\n    private dataset: Chart,\n    private options: ChartOptions,\n  ) {\n    // Hi Telegram Team!\n    // I tried charts with get min time for Scripting/Rendering/Painting in Chrome Dev Tools and Application size\n    // And i tried do it scalable, animation of axis X with point on chart > 1000, will be slow\n    // Because you every time need hide/show/translate more > 994 elements, i wanna scalable solution(And it is looks ugly when you fast  repeat left to right)\n    // That reason why i tried optimize all of them appendChild, remove, setStyle and more another things\n    // Thank you for challenge!\n    this.height = +this.charts_svg.getAttribute('height');\n    this.width = +this.charts_svg.getAttribute('width');\n    // Set tooltip max width\n    this.toolTip.style.maxWidth = `${this.width - 2 * DEFAULT_SPACING}px`;\n\n    Object.keys(this.dataset.names).forEach(key => {\n      this.columnsVisible[key] = true;\n    });\n    // Create dataset help and set first slice size and indexes\n    this.dataset.columns.forEach(column => {\n      const keyOfColumn = column.shift() as any;\n      this.columnDatasets[keyOfColumn] = column as any;\n      if (!this.countElements) {\n        this.countElements = this.columnDatasets[keyOfColumn].length;\n      }\n      if (!this.sliceStartIndex) {\n        const sliceSize = Math.max(DEFAULT_SLICE, Math.floor(this.countElements / SLICE_NUMBER));\n        this.sliceStartIndex = Math.max(this.columnDatasets[keyOfColumn].length - sliceSize - 1, 0);\n      }\n      if (!this.sliceEndIndex) {\n        this.sliceEndIndex = this.columnDatasets[keyOfColumn].length - 1;\n      }\n    });\n\n    this.horizontSteps = (options && options.horizontSteps) || DEFAULT_HOR_STEPS;\n\n    this.addMouseListener();\n\n    if (!options.withoutAxisLabel) {\n      setStyleBatch(this.axisContainer, {\n        top: `${this.height - DEFAULT_SPACING_BTM}px`,\n        width: `${this.width - (DEFAULT_SPACING_LEFT + DEFAULT_SPACING_RIGHT) / 2}px`,\n        'padding-left': `${(DEFAULT_SPACING_LEFT / 3) * 2}px`,\n        'padding-right': `${DEFAULT_SPACING_RIGHT / 2}px`,\n      });\n    }\n    this.draw();\n\n    if (!options.withoutPreview) {\n      this.previewHeight = +this.preview_svg.getAttribute('height');\n      this.previewWidth = +this.preview_svg.getAttribute('width');\n      this.drawPreview();\n      this.drawPreviewControls(true);\n    }\n\n    if (!options.withoutControls) {\n      this.generateControls();\n    }\n\n    if (!options.withoutNightMode) {\n      this.addNightModeListener();\n    }\n  }\n\n  addNightModeListener() {\n    this.nightModeControl.addEventListener('click', this.onNightModeClick);\n  }\n\n  generateControls() {\n    this.controlsContainer.style.width = `${this.width}px`;\n    Object.keys(this.columnsVisible).forEach(key => {\n      const checkBoxControl = generateNode({\n        tag: 'div',\n        classList: ['checkbox_container'],\n        attrs: {\n          'data-key': key,\n        },\n        children: [\n          {\n            tag: 'div',\n            classList: ['round'],\n          },\n          {\n            tag: 'div',\n            classList: ['label'],\n            textValue: this.dataset.names[key],\n          },\n        ],\n      });\n      this.controlsContainer.appendChild(checkBoxControl);\n      checkBoxControl.addEventListener('click', this.onCheckBoxClick, false);\n      this.setColorCheckboxByKey(key, checkBoxControl as HTMLElement);\n    });\n  }\n\n  doPreventDefault = (e: MouseEvent) => {\n    e.stopPropagation();\n  };\n\n  onNightModeClick = () => {\n    this.toggleNightMode();\n  };\n\n  onCheckBoxClick = (e: MouseEvent) => {\n    if (this.toggleColumnAnimationFrame) {\n      cancelAnimationFrame(this.toggleColumnAnimationFrame);\n    }\n    this.toggleColumnAnimationFrame = requestAnimationFrame(() => {\n      this.removePoints();\n      let target = e.target as HTMLElement;\n      let key = target.dataset.key;\n      while (!key || target === document.body) {\n        target = target.parentNode as HTMLElement;\n        key = target.dataset.key;\n      }\n      if (key) {\n        this.toggleColumnVisible(key, target);\n      }\n    });\n  };\n\n  addMouseListener() {\n    addNodeListener(this.charts_svg, this.SVG_CHARTS_LISTENERS);\n    addNodeListener(document, this.DOCUMENT_LISTENERS);\n    addNodeListener(this.toolTip, this.TOOLTIP_LISTENERS);\n  }\n\n  destroy(withRemove = true) {\n    this.resetTimer();\n    removeNodeListener(this.charts_svg, this.SVG_CHARTS_LISTENERS);\n    removeNodeListener(document, this.DOCUMENT_LISTENERS);\n    removeNodeListener(this.toolTip, this.TOOLTIP_LISTENERS);\n\n    if (!this.options.withoutControls) {\n      for (let i = 0; i < this.controlsContainer.children.length; i++) {\n        this.controlsContainer.children[i].removeEventListener('click', this.onCheckBoxClick);\n      }\n    }\n\n    if (!this.options.withoutNightMode) {\n      this.nightModeControl.removeEventListener('click', this.onNightModeClick);\n    }\n    if (!this.options.withoutPreview) {\n      removeNodeListener(this.centerPreviewControl, this.CENTRAL_CONTROL_LISTENERS);\n\n      removeNodeListener(this.previewControlContainer, this.PREVIEW_CHART_LISTENERS);\n\n      removeNodeListener(this.leftResizeControl, this.LEFT_RESIZE_CONTROL_LISTENERS);\n\n      removeNodeListener(this.rightResizeControl, this.RIGHT_RESIZE_CONTROL_LISTENERS);\n\n      removeNodeListener(this.leftPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n\n      removeNodeListener(this.rightPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n    }\n    if (withRemove) {\n      this.node.remove();\n    }\n  }\n\n  onMouseUp = (e: any) => {\n    this.isResizeActive = false;\n    this.isDragActive = false;\n    this.activeResize = null;\n  };\n\n  onResizeStartRight = (e: MouseEvent) => {\n    e.stopPropagation();\n    this.isDragActive = false;\n    this.hideHoverLineAndPoints();\n    this.isResizeActive = true;\n    this.activeResize = true;\n  };\n\n  onResizeStartLeft = (e: MouseEvent) => {\n    e.stopPropagation();\n    this.isDragActive = false;\n    this.hideHoverLineAndPoints();\n    this.isResizeActive = true;\n    this.activeResize = false;\n  };\n\n  stopProp = (e: MouseEvent) => {\n    e.stopPropagation();\n  };\n\n  onResizeEndLeft = () => {\n    this.isResizeActive = false;\n    this.activeResize = null;\n  };\n\n  onResizeEndRight = () => {\n    this.isResizeActive = false;\n    this.activeResize = null;\n  };\n\n  onResize = (e: MouseEvent | TouchEvent) => {\n    e.preventDefault();\n    if (this.isResizeActive) {\n      if (this.resizeAnimationFrame) {\n        cancelAnimationFrame(this.resizeAnimationFrame);\n      }\n      this.resizeAnimationFrame = requestAnimationFrame(() => this.doResize(this.activeResize, e));\n    }\n  };\n\n  onDragStart = (e: MouseEvent | TouchEvent) => {\n    e.stopPropagation();\n    this.hideHoverLineAndPoints();\n    this.isDragActive = true;\n  };\n\n  onDragEnd = (e: MouseEvent | TouchEvent) => {\n    this.isDragActive = false;\n  };\n\n  onDrag = (e: MouseEvent | TouchEvent) => {\n    e.preventDefault();\n    if (this.isDragActive) {\n      if (this.dragAnimationFrame) {\n        cancelAnimationFrame(this.dragAnimationFrame);\n      }\n      this.dragAnimationFrame = requestAnimationFrame(() => this.onPreviewControlClick(e));\n    }\n  };\n\n  onMouseLeave = (e: MouseEvent) => {\n    const cordY = getRelativeOffset(e.clientY, this.positions.top);\n    if (e.toElement !== this.toolTip || cordY >= this.height - 100) {\n      this.hideHoverLineAndPoints();\n    }\n  };\n\n  onToolTipLeave = () => {\n    this.hideHoverLineAndPoints();\n  };\n\n  hideHoverLineAndPoints() {\n    this.removePoints();\n    setStyleBatch(this.verticleLine, {\n      transform: 'translateX(-50px)',\n    });\n    this.toolTip.style.display = 'none';\n  }\n\n  doResize(isRight: boolean, e: MouseEvent | TouchEvent) {\n    if (isRight === null) {\n      return;\n    }\n    const cursorX = getRelativeOffset(\n      (e as MouseEvent).clientX || (e as TouchEvent).touches[0].clientX,\n      this.positions.left,\n    );\n    const offsetIndex = relativeIndexByOffset(\n      cursorX,\n      this.previewWidth,\n      DEFAULT_PREVIEW_SPACING,\n      DEFAULT_PREVIEW_SPACING,\n      this.countElements,\n    );\n    if (!isRight) {\n      this.sliceStartIndex = offsetIndex;\n      if (this.sliceStartIndex >= this.sliceEndIndex) {\n        this.sliceStartIndex = this.sliceEndIndex - 1;\n      }\n    } else {\n      this.sliceEndIndex = offsetIndex;\n\n      if (this.sliceEndIndex <= this.sliceStartIndex) {\n        this.sliceEndIndex = this.sliceStartIndex + 1;\n      }\n    }\n\n    this.drawPreviewControls();\n    this.removeAxisXCharts();\n    this.draw();\n  }\n\n  onPreviewControlClick = (e: MouseEvent | TouchEvent) => {\n    const cursorX = getRelativeOffset(\n      (e as MouseEvent).clientX || (e as TouchEvent).touches[0].clientX,\n      this.positions.left,\n    );\n    const sliceSize = this.sliceEndIndex - this.sliceStartIndex;\n    const offsetIndexLeft = Math.floor\n      (relativeIndexByOffset(\n        cursorX,\n        this.previewWidth,\n        DEFAULT_PREVIEW_SPACING,\n        DEFAULT_PREVIEW_SPACING,\n        this.countElements,\n      ) -\n        sliceSize / 2);\n    this.sliceStartIndex = Math.max(offsetIndexLeft, 0);\n    this.sliceEndIndex = Math.min(this.sliceStartIndex + sliceSize, this.countElements - 1);\n\n    if (this.sliceEndIndex === this.countElements - 1) {\n      this.sliceStartIndex = Math.max(0, this.sliceEndIndex - sliceSize);\n    }\n    if (this.sliceStartIndex === 0) {\n      this.sliceEndIndex = Math.min(this.sliceStartIndex + sliceSize, this.countElements - 1);\n    }\n\n    this.drawPreviewControls();\n    this.removeAxisXCharts();\n    this.draw();\n  };\n\n  onMouseMove = (e: MouseEvent) => {\n    if (this.mouseMoveAnimationFrame) {\n      cancelAnimationFrame(this.mouseMoveAnimationFrame);\n    }\n    this.mouseMoveAnimationFrame = requestAnimationFrame(() => {\n      const cordX = e.offsetX;\n      const cordY = e.offsetY;\n      if (\n        cordX > DEFAULT_SPACING_LEFT / 2 &&\n        cordX < this.width - DEFAULT_SPACING_RIGHT / 2 &&\n        cordY < this.height - DEFAULT_SPACING_BTM\n      ) {\n        setStyleBatch(this.verticleLine, {\n          transform: `translateX(${cordX}px)`,\n        });\n        const closestIndex = this.findClosesIndexOfPoint(cordX);\n        if (closestIndex === null) {\n          return;\n        }\n        const points = Object.keys(this.columnsVisible)\n          .filter(key => this.columnsVisible[key])\n          .map(key => ({\n            key: key,\n            color: this.dataset.colors[key],\n            x: this.currentSlicePoint[key][closestIndex].x,\n            y: this.currentSlicePoint[key][closestIndex].y,\n            value: this.currentSlicePoint[key][closestIndex].value,\n            date: this.currentSlicePoint[key][closestIndex].date,\n          }));\n        this.showPoints(points);\n        this.showTooltip(points, { x: cordX, y: cordY });\n      }\n    });\n  };\n\n  showPoints(arr: Array<PointWithColor> = []) {\n    this.removePoints();\n    arr.forEach(point => {\n      const circle = generateSvgElement('circle', null, {\n        cx: point.x as any,\n        cy: point.y as any,\n        stroke: point.color,\n        r: POINT_RADIUS as any,\n      });\n      this.charts_svg.appendChild(circle);\n    });\n  }\n\n  removePoints() {\n    this.charts_svg.querySelectorAll('circle').forEach(el => el.remove());\n  }\n\n  showTooltip(arr: Array<PointWithValueAndColor>, point: Point) {\n    const leftPosition = (point.x as number) + DEFAULT_SPACING_LEFT;\n    const topPosition = (point.y as number) + DEFAULT_SPACING_TOP;\n    const stylesTooltip = {\n      display: 'flex',\n      right: 'unset',\n      left: `${leftPosition}px`,\n      top: `${topPosition}px`,\n    };\n    const childContainer = this.toolTip.querySelector('.items') as HTMLElement;\n\n    removeAllChild(childContainer);\n\n    this.toolTipDate.textContent = getShortDateByUnix(arr[0].date, true);\n    arr.forEach(item =>\n      childContainer.appendChild(\n        generateNode({\n          tag: 'div',\n          attrs: {\n            style: `color: ${item.color}`,\n          },\n          children: [\n            {\n              tag: 'span',\n              classList: ['value'],\n              textValue: item.value as any,\n            },\n            {\n              tag: 'span',\n              classList: ['item'],\n              textValue: this.dataset.names[item.key],\n            },\n          ],\n        }),\n      ),\n    );\n\n    if (leftPosition > this.width - MIN_TOOLTIP_WIDTH - DEFAULT_SPACING_RIGHT) {\n      stylesTooltip.right = `${Math.min(\n        MIN_TOOLTIP_WIDTH,\n        this.width - leftPosition + DEFAULT_SPACING_LEFT + DEFAULT_SPACING_RIGHT,\n      )}px`;\n      stylesTooltip.left = 'unset';\n    }\n\n    setStyleBatch(this.toolTip, stylesTooltip);\n  }\n\n  findClosesIndexOfPoint(cordX: number): number | null {\n    const arr = Object.keys(this.columnsVisible).filter(key => this.columnsVisible[key]);\n    if (!arr.length) {\n      return null;\n    }\n    return findClosestIndexPointX(this.currentSlicePoint[arr[0]], cordX);\n  }\n\n  removePathByKey(key: string) {\n    const path = document.getElementById(`pxyup_path_${this.id}_${key}`);\n    if (path) {\n      path.remove();\n    }\n  }\n\n  setColorCheckboxByKey(key: string, checkBoxControl: HTMLElement) {\n    const color = this.dataset.colors[key];\n    const checkbox = checkBoxControl.firstElementChild as HTMLElement;\n    if (!this.columnsVisible[key]) {\n      checkbox.classList.add('not_active');\n    } else {\n      checkbox.classList.remove('not_active');\n      setStyleBatch(checkbox, {\n        'border-color': color,\n        'background-color': color,\n      });\n    }\n  }\n\n  toggleColumnVisible(key: string, checkBoxControl: HTMLElement) {\n    this.columnsVisible[key] = !this.columnsVisible[key];\n    this.setColorCheckboxByKey(key, checkBoxControl);\n\n    if (!this.columnsVisible[key]) {\n      this.removePathByKey(key);\n    }\n    this.node.classList.add('animation');\n    if (!this.options.withoutPreview) {\n      this.drawPreview(false);\n    }\n    this.refresh(false, false);\n    if (this.animationTimer) {\n      clearTimeout(this.animationTimer);\n    }\n    this.animationTimer = window.setTimeout(() => {\n      this.node.classList.remove('animation');\n    }, 150);\n  }\n\n  drawPreviewControls(withEvents: boolean = false) {\n    const leftControlTranslate = getLeftTransitionByIndex(\n      this.sliceStartIndex,\n      this.previewWidth,\n      DEFAULT_PREVIEW_SPACING,\n      DEFAULT_PREVIEW_SPACING,\n      this.countElements,\n    );\n    const rightControlTranslate = getRightTransitionByIndex(\n      this.sliceEndIndex,\n      this.previewWidth,\n      DEFAULT_PREVIEW_SPACING,\n      DEFAULT_PREVIEW_SPACING,\n      this.countElements,\n    );\n    setStyleBatch(this.leftPreviewControl, {\n      transform: `translateX(${leftControlTranslate}px)`,\n    });\n    setStyleBatch(this.rightPreviewControl, {\n      transform: `translateX(${rightControlTranslate}px)`,\n    });\n    const centralWidth = Math.ceil(\n      Math.abs(\n        Math.abs(this.previewWidth - rightControlTranslate) - Math.abs(leftControlTranslate),\n      ),\n    );\n    setStyleBatch(this.centerPreviewControl, {\n      width: `${centralWidth}px`,\n      transform: `translateX(${Math.round(rightControlTranslate - centralWidth)}px)`,\n    });\n\n    if (withEvents) {\n      addNodeListener(this.leftPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n\n      addNodeListener(this.rightPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n\n      // PC\n\n      addNodeListener(this.centerPreviewControl, this.CENTRAL_CONTROL_LISTENERS);\n\n      addNodeListener(this.previewControlContainer, this.PREVIEW_CHART_LISTENERS);\n\n      addNodeListener(this.leftResizeControl, this.LEFT_RESIZE_CONTROL_LISTENERS);\n\n      addNodeListener(this.rightResizeControl, this.RIGHT_RESIZE_CONTROL_LISTENERS);\n    }\n  }\n\n  draw(withAnimation = true, withXAxis = true) {\n    this.setSupportsLines();\n    this.drawCurrentSlice(withAnimation, withXAxis);\n  }\n\n  refresh(withAnimation = true, withXAxis = true) {\n    this.resetTimer();\n    this.draw(withAnimation, withXAxis);\n  }\n\n  drawAxisX() {\n    removeAllChild(this.axisContainer);\n    const sliceSize = this.sliceEndIndex - this.sliceStartIndex + 1;\n    let labelCount = Math.min(DEFAULT_DAY_COUNT, sliceSize + 1);\n    const mustGeneratedLabels = labelCount;\n    const deltaDays =\n      sliceSize <= DEFAULT_DAY_COUNT + 2 ? 1 : Math.max(sliceSize / (mustGeneratedLabels - 1), 1);\n    let index = this.sliceStartIndex;\n\n    const generateLabel = (text: string) => {\n      return generateNode({\n        tag: 'div',\n        textValue: text,\n      });\n    };\n    if (deltaDays == 1) {\n      for (let i = this.sliceStartIndex; i <= this.sliceEndIndex; i++) {\n        this.axisContainer.appendChild(\n          generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][i])),\n        );\n      }\n    } else {\n      this.axisContainer.appendChild(\n        generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][this.sliceStartIndex])),\n      );\n      index += deltaDays;\n\n      while (labelCount - 2 > 0 && index < this.sliceEndIndex - 2) {\n        this.axisContainer.appendChild(\n          generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][Math.ceil(index)])),\n        );\n        labelCount -= 1;\n        index += deltaDays;\n      }\n      this.axisContainer.appendChild(\n        generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][this.sliceEndIndex])),\n      );\n    }\n  }\n\n  resetTimer() {\n    if (this.dragAnimationFrame) {\n      cancelAnimationFrame(this.dragAnimationFrame);\n      this.dragAnimationFrame = null;\n    }\n    if (this.resizeAnimationFrame) {\n      cancelAnimationFrame(this.resizeAnimationFrame);\n      this.resizeAnimationFrame = null;\n    }\n    if (this.mouseMoveAnimationFrame) {\n      cancelAnimationFrame(this.mouseMoveAnimationFrame);\n      this.mouseMoveAnimationFrame = null;\n    }\n    if (this.toggleColumnAnimationFrame) {\n      cancelAnimationFrame(this.toggleColumnAnimationFrame);\n      this.toggleColumnAnimationFrame = null;\n    }\n    if (this.animationTimer) {\n      clearTimeout(this.animationTimer);\n      this.animationTimer = null;\n    }\n  }\n\n  setRightIndexSlice(size: number) {\n    this.sliceStartIndex = size;\n    this.refresh();\n  }\n\n  setLeftIndexSlice(size: number) {\n    this.sliceEndIndex = size;\n    this.refresh();\n  }\n\n  removeAxisXCharts() {\n    const el = this.charts_svg.querySelector(`g.axis`);\n    if (el) {\n      el.remove();\n    }\n  }\n\n  drawCurrentSlice(withAnimation = true, withXAxis = true) {\n    const realMinValue = this.minValue >= 0 ? 0 : this.minValue;\n    const sliceSize = this.sliceEndIndex - this.sliceStartIndex + 1;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n\n      if (columnVisible) {\n        const currentPath = document.getElementById(`${`pxyup_path_${this.id}_${key}`}`) as any;\n\n        this.currentSlicePoint[key] = this.columnDatasets[key]\n          .slice(this.sliceStartIndex, this.sliceEndIndex + 1)\n          .map((point, index) => {\n            return {\n              x: getCoordsX(\n                this.width,\n                DEFAULT_SPACING_LEFT,\n                DEFAULT_SPACING_RIGHT,\n                index,\n                sliceSize,\n              ),\n              y: getCoordsY(\n                this.height,\n                DEFAULT_SPACING_TOP,\n                DEFAULT_SPACING_BTM,\n                this.maxValue,\n                realMinValue,\n                point,\n              ),\n              value: point,\n              date: this.columnDatasets[Type.X][this.sliceStartIndex + index],\n            };\n          });\n\n        if (currentPath) {\n          changePathOnElement(currentPath, getPathByPoints(this.currentSlicePoint[key]));\n          return;\n        }\n\n        const path = generateSvgElement('path', [], {\n          id: `pxyup_path_${this.id}_${key}`,\n          stroke: this.dataset.colors[key],\n          fill: 'none',\n          d: getPathByPoints(this.currentSlicePoint[key]),\n        });\n\n        this.charts_svg.appendChild(path);\n      }\n    });\n\n    if (!this.options.withoutAxisLabel && withXAxis) {\n      this.drawAxisX();\n    }\n  }\n\n  drawPreview(withAnimation = true) {\n    this.preview_svg.querySelectorAll(`path`).forEach(el => el.remove());\n    const values = [] as Array<number>;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n      if (columnVisible) {\n        values.push(...this.columnDatasets[key]);\n      }\n    });\n\n    const minMax = getMinMax(values);\n    this.minValueGlobal = minMax.min;\n    this.maxValueGlobal = minMax.max;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n      if (columnVisible) {\n        const path = generateSvgElement('path', [], {\n          id: `pxyup_path_preview_${this.id}_${key}`,\n          d: getPathByPoints(\n            this.columnDatasets[key].map((point, index) => ({\n              x: getCoordsX(\n                this.previewWidth,\n                DEFAULT_SPACING_PREVIEW,\n                DEFAULT_SPACING_PREVIEW,\n                index,\n                this.countElements,\n              ),\n              y: getCoordsY(\n                this.previewHeight,\n                DEFAULT_SPACING_TOP_PREVIEW,\n                DEFAULT_SPACING_BTM_PREVIEW,\n                this.maxValueGlobal,\n                this.minValueGlobal,\n                point,\n              ),\n            })),\n          ),\n          stroke: this.dataset.colors[key],\n          fill: 'none',\n        });\n\n        this.preview_svg.prepend(path);\n      }\n    });\n  }\n\n  setSupportsLines() {\n    const values = [] as Array<number>;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n      if (columnVisible) {\n        values.push(\n          ...this.columnDatasets[key].slice(this.sliceStartIndex, this.sliceEndIndex + 1),\n        );\n      }\n    });\n    if (values.length === 0) {\n      this.minValue = undefined;\n      this.maxValue = undefined;\n      this.removeSteps();\n      return;\n    }\n    const minMax = getMinMax(values);\n    if (this.minValue === minMax.min && this.maxValue === minMax.max) {\n      return;\n    }\n    this.minValue = minMax.min;\n    this.maxValue = minMax.max;\n    const step =\n      values.length === 0\n        ? 0\n        : Math.ceil(\n            (this.minValue > 0 ? this.maxValue : this.maxValue - this.minValue) /\n              this.horizontSteps,\n          );\n\n    const stepsArr = this.minValue > 0 ? [0] : [this.minValue];\n    for (let index = 1; index < this.horizontSteps; index++) {\n      stepsArr.push(stepsArr[0] + step * index || index);\n    }\n\n    this.drawSteps(stepsArr);\n  }\n\n  toggleNightMode() {\n    this.night_mod = !this.night_mod;\n    if (this.night_mod) {\n      this.node.classList.add('night');\n      this.nightModeControl.textContent = 'Switch to day mode';\n    } else {\n      this.node.classList.remove('night');\n      this.nightModeControl.textContent = 'Switch to night mode';\n    }\n  }\n\n  removeSteps() {\n    const groupSteps = this.charts_svg.querySelector('g.steps');\n    if (groupSteps) {\n      groupSteps.remove();\n    }\n  }\n\n  drawSteps(arr: Array<number>) {\n    this.removeSteps();\n    const realMinValue = this.minValue >= 0 ? 0 : this.minValue;\n    const stepsElements = [] as Array<SVGElement>;\n    arr.forEach((step, index) => {\n      const cordY =\n        index === 0\n          ? this.height - DEFAULT_SPACING_BTM\n          : (getCoordsY(\n              this.height,\n              DEFAULT_SPACING_TOP,\n              DEFAULT_SPACING_BTM,\n              this.maxValue,\n              realMinValue,\n              step,\n            ) as any);\n      const line = generateSvgElement('line', [classNameStepLine], {\n        x1: 0 as any,\n        x2: this.width as any,\n        y1: cordY,\n        y2: cordY,\n      });\n      const text = generateSvgElement(\n        'text',\n        [classNameStepTitle],\n        {\n          x: 0 as any,\n          y: (cordY - 5) as any,\n        },\n        [],\n        step as any,\n      );\n      stepsElements.push(line);\n      stepsElements.push(text);\n    });\n    const groupStepsEl = generateSvgElement('g', ['steps'], null, stepsElements);\n    this.charts_svg.prepend(groupStepsEl);\n  }\n\n  preventDrag = (e: DragEvent) => {\n    e.preventDefault();\n    return false;\n  };\n\n  getTranspilingDataset() {\n    return this.columnDatasets;\n  }\n\n  onMouseEnterPreview = () => {\n    this.hideHoverLineAndPoints();\n  };\n\n  private SVG_CHARTS_LISTENERS = {\n    mouseleave: this.onMouseLeave,\n    mousemove: this.onMouseMove,\n  };\n\n  private CENTRAL_CONTROL_LISTENERS = {\n    mousedown: this.onDragStart,\n    dragstart: this.preventDrag,\n    mouseup: this.onDragEnd,\n    touchstart: this.onDragStart,\n    touchend: this.onDragEnd,\n  };\n\n  private PREVIEW_CHART_LISTENERS = {\n    mouseenter: this.onMouseEnterPreview,\n    mousemove: [this.onDrag, this.onResize],\n    touchmove: [this.onDrag, this.onResize],\n  };\n\n  private DOCUMENT_LISTENERS = {\n    mouseup: this.onMouseUp,\n  };\n\n  private TOOLTIP_LISTENERS = {\n    mouseleave: this.onToolTipLeave,\n  };\n\n  private LEFT_RESIZE_CONTROL_LISTENERS = {\n    mouseup: this.onResizeEndLeft,\n    dragstart: this.preventDrag,\n    mousedown: this.onResizeStartLeft,\n    touchend: this.onResizeEndLeft,\n    touchstart: this.onResizeStartLeft,\n    click: this.stopProp,\n  };\n\n  private RIGHT_RESIZE_CONTROL_LISTENERS = {\n    mouseup: this.onResizeEndRight,\n    dragstart: this.preventDrag,\n    mousedown: this.onResizeStartRight,\n    touchend: this.onResizeEndRight,\n    touchstart: this.onResizeStartRight,\n    click: this.stopProp,\n  };\n\n  get positions() {\n    if (!this._position) {\n      this._position = this.charts_svg.getBoundingClientRect();\n    }\n    return this._position;\n  }\n}\n","import { Chart, ChartOptions } from '../interfaces/chart';\nimport { getSize, setNodeAttrs } from '../utils/misc';\n\nimport { PxyUpChart } from './chart';\nimport { PxyupNode } from '../interfaces/node';\n\nlet id = 0;\n\nexport function generateSvgElement(\n  type: string,\n  classList?: Array<string>,\n  attrs?: { [key: string]: string },\n  childs?: Array<SVGElement>,\n  value?: string,\n): SVGElement {\n  const element = document.createElementNS('http://www.w3.org/2000/svg', type);\n\n  if (classList) {\n    classList.forEach(item => {\n      element.classList.add(item);\n    });\n  }\n  if (attrs) {\n    setNodeAttrs(element, attrs);\n  }\n\n  if (childs) {\n    childs.forEach(item => {\n      element.appendChild(item);\n    });\n  }\n\n  if (value !== undefined) {\n    element.appendChild(document.createTextNode(value));\n  }\n\n  return element;\n}\n\nexport function generateNode(node: PxyupNode): HTMLElement | SVGSVGElement | null {\n  if (node.skip) {\n    return null;\n  }\n\n  const rootNode =\n    node.tag === 'svg'\n      ? document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n      : document.createElement(node.tag);\n\n  if (node.textValue) {\n    rootNode.textContent = node.textValue;\n  }\n\n  if (node.classList) {\n    node.classList.forEach(item => {\n      rootNode.classList.add(item);\n    });\n  }\n\n  if (node.attrs) {\n    if (node.tag === 'svg') {\n      Object.keys(node.attrs).forEach(key => {\n        rootNode.setAttributeNS(null, key, node.attrs[key]);\n      });\n      rootNode.setAttributeNS(\n        null,\n        'viewBox',\n        `0 0 ${node.attrs['width']} ${node.attrs['height']}`,\n      );\n    } else {\n      setNodeAttrs(rootNode, node.attrs);\n    }\n  }\n\n  if (node.children) {\n    node.children.forEach((item: any) => {\n      if (!item) {\n        return;\n      }\n      if (!item.tag) {\n        rootNode.appendChild(item as HTMLHtmlElement);\n        return;\n      }\n      const child = generateNode(item as PxyupNode);\n      if (child) {\n        rootNode.appendChild(child);\n      }\n    });\n  }\n\n  return rootNode;\n}\n\nexport function chartsGenerator(\n  rootNode: HTMLElement,\n): (dataset: Chart, options?: ChartOptions) => PxyUpChart {\n  return (dataset: Chart, options: ChartOptions = {}) => {\n    const size = getSize(options.chartsContainer, {\n      width: '400',\n      height: '400',\n    });\n\n    const verticleLine = generateSvgElement('line', ['verticle'], {\n      x1: 0 as any,\n      x2: 0 as any,\n      y1: 0 as any,\n      y2: (+size.height - 10) as any,\n    });\n\n    const axisContainer = generateNode({\n      tag: 'div',\n      classList: ['axis_labels'],\n      skip: options.withoutAxisLabel,\n    });\n\n    const chartsNode = generateNode({\n      tag: 'svg',\n      classList: ['main_chart'],\n      children: [verticleLine],\n      attrs: {\n        ...size,\n      },\n    });\n\n    const previewNode = generateNode({\n      tag: 'svg',\n      skip: options.withoutPreview,\n      classList: ['chart_preview'],\n      attrs: {\n        ...getSize(options.previewContainer, {\n          width: '400',\n          height: '60',\n        }),\n      },\n    });\n\n    const leftResizeControl = generateNode({\n      tag: 'div',\n      classList: ['resize'],\n      children: [\n        generateNode({\n          tag: 'div',\n          classList: ['caret'],\n        }),\n      ],\n    });\n\n    const rightResizeControl = generateNode({\n      tag: 'div',\n      classList: ['resize'],\n      children: [\n        generateNode({\n          tag: 'div',\n          classList: ['caret'],\n        }),\n      ],\n    });\n\n    const leftPreviewContainer = generateNode({\n      tag: 'div',\n      classList: ['control', 'left'],\n      children: [leftResizeControl],\n    });\n\n    const centerPreviewContainer = generateNode({\n      tag: 'div',\n      classList: ['control', 'center'],\n    });\n\n    const rightPreviewContainer = generateNode({\n      tag: 'div',\n      classList: ['control', 'right'],\n      children: [rightResizeControl],\n    });\n\n    const previewControlContainer = generateNode({\n      tag: 'div',\n      classList: ['preview_controls'],\n      children: [leftPreviewContainer, centerPreviewContainer, rightPreviewContainer],\n    });\n\n    const previewContainer = generateNode({\n      tag: 'div',\n      skip: options.withoutPreview,\n      classList: ['preview_container'],\n      children: [previewNode, previewControlContainer],\n    });\n\n    const toolTipDateNode = generateNode({\n      tag: 'p',\n      classList: ['date'],\n    });\n    const toolTipNode = generateNode({\n      tag: 'div',\n      classList: ['tooltip'],\n      children: [\n        toolTipDateNode,\n        {\n          tag: 'div',\n          classList: ['items'],\n        },\n      ],\n    });\n    const controlsNode = generateNode({\n      tag: 'div',\n      classList: ['controls'],\n      skip: options.withoutControls,\n    });\n    const nightModeControl = generateNode({\n      tag: 'a',\n      textValue: 'Switch to Night mode',\n    });\n    const basicNode = generateNode({\n      attrs: {\n        id: `pxyup_chart_${id}`,\n      },\n      classList: ['pxyup_chart_container'],\n      tag: 'div',\n      children: [\n        chartsNode,\n        axisContainer,\n        previewContainer,\n        toolTipNode,\n        controlsNode,\n        {\n          tag: 'div',\n          classList: ['night_mode_control'],\n          skip: options.withoutNightMode,\n          children: [nightModeControl],\n        },\n      ],\n    });\n    return new PxyUpChart(\n      id++,\n      rootNode.appendChild(basicNode) as HTMLElement,\n      chartsNode,\n      previewNode,\n      toolTipNode as HTMLElement,\n      toolTipDateNode as HTMLElement,\n      controlsNode as HTMLElement,\n      nightModeControl as HTMLElement,\n      axisContainer as HTMLElement,\n      leftPreviewContainer as HTMLElement,\n      rightPreviewContainer as HTMLElement,\n      centerPreviewContainer as HTMLElement,\n      leftResizeControl as HTMLElement,\n      rightResizeControl as HTMLElement,\n      previewControlContainer as HTMLElement,\n      verticleLine as SVGElement,\n      dataset,\n      options,\n    );\n  };\n}\n","import { Chart, chartsGenerator } from './charts';\n\nconst generator = chartsGenerator(document.querySelector('.draw_engine'));\n\nfetch('./chart_data.json')\n  .then(res => res.json())\n  .then(dataSets => {\n    dataSets.forEach((dataset: any) => {\n      generator(dataset as Chart);\n    });\n  });\n"],"names":["computedIntlDateArr","long","short","computedOldDateArr","isIntl","window","Intl","IntlLong","DateTimeFormat","weekday","month","day","IntlShort","setStyleBatch","node","styles","computedStyle","Object","keys","reduce","prev","cur","style","cssText","getSize","container","defaultValue","size","height","width","getRelativeOffset","targetCoords","parentCoords","getMinMax","arr","minMax","min","Number","POSITIVE_INFINITY","max","NEGATIVE_INFINITY","curr","Math","Type","generatorDate","unix","withWeekday","format","Date","toLocaleString","undefined","getShortDateByUnix","getPathByPoints","points","point","index","x","y","removeAllChild","firstChild","removeChild","addNodeListener","listeners","forEach","event","Array","isArray","callback","addEventListener","removeNodeListener","removeEventListener","setNodeAttrs","attrs","key","setAttribute","getCoordsX","chartsWidth","spacingLeft","spacingRight","indexElem","count","getCoordsY","chartsHeight","spacingTop","spacingBtn","maxValue","minValue","value","relativeIndexByOffset","offsetX","fullWidth","round","DEFAULT_SPACING_RIGHT","DEFAULT_SPACING_LEFT","DEFAULT_PREVIEW_SPACING","id","charts_svg","preview_svg","toolTip","toolTipDate","controlsContainer","nightModeControl","axisContainer","leftPreviewControl","rightPreviewControl","centerPreviewControl","leftResizeControl","rightResizeControl","previewControlContainer","verticleLine","dataset","options","this","e","stopPropagation","_this","toggleNightMode","toggleColumnAnimationFrame","cancelAnimationFrame","requestAnimationFrame","removePoints","target","document","body","parentNode","toggleColumnVisible","isResizeActive","isDragActive","activeResize","hideHoverLineAndPoints","preventDefault","resizeAnimationFrame","doResize","dragAnimationFrame","onPreviewControlClick","cordY","clientY","positions","top","toElement","cursorX","clientX","touches","left","sliceSize","sliceEndIndex","sliceStartIndex","offsetIndexLeft","floor","previewWidth","countElements","drawPreviewControls","removeAxisXCharts","draw","mouseMoveAnimationFrame","cordX","offsetY","transform","closestIndex_1","findClosesIndexOfPoint","columnsVisible","filter","map","color","colors","currentSlicePoint","date","showPoints","showTooltip","mouseleave","onMouseLeave","mousemove","onMouseMove","mousedown","onDragStart","dragstart","preventDrag","mouseup","onDragEnd","touchstart","touchend","mouseenter","onMouseEnterPreview","onDrag","onResize","touchmove","onMouseUp","onToolTipLeave","onResizeEndLeft","onResizeStartLeft","click","stopProp","onResizeEndRight","onResizeStartRight","getAttribute","maxWidth","names","columns","column","keyOfColumn","shift","columnDatasets","length","horizontSteps","addMouseListener","withoutAxisLabel","padding-left","padding-right","withoutPreview","previewHeight","drawPreview","withoutControls","generateControls","withoutNightMode","addNightModeListener","PxyUpChart","onNightModeClick","checkBoxControl","generateNode","tag","classList","data-key","children","textValue","appendChild","onCheckBoxClick","setColorCheckboxByKey","SVG_CHARTS_LISTENERS","DOCUMENT_LISTENERS","TOOLTIP_LISTENERS","withRemove","resetTimer","i","CENTRAL_CONTROL_LISTENERS","PREVIEW_CHART_LISTENERS","LEFT_RESIZE_CONTROL_LISTENERS","RIGHT_RESIZE_CONTROL_LISTENERS","remove","display","isRight","offsetIndex","circle","generateSvgElement","cx","cy","stroke","r","querySelectorAll","el","leftPosition","stylesTooltip","right","childContainer","querySelector","textContent","item","middleIndex","rightIndex","leftIndex","findClosestIndexPointX","path","getElementById","checkbox","firstElementChild","border-color","background-color","add","removePathByKey","refresh","animationTimer","clearTimeout","setTimeout","withEvents","leftControlTranslate","rightControlTranslate","centralWidth","ceil","abs","withAnimation","withXAxis","setSupportsLines","drawCurrentSlice","labelCount","mustGeneratedLabels","deltaDays","DEFAULT_DAY_COUNT","generateLabel","text","X","realMinValue","currentPath","slice","fill","d","drawAxisX","values","push","minValueGlobal","maxValueGlobal","prepend","removeSteps","step","stepsArr","drawSteps","night_mod","groupSteps","stepsElements","line","x1","x2","y1","y2","groupStepsEl","_position","getBoundingClientRect","type","childs","element","createElementNS","createTextNode","skip","rootNode","createElement","setAttributeNS","child","generator","chartsContainer","chartsNode","previewNode","previewContainer","leftPreviewContainer","centerPreviewContainer","rightPreviewContainer","toolTipDateNode","toolTipNode","controlsNode","basicNode","fetch","then","res","json","dataSets"],"mappings":"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"}