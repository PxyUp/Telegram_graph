{"version":3,"file":"bundle.js","sources":["../src/utils/misc.ts","../src/interfaces/chart.ts","../src/charts/chart.ts","../src/charts/generator.ts","../src/index.ts"],"sourcesContent":["import { Container, MinMax, Point, RectangleOptions } from '../interfaces/chart';\n\nconst withDayOptions = {\n  weekday: 'short',\n  month: 'short',\n  day: 'numeric',\n};\n\nconst withoutDayOptions = {\n  month: 'short',\n  day: 'numeric',\n};\n\nconst computedIntlDateArr = {\n  long: {},\n  short: {},\n} as { long: { [key: number]: any }; short: { [key: number]: any } };\n\nconst computedOldDateArr = {} as { [key: number]: Date };\nconst isIntl = !!(window as any).Intl;\nconst IntlLong = isIntl && new Intl.DateTimeFormat('en-US', withDayOptions);\nconst IntlShort = isIntl && new Intl.DateTimeFormat('en-US', withoutDayOptions);\n\nexport function setStyleBatch(node: HTMLElement | SVGElement, styles: { [key: string]: string }) {\n  const computedStyle = Object.keys(styles).reduce(\n    (prev, cur) => prev + `${cur}: ${styles[cur]};`,\n    '',\n  );\n  node.style.cssText = computedStyle;\n}\n\nexport function getSize(container: Container, defaultValue?: any): RectangleOptions {\n  if (container && container.size) {\n    return {\n      height: container.size.height,\n      width: container.size.width,\n    };\n  }\n  return defaultValue;\n}\n\nexport function getRelativeOffset(targetCoords: number, parentCoords: number): number {\n  return targetCoords - parentCoords;\n}\n\nexport function findClosestIndexPointX(arr: Array<Point>, value: number): number {\n  let rightIndex = 0;\n  let leftIndex = arr.length - 1;\n  let middleIndex;\n  while (leftIndex - rightIndex > 1) {\n    middleIndex = Math.floor((rightIndex + leftIndex) / 2);\n    if (value < arr[middleIndex].x) {\n      leftIndex = middleIndex;\n    } else {\n      if (value > arr[middleIndex].x) {\n        rightIndex = middleIndex;\n      } else {\n        return middleIndex;\n      }\n    }\n  }\n  if (value - (arr[rightIndex].x as number) <= (arr[leftIndex].x as number) - value) {\n    return rightIndex;\n  }\n  return leftIndex;\n}\n\nexport function getMinMax(arr: Array<number>): MinMax {\n  const minMax = {\n    min: Number.POSITIVE_INFINITY,\n    max: Number.NEGATIVE_INFINITY,\n  };\n  return arr.reduce((prev, curr) => {\n    prev['min'] = Math.min(prev.min, curr);\n    prev['max'] = Math.max(prev.max, curr);\n    return prev;\n  }, minMax);\n}\n\nconst createGetterForDate = () => {\n  if (isIntl) {\n    return (unix: number, withWeekday = false): string => {\n      if (withWeekday) {\n        if (!computedIntlDateArr.long[unix]) {\n          computedIntlDateArr.long[unix] = IntlLong.format(unix);\n        }\n        return computedIntlDateArr.long[unix];\n      }\n      if (!computedIntlDateArr.short[unix]) {\n        computedIntlDateArr.short[unix] = IntlShort.format(unix);\n      }\n      return computedIntlDateArr.short[unix];\n    };\n  }\n  return (unix: number, withWeekday = false): string => {\n    if (!computedOldDateArr[unix]) {\n      computedOldDateArr[unix] = new Date(unix);\n    }\n    return computedOldDateArr[unix].toLocaleString('en-us', {\n      weekday: withWeekday ? 'short' : undefined,\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n};\n\nconst generatorDate = createGetterForDate();\n\nexport function getShortDateByUnix(unix: number, withWeekday = false): string {\n  return generatorDate(unix, withWeekday);\n}\n\nexport function getPathByPoints(points: Array<Point>): string {\n  return points.reduce((prev, point, index) => {\n    if (index === 0) {\n      return prev + `M ${point.x} ${point.y}`;\n    }\n    return prev + ` L ${point.x} ${point.y}`;\n  }, '');\n}\n\nexport function changePathOnElement(el: SVGPathElement, path: string) {\n  el.setAttribute('d', path);\n}\n\nexport function removeAllChild(node: HTMLElement) {\n  while (node.firstChild) {\n    node.removeChild(node.firstChild);\n  }\n}\n\nexport function createTextNode(text: string): Text {\n  return document.createTextNode(text);\n}\n\nexport function addNodeListener(\n  node: HTMLElement | Document | SVGElement,\n  listeners: { [key: string]: any | Array<any> },\n) {\n  Object.keys(listeners).forEach(event => {\n    if (!Array.isArray(listeners[event])) {\n      node.addEventListener(event, listeners[event]);\n      return;\n    }\n    listeners[event].forEach((callback: any) => {\n      node.addEventListener(event, callback);\n    });\n  });\n}\n\nexport function removeNodeListener(\n  node: HTMLElement | Document | SVGElement,\n  listeners: { [key: string]: any | Array<any> },\n) {\n  Object.keys(listeners).forEach(event => {\n    if (!Array.isArray(listeners[event])) {\n      node.removeEventListener(event, listeners[event]);\n      return;\n    }\n    listeners[event].forEach((callback: any) => {\n      node.removeEventListener(event, callback);\n    });\n  });\n}\n\nexport function setNodeAttrs(\n  node: HTMLElement | SVGElement | Element,\n  attrs: { [key: string]: string },\n) {\n  Object.keys(attrs).forEach(key => {\n    node.setAttribute(key, attrs[key]);\n  });\n}\n\nexport function getCoordsX(\n  chartsWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  indexElem: number,\n  count: number,\n): number {\n  if (count === 1) {\n    return spacingLeft + (chartsWidth - spacingLeft - spacingRight) / 2;\n  }\n  return spacingLeft + ((chartsWidth - spacingLeft - spacingRight) / (count - 1)) * indexElem;\n}\n\nexport function getCoordsY(\n  chartsHeight: number,\n  spacingTop: number,\n  spacingBtn: number,\n  maxValue: number,\n  minValue: number,\n  value: number,\n): number {\n  if (value === maxValue) {\n    return spacingTop;\n  }\n  if (value === minValue) {\n    return chartsHeight - spacingBtn;\n  }\n  if (minValue === maxValue) {\n    return chartsHeight - spacingBtn - (chartsHeight - spacingTop - spacingBtn) / 2;\n  }\n\n  return (\n    chartsHeight -\n    spacingBtn -\n    (chartsHeight - spacingTop - spacingBtn) * ((value - minValue) / (maxValue - minValue))\n  );\n}\n\nexport function relativeIndexByOffset(\n  offsetX: number,\n  fullWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  count: number,\n): number {\n  if (offsetX <= spacingLeft) {\n    return 0;\n  }\n\n  if (offsetX >= fullWidth - spacingRight) {\n    return count - 1;\n  }\n\n  return Math.min(\n    count - 1,\n    Math.round(((offsetX - spacingLeft) / (fullWidth - spacingLeft - spacingRight)) * (count - 1)),\n  );\n}\n\nexport function getLeftTransitionByIndex(\n  leftIndex: number,\n  fullWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  count: number,\n): number {\n  return -(\n    fullWidth -\n    (leftIndex / (count - 1)) * (fullWidth - spacingLeft - spacingRight) -\n    spacingRight\n  );\n}\n\nexport function getRightTransitionByIndex(\n  rightIndex: number,\n  fullWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  count: number,\n): number {\n  return (rightIndex / (count - 1)) * (fullWidth - spacingLeft - spacingRight) + spacingLeft;\n}\n","export interface Chart {\n  columns: Array<Column>;\n  types: Types;\n  colors: { [key: string]: string };\n  names: { [key: string]: string };\n}\n\nexport interface LinePoints {\n  x1: number | string;\n  x2: number | string;\n  y1: number | string;\n  y2: number | string;\n}\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport interface PointWithColor extends Point {\n  color: string;\n}\n\nexport interface PointWithValue extends Point {\n  value: number;\n  date: number;\n}\n\nexport interface PointWithValueAndColor extends Point {\n  value: number;\n  color: string;\n  date: number;\n  key?: string;\n}\n\nexport interface ChartOptions {\n  withoutPreview?: boolean;\n  withoutControls?: boolean;\n  withoutNightMode?: boolean;\n  withoutAxisLabel?: boolean;\n  chartsContainer?: Container;\n  previewContainer?: Container;\n  horizontSteps?: number;\n}\n\nexport interface Container {\n  size: RectangleOptions;\n}\n\nexport interface RectangleOptions {\n  width: string | number;\n  height: string | number;\n}\n\nexport type Column = [String, ...Array<number>];\n\nexport enum Type {\n  Line = 'line',\n  X = 'x',\n}\n\nexport type Types = { [key: string]: Type };\n\nexport interface MinMax {\n  min: number;\n  max: number;\n}\n","import {\n  Chart,\n  ChartOptions,\n  Point,\n  PointWithColor,\n  PointWithValue,\n  PointWithValueAndColor,\n  Type,\n} from '../interfaces/chart';\nimport {\n  addNodeListener,\n  changePathOnElement,\n  createTextNode,\n  findClosestIndexPointX,\n  getCoordsX,\n  getCoordsY,\n  getLeftTransitionByIndex,\n  getMinMax,\n  getPathByPoints,\n  getRelativeOffset,\n  getRightTransitionByIndex,\n  getShortDateByUnix,\n  relativeIndexByOffset,\n  removeAllChild,\n  removeNodeListener,\n  setNodeAttrs,\n  setStyleBatch,\n} from '../utils/misc';\nimport { generateNode, generateSvgElement } from './generator';\n\n// constant number\nconst POINT_RADIUS = 5;\nconst MIN_TOOLTIP_WIDTH = 90;\nconst DEFAULT_HOR_STEPS = 6;\nconst DEFAULT_SPACING_RIGHT = 30;\nconst DEFAULT_SPACING_LEFT = 30;\nconst DEFAULT_SPACING_PREVIEW = 10;\nconst DEFAULT_SPACING_TOP = 10;\nconst DEFAULT_SPACING_BTM = 10;\nconst DEFAULT_SPACING_TOP_PREVIEW = 5;\nconst DEFAULT_SPACING_BTM_PREVIEW = 5;\nconst DEFAULT_SPACING = DEFAULT_SPACING_RIGHT + DEFAULT_SPACING_LEFT;\nconst DEFAULT_PREVIEW_SPACING = 10;\nconst DEFAULT_SLICE = 19; // Programming + 1\nconst SLICE_NUMBER = 5.5;\nconst DEFAULT_DAY_COUNT = 6;\n\n// ClassNames\nconst classNameStepLine = 'line_step';\nconst verticleLineClass = 'verticle';\nconst classNameStepTitle = 'text_step';\n\nexport class PxyUpChart {\n  private isDragActive = false;\n  private isResizeActive = false;\n  private activeResize: boolean | null = null;\n  private resizeAnimationFrame: number | null = null;\n  private dragAnimationFrame: number | null = null;\n  private mouseMoveAnimationFrame: number | null = null;\n  private toggleColumnAnimationFrame: number | null = null;\n\n  private maxValue: number;\n  private minValue: number;\n\n  private maxValueGlobal: number;\n  private minValueGlobal: number;\n\n  private height: number;\n  private width: number;\n\n  private previewWidth: number;\n  private previewHeight: number;\n\n  private night_mod = false;\n\n  private horizontSteps: number;\n\n  private sliceStartIndex = 0;\n\n  private sliceEndIndex = 0;\n\n  private currentSlicePoint: { [key: string]: Array<PointWithValue> } = {};\n\n  private verticleLine: SVGElement;\n\n  private columnsVisible: { [key: string]: boolean } = {};\n\n  private columnDatasets: { [key: string]: Array<number> } = {};\n\n  private countElements: number;\n\n  private _position: ClientRect;\n\n  private animationTimer: number | null = null;\n\n  constructor(\n    private id: number,\n    private node: HTMLElement,\n    private charts_svg: HTMLElement | SVGElement,\n    private preview_svg: HTMLElement | SVGElement,\n    private toolTip: HTMLElement,\n    private toolTipDate: HTMLElement,\n    private controlsContainer: HTMLElement,\n    private nightModeControl: HTMLElement,\n    private axisContainer: HTMLElement,\n    private leftPreviewControl: HTMLElement,\n    private rightPreviewControl: HTMLElement,\n    private centerPreviewControl: HTMLElement,\n    private leftResizeControl: HTMLElement,\n    private rightResizeControl: HTMLElement,\n    private previewControlContainer: HTMLElement,\n    private dataset: Chart,\n    private options: ChartOptions,\n  ) {\n    // Hi Telegram Team!\n    // I tried charts with get min time for Scripting/Rendering/Painting in Chrome Dev Tools and Application size\n    // And i tried do it scalable, animation of axis X with point on chart > 1000, will be slow\n    // Because you every time need hide/show/translate more > 994 elements, i wanna scalable solution\n    // That reason why i tried optimize all of them appendChild, remove, setStyle and more another things\n    // Thank you for challenge!\n    this.height = +this.charts_svg.getAttribute('height');\n    this.width = +this.charts_svg.getAttribute('width');\n    // Set tooltip max width\n    this.toolTip.style.maxWidth = `${this.width - 2 * DEFAULT_SPACING}px`;\n\n    Object.keys(this.dataset.names).forEach(key => {\n      this.columnsVisible[key] = true;\n    });\n    // Create dataset help and set first slice size and indexes\n    this.dataset.columns.forEach(column => {\n      const keyOfColumn = column.shift() as any;\n      this.columnDatasets[keyOfColumn] = column as any;\n      if (!this.countElements) {\n        this.countElements = this.columnDatasets[keyOfColumn].length;\n      }\n      if (!this.sliceStartIndex) {\n        const sliceSize = Math.max(DEFAULT_SLICE, Math.floor(this.countElements / SLICE_NUMBER));\n        this.sliceStartIndex = Math.max(this.columnDatasets[keyOfColumn].length - sliceSize - 1, 0);\n      }\n      if (!this.sliceEndIndex) {\n        this.sliceEndIndex = this.columnDatasets[keyOfColumn].length - 1;\n      }\n    });\n\n    this.horizontSteps = (options && options.horizontSteps) || DEFAULT_HOR_STEPS;\n\n    this.verticleLine = generateSvgElement('line', [verticleLineClass], {\n      x1: 0 as any,\n      x2: 0 as any,\n      y1: 0 as any,\n      y2: (this.height - DEFAULT_SPACING_BTM) as any,\n    });\n\n    this.charts_svg.appendChild(this.verticleLine);\n\n    this.addMouseListener();\n\n    if (!options.withoutAxisLabel) {\n      setStyleBatch(this.axisContainer, {\n        top: `${this.height - DEFAULT_SPACING_BTM}px`,\n        width: `${this.width - (DEFAULT_SPACING_LEFT + DEFAULT_SPACING_RIGHT) / 2}px`,\n        'padding-left': `${(DEFAULT_SPACING_LEFT / 3) * 2}px`,\n        'padding-right': `${DEFAULT_SPACING_RIGHT / 2}px`,\n      });\n    }\n    this.draw();\n\n    if (!options.withoutPreview) {\n      this.previewHeight = +this.preview_svg.getAttribute('height');\n      this.previewWidth = +this.preview_svg.getAttribute('width');\n      this.drawPreview();\n      this.drawPreviewControls(true);\n    }\n\n    if (!options.withoutControls) {\n      this.generateControls();\n    }\n\n    if (!options.withoutNightMode) {\n      this.addNightModeListener();\n    }\n  }\n\n  addNightModeListener() {\n    this.nightModeControl.addEventListener('click', this.onNightModeClick);\n  }\n\n  generateControls() {\n    this.controlsContainer.style.width = `${this.width}px`;\n    Object.keys(this.columnsVisible).forEach(key => {\n      const checkBoxControl = generateNode({\n        tag: 'div',\n        classList: ['checkbox_container'],\n        attrs: {\n          key: key,\n        },\n        children: [\n          {\n            tag: 'div',\n            classList: ['round'],\n          },\n          {\n            tag: 'div',\n            classList: ['label'],\n            textValue: this.dataset.names[key],\n          },\n        ],\n      });\n      this.controlsContainer.appendChild(checkBoxControl);\n      checkBoxControl.addEventListener('click', this.onCheckBoxClick, false);\n      this.setColorCheckboxByKey(key);\n    });\n  }\n\n  doPreventDefault = (e: MouseEvent) => {\n    e.stopPropagation();\n  };\n\n  onNightModeClick = () => {\n    this.toggleNightMode();\n  };\n\n  onCheckBoxClick = (e: MouseEvent) => {\n    if (this.toggleColumnAnimationFrame) {\n      cancelAnimationFrame(this.toggleColumnAnimationFrame);\n    }\n    this.toggleColumnAnimationFrame = requestAnimationFrame(() => {\n      this.removePoints();\n      let target = e.target as HTMLElement;\n      let key = target.getAttribute('key');\n      while (!key || target === document.body) {\n        target = target.parentNode as HTMLElement;\n        key = target.getAttribute('key');\n      }\n      if (key) {\n        this.toggleColumnVisible(key);\n      }\n    });\n  };\n\n  addMouseListener() {\n    addNodeListener(this.charts_svg, this.SVG_CHARTS_LISTENERS);\n    addNodeListener(document, this.DOCUMENT_LISTENERS);\n    addNodeListener(this.toolTip, this.TOOLTIP_LISTENERS);\n  }\n\n  destroy(withRemove = true) {\n    this.resetTimer();\n    removeNodeListener(this.charts_svg, this.SVG_CHARTS_LISTENERS);\n    removeNodeListener(document, this.DOCUMENT_LISTENERS);\n    removeNodeListener(this.toolTip, this.TOOLTIP_LISTENERS);\n\n    if (!this.options.withoutControls) {\n      this.controlsContainer.querySelectorAll('.round').forEach(item => {\n        item.removeEventListener('click', this.onCheckBoxClick);\n      });\n    }\n\n    if (!this.options.withoutNightMode) {\n      this.nightModeControl.removeEventListener('click', this.onNightModeClick);\n    }\n    if (!this.options.withoutPreview) {\n      removeNodeListener(this.centerPreviewControl, this.CENTRAL_CONTROL_LISTENERS);\n\n      removeNodeListener(this.previewControlContainer, this.PREVIEW_CHART_LISTENERS);\n\n      removeNodeListener(this.leftResizeControl, this.LEFT_RESIZE_CONTROL_LISTENERS);\n\n      removeNodeListener(this.rightResizeControl, this.RIGHT_RESIZE_CONTROL_LISTENERS);\n\n      removeNodeListener(this.leftPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n\n      removeNodeListener(this.rightPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n    }\n    if (withRemove) {\n      this.node.remove();\n    }\n  }\n\n  onMouseUp = (e: any) => {\n    this.isResizeActive = false;\n    this.isDragActive = false;\n    this.activeResize = null;\n  };\n\n  onResizeStartRight = (e: MouseEvent) => {\n    e.stopPropagation();\n    this.isDragActive = false;\n    this.hideHoverLineAndPoints();\n    this.isResizeActive = true;\n    this.activeResize = true;\n  };\n\n  onResizeStartLeft = (e: MouseEvent) => {\n    e.stopPropagation();\n    this.isDragActive = false;\n    this.hideHoverLineAndPoints();\n    this.isResizeActive = true;\n    this.activeResize = false;\n  };\n\n  stopProp = (e: MouseEvent) => {\n    e.stopPropagation();\n  };\n\n  onResizeEndLeft = () => {\n    this.isResizeActive = false;\n    this.activeResize = null;\n  };\n\n  onResizeEndRight = () => {\n    this.isResizeActive = false;\n    this.activeResize = null;\n  };\n\n  onResize = (e: MouseEvent | TouchEvent) => {\n    e.preventDefault();\n    if (this.isResizeActive) {\n      if (this.resizeAnimationFrame) {\n        cancelAnimationFrame(this.resizeAnimationFrame);\n      }\n      this.resizeAnimationFrame = requestAnimationFrame(() => this.doResize(this.activeResize, e));\n    }\n  };\n\n  onDragStart = (e: MouseEvent | TouchEvent) => {\n    e.stopPropagation();\n    this.hideHoverLineAndPoints();\n    this.isDragActive = true;\n  };\n\n  onDragEnd = (e: MouseEvent | TouchEvent) => {\n    this.isDragActive = false;\n  };\n\n  onDrag = (e: MouseEvent | TouchEvent) => {\n    e.preventDefault();\n    if (this.isDragActive) {\n      if (this.dragAnimationFrame) {\n        cancelAnimationFrame(this.dragAnimationFrame);\n      }\n      this.dragAnimationFrame = requestAnimationFrame(() => this.onPreviewControlClick(e));\n    }\n  };\n\n  onMouseEnter = () => {\n    this.verticleLine.classList.add('show');\n  };\n\n  onMouseLeave = (e: MouseEvent) => {\n    const cordY = getRelativeOffset(e.clientY, this.positions.top);\n    if (e.toElement !== this.toolTip || cordY >= this.height - 100) {\n      this.hideHoverLineAndPoints();\n    }\n  };\n\n  onToolTipLeave = () => {\n    this.hideHoverLineAndPoints();\n  };\n\n  hideHoverLineAndPoints() {\n    this.removePoints();\n    this.verticleLine.classList.remove('show');\n    this.toolTip.style.display = 'none';\n  }\n\n  doResize(isRight: boolean, e: MouseEvent | TouchEvent) {\n    if (isRight === null) {\n      return;\n    }\n    const cursorX = getRelativeOffset(\n      (e as MouseEvent).clientX || (e as TouchEvent).touches[0].clientX,\n      this.positions.left,\n    );\n    const offsetIndex = relativeIndexByOffset(\n      cursorX,\n      this.previewWidth,\n      DEFAULT_PREVIEW_SPACING,\n      DEFAULT_PREVIEW_SPACING,\n      this.countElements,\n    );\n    if (!isRight) {\n      this.sliceStartIndex = offsetIndex;\n      if (this.sliceStartIndex >= this.sliceEndIndex) {\n        this.sliceStartIndex = this.sliceEndIndex - 1;\n      }\n    } else {\n      this.sliceEndIndex = offsetIndex;\n\n      if (this.sliceEndIndex <= this.sliceStartIndex) {\n        this.sliceEndIndex = this.sliceStartIndex + 1;\n      }\n    }\n\n    this.drawPreviewControls();\n    this.removeAxisXCharts();\n    this.draw();\n  }\n\n  onPreviewControlClick = (e: MouseEvent | TouchEvent) => {\n    const cursorX = getRelativeOffset(\n      (e as MouseEvent).clientX || (e as TouchEvent).touches[0].clientX,\n      this.positions.left,\n    );\n    const sliceSize = this.sliceEndIndex - this.sliceStartIndex;\n    const offsetIndexLeft = Math.floor(\n      relativeIndexByOffset(\n        cursorX,\n        this.previewWidth,\n        DEFAULT_PREVIEW_SPACING,\n        DEFAULT_PREVIEW_SPACING,\n        this.countElements,\n      ) -\n        sliceSize / 2,\n    );\n    this.sliceStartIndex = Math.max(offsetIndexLeft, 0);\n    this.sliceEndIndex = Math.min(this.sliceStartIndex + sliceSize, this.countElements - 1);\n\n    if (this.sliceEndIndex === this.countElements - 1) {\n      this.sliceStartIndex = Math.max(0, this.sliceEndIndex - sliceSize);\n    }\n    if (this.sliceStartIndex === 0) {\n      this.sliceEndIndex = Math.min(this.sliceStartIndex + sliceSize, this.countElements - 1);\n    }\n\n    this.drawPreviewControls();\n    this.removeAxisXCharts();\n    this.draw();\n  };\n\n  onMouseMove = (e: MouseEvent) => {\n    if (this.mouseMoveAnimationFrame) {\n      cancelAnimationFrame(this.mouseMoveAnimationFrame);\n    }\n    this.mouseMoveAnimationFrame = requestAnimationFrame(() => {\n      const cordX = e.offsetX;\n      const cordY = e.offsetY;\n      if (\n        cordX > DEFAULT_SPACING_LEFT / 2 &&\n        cordX < this.width - DEFAULT_SPACING_RIGHT / 2 &&\n        cordY < this.height - DEFAULT_SPACING_BTM\n      ) {\n        setNodeAttrs(this.verticleLine, {\n          x1: cordX as any,\n          x2: cordX as any,\n        });\n        const closestIndex = this.findClosesIndexOfPoint(cordX);\n        if (closestIndex === null) {\n          return;\n        }\n        const points = Object.keys(this.columnsVisible)\n          .filter(key => this.columnsVisible[key])\n          .map(key => ({\n            key: key,\n            color: this.dataset.colors[key],\n            x: this.currentSlicePoint[key][closestIndex].x,\n            y: this.currentSlicePoint[key][closestIndex].y,\n            value: this.currentSlicePoint[key][closestIndex].value,\n            date: this.currentSlicePoint[key][closestIndex].date,\n          }));\n        this.showPoints(points);\n        this.showTooltip(points, { x: cordX, y: cordY });\n      }\n    });\n  };\n\n  showPoints(arr: Array<PointWithColor> = []) {\n    this.removePoints();\n    arr.forEach(point => {\n      const circle = generateSvgElement('circle', null, {\n        cx: point.x as any,\n        cy: point.y as any,\n        stroke: point.color,\n        r: POINT_RADIUS as any,\n      });\n      this.charts_svg.appendChild(circle);\n    });\n  }\n\n  removePoints() {\n    this.charts_svg.querySelectorAll('circle').forEach(el => el.remove());\n  }\n\n  showTooltip(arr: Array<PointWithValueAndColor>, point: Point) {\n    const leftPosition = (point.x as number) + DEFAULT_SPACING_LEFT;\n    const topPosition = (point.y as number) + DEFAULT_SPACING_TOP;\n    const stylesTooltip = {\n      display: 'flex',\n      right: 'unset',\n      left: `${leftPosition}px`,\n      top: `${topPosition}px`,\n    };\n    const childContainer = this.toolTip.querySelector('.items') as HTMLElement;\n\n    removeAllChild(childContainer);\n    removeAllChild(this.toolTipDate);\n\n    this.toolTipDate.appendChild(createTextNode(getShortDateByUnix(arr[0].date, true)));\n    arr.forEach(item =>\n      childContainer.appendChild(\n        generateNode({\n          tag: 'div',\n          attrs: {\n            style: `color: ${item.color}`,\n          },\n          children: [\n            {\n              tag: 'span',\n              classList: ['value'],\n              textValue: item.value as any,\n            },\n            {\n              tag: 'span',\n              classList: ['item'],\n              textValue: this.dataset.names[item.key],\n            },\n          ],\n        }),\n      ),\n    );\n\n    if (leftPosition > this.width - MIN_TOOLTIP_WIDTH - DEFAULT_SPACING_RIGHT) {\n      stylesTooltip.right = `${Math.min(\n        MIN_TOOLTIP_WIDTH,\n        this.width - leftPosition + DEFAULT_SPACING_LEFT + DEFAULT_SPACING_RIGHT,\n      )}px`;\n      stylesTooltip.left = 'unset';\n    }\n\n    setStyleBatch(this.toolTip, stylesTooltip);\n  }\n\n  findClosesIndexOfPoint(cordX: number): number | null {\n    const arr = Object.keys(this.columnsVisible).filter(key => this.columnsVisible[key]);\n    if (!arr.length) {\n      return null;\n    }\n    return findClosestIndexPointX(this.currentSlicePoint[arr[0]], cordX);\n  }\n\n  removePathByKey(key: string) {\n    const path = this.charts_svg.querySelector(`path#pxyup_path_${this.id}_${key}`);\n    if (path) {\n      path.remove();\n    }\n  }\n\n  setColorCheckboxByKey(key: string) {\n    const color = this.dataset.colors[key];\n    const checkbox = this.controlsContainer.querySelector(\n      `.checkbox_container[key=\"${key}\"] .round`,\n    ) as HTMLElement;\n    if (!this.columnsVisible[key]) {\n      checkbox.classList.add('not_active');\n    } else {\n      checkbox.classList.remove('not_active');\n      setStyleBatch(checkbox, {\n        'border-color': color,\n        'background-color': color,\n      });\n    }\n  }\n\n  toggleColumnVisible(key: string) {\n    this.columnsVisible[key] = !this.columnsVisible[key];\n    this.setColorCheckboxByKey(key);\n\n    if (!this.columnsVisible[key]) {\n      this.removePathByKey(key);\n    }\n    this.node.classList.add('animation');\n    if (!this.options.withoutPreview) {\n      this.drawPreview(false);\n    }\n    this.refresh(false, false);\n    if (this.animationTimer) {\n      clearTimeout(this.animationTimer);\n    }\n    this.animationTimer = window.setTimeout(() => {\n      this.node.classList.remove('animation');\n    }, 150);\n  }\n\n  drawPreviewControls(withEvents: boolean = false) {\n    const leftControlTranslate = getLeftTransitionByIndex(\n      this.sliceStartIndex,\n      this.previewWidth,\n      DEFAULT_PREVIEW_SPACING,\n      DEFAULT_PREVIEW_SPACING,\n      this.countElements,\n    );\n    const rightControlTranslate = getRightTransitionByIndex(\n      this.sliceEndIndex,\n      this.previewWidth,\n      DEFAULT_PREVIEW_SPACING,\n      DEFAULT_PREVIEW_SPACING,\n      this.countElements,\n    );\n    setStyleBatch(this.leftPreviewControl, {\n      transform: `translateX(${leftControlTranslate}px)`,\n    });\n    setStyleBatch(this.rightPreviewControl, {\n      transform: `translateX(${rightControlTranslate}px)`,\n    });\n    const centralWidth = Math.ceil(\n      Math.abs(\n        Math.abs(this.previewWidth - rightControlTranslate) - Math.abs(leftControlTranslate),\n      ),\n    );\n    setStyleBatch(this.centerPreviewControl, {\n      width: `${centralWidth}px`,\n      transform: `translateX(${Math.round(rightControlTranslate - centralWidth)}px)`,\n    });\n\n    if (withEvents) {\n      addNodeListener(this.leftPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n\n      addNodeListener(this.rightPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n\n      // PC\n\n      addNodeListener(this.centerPreviewControl, this.CENTRAL_CONTROL_LISTENERS);\n\n      addNodeListener(this.previewControlContainer, this.PREVIEW_CHART_LISTENERS);\n\n      addNodeListener(this.leftResizeControl, this.LEFT_RESIZE_CONTROL_LISTENERS);\n\n      addNodeListener(this.rightResizeControl, this.RIGHT_RESIZE_CONTROL_LISTENERS);\n    }\n  }\n\n  draw(withAnimation = true, withXAxis = true) {\n    this.setSupportsLines();\n    this.drawCurrentSlice(withAnimation, withXAxis);\n  }\n\n  refresh(withAnimation = true, withXAxis = true) {\n    this.resetTimer();\n    this.draw(withAnimation, withXAxis);\n  }\n\n  drawAxisX() {\n    removeAllChild(this.axisContainer);\n    const sliceSize = this.sliceEndIndex - this.sliceStartIndex + 1;\n    let labelCount = Math.min(DEFAULT_DAY_COUNT, sliceSize + 1);\n    const mustGeneratedLabels = labelCount;\n    const deltaDays =\n      sliceSize <= DEFAULT_DAY_COUNT + 2 ? 1 : Math.max(sliceSize / (mustGeneratedLabels - 1), 1);\n    let index = this.sliceStartIndex;\n\n    const generateLabel = (text: string) => {\n      return generateNode({\n        tag: 'div',\n        textValue: text,\n      });\n    };\n    if (deltaDays == 1) {\n      for (let i = this.sliceStartIndex; i <= this.sliceEndIndex; i++) {\n        this.axisContainer.appendChild(\n          generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][i])),\n        );\n      }\n    } else {\n      this.axisContainer.appendChild(\n        generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][this.sliceStartIndex])),\n      );\n      index += deltaDays;\n\n      while (labelCount - 2 > 0 && index < this.sliceEndIndex - 2) {\n        this.axisContainer.appendChild(\n          generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][Math.ceil(index)])),\n        );\n        labelCount -= 1;\n        index += deltaDays;\n      }\n      this.axisContainer.appendChild(\n        generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][this.sliceEndIndex])),\n      );\n    }\n  }\n\n  resetTimer() {\n    if (this.dragAnimationFrame) {\n      cancelAnimationFrame(this.dragAnimationFrame);\n      this.dragAnimationFrame = null;\n    }\n    if (this.resizeAnimationFrame) {\n      cancelAnimationFrame(this.resizeAnimationFrame);\n      this.resizeAnimationFrame = null;\n    }\n    if (this.mouseMoveAnimationFrame) {\n      cancelAnimationFrame(this.mouseMoveAnimationFrame);\n      this.mouseMoveAnimationFrame = null;\n    }\n    if (this.toggleColumnAnimationFrame) {\n      cancelAnimationFrame(this.toggleColumnAnimationFrame);\n      this.toggleColumnAnimationFrame = null;\n    }\n    if (this.animationTimer) {\n      clearTimeout(this.animationTimer);\n      this.animationTimer = null;\n    }\n  }\n\n  setRightIndexSlice(size: number) {\n    this.sliceStartIndex = size;\n    this.refresh();\n  }\n\n  setLeftIndexSlice(size: number) {\n    this.sliceEndIndex = size;\n    this.refresh();\n  }\n\n  removeAxisXCharts() {\n    const el = this.charts_svg.querySelector(`g.axis`);\n    if (el) {\n      el.remove();\n    }\n  }\n\n  drawCurrentSlice(withAnimation = true, withXAxis = true) {\n    const realMinValue = this.minValue >= 0 ? 0 : this.minValue;\n    const sliceSize = this.sliceEndIndex - this.sliceStartIndex + 1;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n\n      if (columnVisible) {\n        const currentPath = this.charts_svg.querySelector(\n          `path#${`pxyup_path_${this.id}_${key}`}`,\n        ) as SVGPathElement;\n\n        this.currentSlicePoint[key] = this.columnDatasets[key]\n          .slice(this.sliceStartIndex, this.sliceEndIndex + 1)\n          .map((point, index) => {\n            return {\n              x: getCoordsX(\n                this.width,\n                DEFAULT_SPACING_LEFT,\n                DEFAULT_SPACING_RIGHT,\n                index,\n                sliceSize,\n              ),\n              y: getCoordsY(\n                this.height,\n                DEFAULT_SPACING_TOP,\n                DEFAULT_SPACING_BTM,\n                this.maxValue,\n                realMinValue,\n                point,\n              ),\n              value: point,\n              date: this.columnDatasets[Type.X][this.sliceStartIndex + index],\n            };\n          });\n\n        if (currentPath) {\n          changePathOnElement(currentPath, getPathByPoints(this.currentSlicePoint[key]));\n          return;\n        }\n\n        const path = generateSvgElement('path', [], {\n          id: `pxyup_path_${this.id}_${key}`,\n          stroke: this.dataset.colors[key],\n          fill: 'none',\n          d: getPathByPoints(this.currentSlicePoint[key]),\n        });\n\n        this.charts_svg.appendChild(path);\n      }\n    });\n\n    if (!this.options.withoutAxisLabel && withXAxis) {\n      this.drawAxisX();\n    }\n  }\n\n  drawPreview(withAnimation = true) {\n    this.preview_svg.querySelectorAll(`path`).forEach(el => el.remove());\n    const values = [] as Array<number>;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n      if (columnVisible) {\n        values.push(...this.columnDatasets[key]);\n      }\n    });\n\n    const minMax = getMinMax(values);\n    this.minValueGlobal = minMax.min;\n    this.maxValueGlobal = minMax.max;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n      if (columnVisible) {\n        const path = generateSvgElement('path', [], {\n          id: `pxyup_path_preview_${this.id}_${key}`,\n          d: getPathByPoints(\n            this.columnDatasets[key].map((point, index) => ({\n              x: getCoordsX(\n                this.previewWidth,\n                DEFAULT_SPACING_PREVIEW,\n                DEFAULT_SPACING_PREVIEW,\n                index,\n                this.countElements,\n              ),\n              y: getCoordsY(\n                this.previewHeight,\n                DEFAULT_SPACING_TOP_PREVIEW,\n                DEFAULT_SPACING_BTM_PREVIEW,\n                this.maxValueGlobal,\n                this.minValueGlobal,\n                point,\n              ),\n            })),\n          ),\n          stroke: this.dataset.colors[key],\n          fill: 'none',\n        });\n\n        this.preview_svg.prepend(path);\n      }\n    });\n  }\n\n  setSupportsLines() {\n    const values = [] as Array<number>;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n      if (columnVisible) {\n        values.push(\n          ...this.columnDatasets[key].slice(this.sliceStartIndex, this.sliceEndIndex + 1),\n        );\n      }\n    });\n    if (values.length === 0) {\n      this.minValue = undefined;\n      this.maxValue = undefined;\n      this.removeSteps();\n      return;\n    }\n    const minMax = getMinMax(values);\n    if (this.minValue === minMax.min && this.maxValue === minMax.max) {\n      return;\n    }\n    this.minValue = minMax.min;\n    this.maxValue = minMax.max;\n    const step =\n      values.length === 0\n        ? 0\n        : Math.ceil(\n            (this.minValue > 0 ? this.maxValue : this.maxValue - this.minValue) /\n              this.horizontSteps,\n          );\n\n    const stepsArr = this.minValue > 0 ? [0] : [this.minValue];\n    for (let index = 1; index < this.horizontSteps; index++) {\n      stepsArr.push(stepsArr[0] + step * index || index);\n    }\n\n    this.drawSteps(stepsArr);\n  }\n\n  toggleNightMode() {\n    this.night_mod = !this.night_mod;\n    removeAllChild(this.nightModeControl);\n    if (this.night_mod) {\n      this.node.classList.add('night');\n\n      this.nightModeControl.appendChild(createTextNode('Switch to day mode'));\n    } else {\n      this.node.classList.remove('night');\n      this.nightModeControl.appendChild(createTextNode('Switch to night mode'));\n    }\n  }\n\n  removeSteps() {\n    const groupSteps = this.charts_svg.querySelector('g.steps');\n    if (groupSteps) {\n      groupSteps.remove();\n    }\n  }\n\n  drawSteps(arr: Array<number>) {\n    this.removeSteps();\n    const realMinValue = this.minValue >= 0 ? 0 : this.minValue;\n    const stepsElements = [] as Array<SVGElement>;\n    arr.forEach((step, index) => {\n      const cordY =\n        index === 0\n          ? this.height - DEFAULT_SPACING_BTM\n          : (getCoordsY(\n              this.height,\n              DEFAULT_SPACING_TOP,\n              DEFAULT_SPACING_BTM,\n              this.maxValue,\n              realMinValue,\n              step,\n            ) as any);\n      const line = generateSvgElement('line', [classNameStepLine], {\n        x1: 0 as any,\n        x2: this.width as any,\n        y1: cordY,\n        y2: cordY,\n      });\n      const text = generateSvgElement(\n        'text',\n        [classNameStepTitle],\n        {\n          x: 0 as any,\n          y: (cordY - 5) as any,\n        },\n        [],\n        step as any,\n      );\n      stepsElements.push(line);\n      stepsElements.push(text);\n    });\n    const groupStepsEl = generateSvgElement('g', ['steps'], null, stepsElements);\n    this.charts_svg.prepend(groupStepsEl);\n  }\n\n  preventDrag = (e: DragEvent) => {\n    e.preventDefault();\n    return false;\n  };\n\n  getTranspilingDataset() {\n    return this.columnDatasets;\n  }\n\n  onMouseEnterPreview = () => {\n    this.hideHoverLineAndPoints();\n  };\n\n  private SVG_CHARTS_LISTENERS = {\n    mouseenter: this.onMouseEnter,\n    mouseleave: this.onMouseLeave,\n    mousemove: this.onMouseMove,\n  };\n\n  private CENTRAL_CONTROL_LISTENERS = {\n    mousedown: this.onDragStart,\n    dragstart: this.preventDrag,\n    mouseup: this.onDragEnd,\n    touchstart: this.onDragStart,\n    touchend: this.onDragEnd,\n  };\n\n  private PREVIEW_CHART_LISTENERS = {\n    mouseenter: this.onMouseEnterPreview,\n    mousemove: [this.onDrag, this.onResize],\n    touchmove: [this.onDrag, this.onResize],\n  };\n\n  private DOCUMENT_LISTENERS = {\n    mouseup: this.onMouseUp,\n  };\n\n  private TOOLTIP_LISTENERS = {\n    mouseleave: this.onToolTipLeave,\n  };\n\n  private LEFT_RESIZE_CONTROL_LISTENERS = {\n    mouseup: this.onResizeEndLeft,\n    dragstart: this.preventDrag,\n    mousedown: this.onResizeStartLeft,\n    touchend: this.onResizeEndLeft,\n    touchstart: this.onResizeStartLeft,\n    click: this.stopProp,\n  };\n\n  private RIGHT_RESIZE_CONTROL_LISTENERS = {\n    mouseup: this.onResizeEndRight,\n    dragstart: this.preventDrag,\n    mousedown: this.onResizeStartRight,\n    touchend: this.onResizeEndRight,\n    touchstart: this.onResizeStartRight,\n    click: this.stopProp,\n  };\n\n  get positions() {\n    if (!this._position) {\n      this._position = this.charts_svg.getBoundingClientRect();\n    }\n    return this._position;\n  }\n}\n","import { Chart, ChartOptions } from '../interfaces/chart';\nimport { createTextNode, getSize, setNodeAttrs } from '../utils/misc';\n\nimport { PxyUpChart } from './chart';\nimport { PxyupNode } from '../interfaces/node';\n\nlet id = 0;\n\nexport function generateSvgElement(\n  type: string,\n  classList?: Array<string>,\n  attrs?: { [key: string]: string },\n  childs?: Array<SVGElement>,\n  value?: string,\n): SVGElement {\n  const element = document.createElementNS('http://www.w3.org/2000/svg', type);\n\n  if (classList) {\n    classList.forEach(item => {\n      element.classList.add(item);\n    });\n  }\n  if (attrs) {\n    setNodeAttrs(element, attrs);\n  }\n\n  if (childs) {\n    childs.forEach(item => {\n      element.appendChild(item);\n    });\n  }\n\n  if (value !== undefined) {\n    element.appendChild(document.createTextNode(value));\n  }\n\n  return element;\n}\n\nexport function generateNode(node: PxyupNode): HTMLElement | SVGSVGElement | null {\n  if (node.skip) {\n    return null;\n  }\n\n  const rootNode =\n    node.tag === 'svg'\n      ? document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n      : document.createElement(node.tag);\n\n  if (node.textValue) {\n    rootNode.appendChild(createTextNode(node.textValue));\n  }\n\n  if (node.classList) {\n    node.classList.forEach(item => {\n      rootNode.classList.add(item);\n    });\n  }\n\n  if (node.attrs) {\n    if (node.tag === 'svg') {\n      Object.keys(node.attrs).forEach(key => {\n        rootNode.setAttributeNS(null, key, node.attrs[key]);\n      });\n      rootNode.setAttributeNS(\n        null,\n        'viewBox',\n        `0 0 ${node.attrs['width']} ${node.attrs['height']}`,\n      );\n    } else {\n      setNodeAttrs(rootNode, node.attrs);\n    }\n  }\n\n  if (node.children) {\n    node.children.forEach((item: any) => {\n      if (!item) {\n        return;\n      }\n      if (!item.tag) {\n        rootNode.appendChild(item as HTMLHtmlElement);\n        return;\n      }\n      const child = generateNode(item as PxyupNode);\n      if (child) {\n        rootNode.appendChild(child);\n      }\n    });\n  }\n\n  return rootNode;\n}\n\nexport function chartsGenerator(\n  rootNode: HTMLElement,\n): (dataset: Chart, options?: ChartOptions) => PxyUpChart {\n  return (dataset: Chart, options: ChartOptions = {}) => {\n    const axisContainer = generateNode({\n      tag: 'div',\n      classList: ['axis_labels'],\n      skip: options.withoutAxisLabel,\n    });\n    const chartsNode = generateNode({\n      tag: 'svg',\n      classList: ['main_chart'],\n      attrs: {\n        ...getSize(options.chartsContainer, {\n          width: '400',\n          height: '400',\n        }),\n      },\n    });\n\n    const previewNode = generateNode({\n      tag: 'svg',\n      skip: options.withoutPreview,\n      classList: ['chart_preview'],\n      attrs: {\n        ...getSize(options.previewContainer, {\n          width: '400',\n          height: '60',\n        }),\n      },\n    });\n\n    const leftResizeControl = generateNode({\n      tag: 'div',\n      classList: ['resize'],\n      children: [\n        generateNode({\n          tag: 'div',\n          classList: ['caret'],\n        }),\n      ],\n    });\n\n    const rightResizeControl = generateNode({\n      tag: 'div',\n      classList: ['resize'],\n      children: [\n        generateNode({\n          tag: 'div',\n          classList: ['caret'],\n        }),\n      ],\n    });\n\n    const leftPreviewContainer = generateNode({\n      tag: 'div',\n      classList: ['control', 'left'],\n      children: [leftResizeControl],\n    });\n\n    const centerPreviewContainer = generateNode({\n      tag: 'div',\n      classList: ['control', 'center'],\n    });\n\n    const rightPreviewContainer = generateNode({\n      tag: 'div',\n      classList: ['control', 'right'],\n      children: [rightResizeControl],\n    });\n\n    const previewControlContainer = generateNode({\n      tag: 'div',\n      classList: ['preview_controls'],\n      children: [leftPreviewContainer, centerPreviewContainer, rightPreviewContainer],\n    });\n\n    const previewContainer = generateNode({\n      tag: 'div',\n      skip: options.withoutPreview,\n      classList: ['preview_container'],\n      children: [previewNode, previewControlContainer],\n    });\n\n    const toolTipDateNode = generateNode({\n      tag: 'p',\n      classList: ['date'],\n    });\n    const toolTipNode = generateNode({\n      tag: 'div',\n      classList: ['tooltip'],\n      children: [\n        toolTipDateNode,\n        {\n          tag: 'div',\n          classList: ['items'],\n        },\n      ],\n    });\n    const controlsNode = generateNode({\n      tag: 'div',\n      classList: ['controls'],\n      skip: options.withoutControls,\n    });\n    const nightModeControl = generateNode({\n      tag: 'a',\n      textValue: 'Switch to Night mode',\n    });\n    const basicNode = generateNode({\n      attrs: {\n        id: `pxyup_chart_${id}`,\n      },\n      classList: ['pxyup_chart_container'],\n      tag: 'div',\n      children: [\n        chartsNode,\n        axisContainer,\n        previewContainer,\n        toolTipNode,\n        controlsNode,\n        {\n          tag: 'div',\n          classList: ['night_mode_control'],\n          skip: options.withoutNightMode,\n          children: [nightModeControl],\n        },\n      ],\n    });\n    return new PxyUpChart(\n      id++,\n      rootNode.appendChild(basicNode) as HTMLElement,\n      chartsNode,\n      previewNode,\n      toolTipNode as HTMLElement,\n      toolTipDateNode as HTMLElement,\n      controlsNode as HTMLElement,\n      nightModeControl as HTMLElement,\n      axisContainer as HTMLElement,\n      leftPreviewContainer as HTMLElement,\n      rightPreviewContainer as HTMLElement,\n      centerPreviewContainer as HTMLElement,\n      leftResizeControl as HTMLElement,\n      rightResizeControl as HTMLElement,\n      previewControlContainer as HTMLElement,\n      dataset,\n      options,\n    );\n  };\n}\n","import { Chart, chartsGenerator } from './charts';\n\nconst generator = chartsGenerator(document.querySelector('.draw_engine'));\n\nfetch('./chart_data.json')\n  .then(res => res.json())\n  .then(dataSets => {\n    dataSets.forEach((dataset: any) => {\n      generator(dataset as Chart);\n    });\n  });\n"],"names":["computedIntlDateArr","long","short","computedOldDateArr","isIntl","window","Intl","IntlLong","DateTimeFormat","weekday","month","day","IntlShort","setStyleBatch","node","styles","computedStyle","Object","keys","reduce","prev","cur","style","cssText","getSize","container","defaultValue","size","height","width","getRelativeOffset","targetCoords","parentCoords","getMinMax","arr","minMax","min","Number","POSITIVE_INFINITY","max","NEGATIVE_INFINITY","curr","Math","Type","generatorDate","unix","withWeekday","format","Date","toLocaleString","undefined","getShortDateByUnix","getPathByPoints","points","point","index","x","y","removeAllChild","firstChild","removeChild","createTextNode","text","document","addNodeListener","listeners","forEach","event","Array","isArray","callback","addEventListener","removeNodeListener","removeEventListener","setNodeAttrs","attrs","key","setAttribute","getCoordsX","chartsWidth","spacingLeft","spacingRight","indexElem","count","getCoordsY","chartsHeight","spacingTop","spacingBtn","maxValue","minValue","value","relativeIndexByOffset","offsetX","fullWidth","round","DEFAULT_SPACING_RIGHT","DEFAULT_SPACING_LEFT","DEFAULT_SPACING_BTM","DEFAULT_PREVIEW_SPACING","id","charts_svg","preview_svg","toolTip","toolTipDate","controlsContainer","nightModeControl","axisContainer","leftPreviewControl","rightPreviewControl","centerPreviewControl","leftResizeControl","rightResizeControl","previewControlContainer","dataset","options","this","e","stopPropagation","_this","toggleNightMode","toggleColumnAnimationFrame","cancelAnimationFrame","requestAnimationFrame","removePoints","target","getAttribute","body","parentNode","toggleColumnVisible","isResizeActive","isDragActive","activeResize","hideHoverLineAndPoints","preventDefault","resizeAnimationFrame","doResize","dragAnimationFrame","onPreviewControlClick","verticleLine","classList","add","cordY","clientY","positions","top","toElement","cursorX","clientX","touches","left","sliceSize","sliceEndIndex","sliceStartIndex","offsetIndexLeft","floor","previewWidth","countElements","drawPreviewControls","removeAxisXCharts","draw","mouseMoveAnimationFrame","cordX","offsetY","x1","x2","closestIndex_1","findClosesIndexOfPoint","columnsVisible","filter","map","color","colors","currentSlicePoint","date","showPoints","showTooltip","mouseenter","onMouseEnter","mouseleave","onMouseLeave","mousemove","onMouseMove","mousedown","onDragStart","dragstart","preventDrag","mouseup","onDragEnd","touchstart","touchend","onMouseEnterPreview","onDrag","onResize","touchmove","onMouseUp","onToolTipLeave","onResizeEndLeft","onResizeStartLeft","click","stopProp","onResizeEndRight","onResizeStartRight","maxWidth","names","columns","column","keyOfColumn","shift","columnDatasets","length","horizontSteps","generateSvgElement","y1","y2","appendChild","addMouseListener","withoutAxisLabel","padding-left","padding-right","withoutPreview","previewHeight","drawPreview","withoutControls","generateControls","withoutNightMode","addNightModeListener","PxyUpChart","onNightModeClick","checkBoxControl","generateNode","tag","children","textValue","onCheckBoxClick","setColorCheckboxByKey","SVG_CHARTS_LISTENERS","DOCUMENT_LISTENERS","TOOLTIP_LISTENERS","withRemove","resetTimer","querySelectorAll","item","CENTRAL_CONTROL_LISTENERS","PREVIEW_CHART_LISTENERS","LEFT_RESIZE_CONTROL_LISTENERS","RIGHT_RESIZE_CONTROL_LISTENERS","remove","display","isRight","offsetIndex","circle","cx","cy","stroke","r","el","leftPosition","stylesTooltip","right","childContainer","querySelector","middleIndex","rightIndex","leftIndex","findClosestIndexPointX","path","checkbox","border-color","background-color","removePathByKey","refresh","animationTimer","clearTimeout","setTimeout","withEvents","leftControlTranslate","rightControlTranslate","transform","centralWidth","ceil","abs","withAnimation","withXAxis","setSupportsLines","drawCurrentSlice","labelCount","mustGeneratedLabels","deltaDays","DEFAULT_DAY_COUNT","generateLabel","i","X","realMinValue","currentPath","slice","fill","d","drawAxisX","values","push","minValueGlobal","maxValueGlobal","prepend","removeSteps","step","stepsArr","drawSteps","night_mod","groupSteps","stepsElements","line","groupStepsEl","_position","getBoundingClientRect","type","childs","element","createElementNS","skip","rootNode","createElement","setAttributeNS","child","generator","chartsNode","chartsContainer","previewNode","previewContainer","leftPreviewContainer","centerPreviewContainer","rightPreviewContainer","toolTipDateNode","toolTipNode","controlsNode","basicNode","fetch","then","res","json","dataSets"],"mappings":"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"}