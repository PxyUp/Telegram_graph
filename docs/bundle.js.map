{"version":3,"file":"bundle.js","sources":["../src/utils/misc.ts","../src/interfaces/chart.ts","../src/charts/chart.ts","../src/charts/generator.ts","../src/index.ts"],"sourcesContent":["import { Container, MinMax, Point, RectangleOptions } from '../interfaces/chart';\n\nconst withDayOptions = {\n  weekday: 'short',\n  month: 'short',\n  day: 'numeric',\n};\n\nconst withoutDayOptions = {\n  month: 'short',\n  day: 'numeric',\n};\n\nconst computedIntlDateArr = {\n  long: {},\n  short: {},\n} as { long: { [key: number]: any }; short: { [key: number]: any } };\n\nconst computedOldDateArr = {} as { [key: number]: Date };\nconst isIntl = !!(window as any).Intl;\nconst IntlLong = isIntl && new Intl.DateTimeFormat('en-US', withDayOptions);\nconst IntlShort = isIntl && new Intl.DateTimeFormat('en-US', withoutDayOptions);\n\nexport function setStyleBatch(node: HTMLElement | SVGElement, styles: { [key: string]: string }) {\n  const computedStyle = Object.keys(styles)\n    .map(key => `${key}: ${styles[key]}`)\n    .join(';');\n  node.style.cssText = computedStyle;\n}\n\nexport function getSize(container: Container, defaultValue?: any): RectangleOptions {\n  if (container && container.size) {\n    return {\n      height: container.size.height,\n      width: container.size.width,\n    };\n  }\n  return defaultValue;\n}\n\nexport function getRelativeOffset(targetCoords: number, parentCoords: number): number {\n  return targetCoords - parentCoords;\n}\n\nexport function findClosestIndexPointX(arr: Array<Point>, value: number): number {\n  let rightIndex = 0;\n  let leftIndex = arr.length - 1;\n  let middleIndex;\n  while (leftIndex - rightIndex > 1) {\n    middleIndex = Math.floor((rightIndex + leftIndex) / 2);\n    if (value < arr[middleIndex].x) {\n      leftIndex = middleIndex;\n    } else {\n      if (value > arr[middleIndex].x) {\n        rightIndex = middleIndex;\n      } else {\n        return middleIndex;\n      }\n    }\n  }\n  if (value - (arr[rightIndex].x as number) <= (arr[leftIndex].x as number) - value) {\n    return rightIndex;\n  }\n  return leftIndex;\n}\n\nexport function getMinMax(arr: Array<number>): MinMax {\n  const minMax = {\n    min: Number.POSITIVE_INFINITY,\n    max: Number.NEGATIVE_INFINITY,\n  };\n  return arr.reduce((prev, curr) => {\n    prev['min'] = Math.min(prev.min, curr);\n    prev['max'] = Math.max(prev.max, curr);\n    return prev;\n  }, minMax);\n}\n\nconst createGetterForDate = () => {\n  if (isIntl) {\n    return (unix: number, withWeekday = false): string => {\n      if (withWeekday) {\n        if (!computedIntlDateArr.long[unix]) {\n          computedIntlDateArr.long[unix] = IntlLong.format(unix);\n        }\n        return computedIntlDateArr.long[unix];\n      }\n      if (!computedIntlDateArr.short[unix]) {\n        computedIntlDateArr.short[unix] = IntlShort.format(unix);\n      }\n      return computedIntlDateArr.short[unix];\n    };\n  }\n  return (unix: number, withWeekday = false): string => {\n    if (!computedOldDateArr[unix]) {\n      computedOldDateArr[unix] = new Date(unix);\n    }\n    return computedOldDateArr[unix].toLocaleString('en-us', {\n      weekday: withWeekday ? 'short' : undefined,\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n};\n\nconst generatorDate = createGetterForDate();\n\nexport function getShortDateByUnix(unix: number, withWeekday = false): string {\n  return generatorDate(unix, withWeekday);\n}\n\nexport function getPathByPoints(points: Array<Point>): string {\n  return points.reduce((prev, point, index) => {\n    if (index === 0) {\n      return prev + `M ${point.x} ${point.y}`;\n    }\n    return prev + ` L ${point.x} ${point.y}`;\n  }, '');\n}\n\nexport function changePathOnElement(el: SVGPathElement, path: string) {\n  el.setAttribute('d', path);\n}\n\nexport function removeAllChild(node: HTMLElement) {\n  while (node.firstChild) {\n    node.removeChild(node.firstChild);\n  }\n}\n\nexport function createTextNode(text: string): Text {\n  return document.createTextNode(text);\n}\n\nexport function addNodeListener(\n  node: HTMLElement | Document | SVGElement,\n  listeners: { [key: string]: any | Array<any> },\n) {\n  Object.keys(listeners).forEach(event => {\n    if (!Array.isArray(listeners[event])) {\n      node.addEventListener(event, listeners[event]);\n      return;\n    }\n    listeners[event].forEach((callback: any) => {\n      node.addEventListener(event, callback);\n    });\n  });\n}\n\nexport function removeNodeListener(\n  node: HTMLElement | Document | SVGElement,\n  listeners: { [key: string]: any | Array<any> },\n) {\n  Object.keys(listeners).forEach(event => {\n    if (!Array.isArray(listeners[event])) {\n      node.removeEventListener(event, listeners[event]);\n      return;\n    }\n    listeners[event].forEach((callback: any) => {\n      node.removeEventListener(event, callback);\n    });\n  });\n}\n\nexport function setNodeAttrs(\n  node: HTMLElement | SVGElement | Element,\n  attrs: { [key: string]: string },\n) {\n  Object.keys(attrs).forEach(key => {\n    node.setAttribute(key, attrs[key]);\n  });\n}\n\nexport function getCoordsX(\n  chartsWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  indexElem: number,\n  count: number,\n): number {\n  if (count === 1) {\n    return spacingLeft + (chartsWidth - spacingLeft - spacingRight) / 2;\n  }\n  return spacingLeft + ((chartsWidth - spacingLeft - spacingRight) / (count - 1)) * indexElem;\n}\n\nexport function getCoordsY(\n  chartsHeight: number,\n  spacingTop: number,\n  spacingBtn: number,\n  maxValue: number,\n  minValue: number,\n  value: number,\n): number {\n  if (value === maxValue) {\n    return spacingTop;\n  }\n  if (value === minValue) {\n    return chartsHeight - spacingBtn;\n  }\n  if (minValue === maxValue) {\n    return chartsHeight - spacingBtn - (chartsHeight - spacingTop - spacingBtn) / 2;\n  }\n\n  return (\n    chartsHeight -\n    spacingBtn -\n    (chartsHeight - spacingTop - spacingBtn) * ((value - minValue) / (maxValue - minValue))\n  );\n}\n\nexport function relativeIndexByOffset(\n  offsetX: number,\n  fullWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  count: number,\n): number {\n  if (offsetX <= spacingLeft) {\n    return 0;\n  }\n\n  if (offsetX >= fullWidth - spacingRight) {\n    return count - 1;\n  }\n\n  return Math.min(\n    count - 1,\n    Math.round(((offsetX - spacingLeft) / (fullWidth - spacingLeft - spacingRight)) * (count - 1)),\n  );\n}\n\nexport function getLeftTransitionByIndex(\n  leftIndex: number,\n  fullWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  count: number,\n): number {\n  return -(\n    fullWidth -\n    (leftIndex / (count - 1)) * (fullWidth - spacingLeft - spacingRight) -\n    spacingRight\n  );\n}\n\nexport function getRightTransitionByIndex(\n  rightIndex: number,\n  fullWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  count: number,\n): number {\n  return (rightIndex / (count - 1)) * (fullWidth - spacingLeft - spacingRight) + spacingLeft;\n}\n","export interface Chart {\n  columns: Array<Column>;\n  types: Types;\n  colors: { [key: string]: string };\n  names: { [key: string]: string };\n}\n\nexport interface LinePoints {\n  x1: number | string;\n  x2: number | string;\n  y1: number | string;\n  y2: number | string;\n}\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport interface PointWithColor extends Point {\n  color: string;\n}\n\nexport interface PointWithValue extends Point {\n  value: number;\n  date: number;\n}\n\nexport interface PointWithValueAndColor extends Point {\n  value: number;\n  color: string;\n  date: number;\n  key?: string;\n}\n\nexport interface ChartOptions {\n  withoutPreview?: boolean;\n  withoutControls?: boolean;\n  withoutNightMode?: boolean;\n  withoutAxisLabel?: boolean;\n  chartsContainer?: Container;\n  previewContainer?: Container;\n  horizontSteps?: number;\n}\n\nexport interface Container {\n  size: RectangleOptions;\n}\n\nexport interface RectangleOptions {\n  width: string | number;\n  height: string | number;\n}\n\nexport type Column = [String, ...Array<number>];\n\nexport enum Type {\n  Line = 'line',\n  X = 'x',\n}\n\nexport type Types = { [key: string]: Type };\n\nexport interface MinMax {\n  min: number;\n  max: number;\n}\n","import {\n  Chart,\n  ChartOptions,\n  Point,\n  PointWithColor,\n  PointWithValue,\n  PointWithValueAndColor,\n  Type,\n} from '../interfaces/chart';\nimport {\n  addNodeListener,\n  changePathOnElement,\n  createTextNode,\n  findClosestIndexPointX,\n  getCoordsX,\n  getCoordsY,\n  getLeftTransitionByIndex,\n  getMinMax,\n  getPathByPoints,\n  getRelativeOffset,\n  getRightTransitionByIndex,\n  getShortDateByUnix,\n  relativeIndexByOffset,\n  removeAllChild,\n  removeNodeListener,\n  setNodeAttrs,\n  setStyleBatch,\n} from '../utils/misc';\nimport { generateNode, generateSvgElement } from './generator';\n\n// constant number\nconst POINT_RADIUS = 5;\nconst MIN_TOOLTIP_WIDTH = 90;\nconst DEFAULT_HOR_STEPS = 6;\nconst DEFAULT_SPACING_RIGHT = 30;\nconst DEFAULT_SPACING_LEFT = 30;\nconst DEFAULT_SPACING_PREVIEW = 10;\nconst DEFAULT_SPACING_TOP = 10;\nconst DEFAULT_SPACING_BTM = 10;\nconst DEFAULT_SPACING_TOP_PREVIEW = 5;\nconst DEFAULT_SPACING_BTM_PREVIEW = 5;\nconst DEFAULT_SPACING = DEFAULT_SPACING_RIGHT + DEFAULT_SPACING_LEFT;\nconst DEFAULT_PREVIEW_SPACING = 10;\nconst DEFAULT_SLICE = 19; // Programming + 1\nconst SLICE_NUMBER = 5.5;\nconst DEFAULT_DAY_COUNT = 6;\n\n// ClassNames\nconst classNameStepLine = 'line_step';\nconst verticleLineClass = 'verticle';\nconst classNameStepTitle = 'text_step';\n\nexport class PxyUpChart {\n  private isDragActive = false;\n  private isResizeActive = false;\n  private activeResize: boolean | null = null;\n  private resizeAnimationFrame: number | null = null;\n  private dragAnimationFrame: number | null = null;\n  private mouseMoveAnimationFrame: number | null = null;\n  private toggleColumnAnimationFrame: number | null = null;\n\n  private maxValue: number;\n  private minValue: number;\n\n  private maxValueGlobal: number;\n  private minValueGlobal: number;\n\n  private height: number;\n  private width: number;\n\n  private previewWidth: number;\n  private previewHeight: number;\n\n  private night_mod = false;\n\n  private horizontSteps: number;\n\n  private sliceStartIndex = 0;\n\n  private sliceEndIndex = 0;\n\n  private currentSlicePoint: { [key: string]: Array<PointWithValue> } = {};\n\n  private verticleLine: SVGElement;\n\n  private columnsVisible: { [key: string]: boolean } = {};\n\n  private columnDatasets: { [key: string]: Array<number> } = {};\n\n  private countElements: number;\n\n  private _position: ClientRect;\n\n  private animationTimer: number | null = null;\n\n  constructor(\n    private id: number,\n    private node: HTMLElement,\n    private charts_svg: HTMLElement | SVGElement,\n    private preview_svg: HTMLElement | SVGElement,\n    private toolTip: HTMLElement,\n    private toolTipDate: HTMLElement,\n    private controlsContainer: HTMLElement,\n    private nightModeControl: HTMLElement,\n    private axisContainer: HTMLElement,\n    private leftPreviewControl: HTMLElement,\n    private rightPreviewControl: HTMLElement,\n    private centerPreviewControl: HTMLElement,\n    private leftResizeControl: HTMLElement,\n    private rightResizeControl: HTMLElement,\n    private previewControlContainer: HTMLElement,\n    private dataset: Chart,\n    private options: ChartOptions,\n  ) {\n    // Hi Telegram Team!\n    // I tried charts with get min time for Scripting/Rendering/Painting in Chrome Dev Tools and Application size\n    // And i tried do it scalable, animation of axis X with point on chart > 1000, will be slow\n    // Because you every time need hide/show/translate more > 994 elements, i wanna scalable solution\n    // That reason why i tried optimize all of them appendChild, remove, setStyle and more another things\n    // Thank you for challenge!\n    this.height = +this.charts_svg.getAttribute('height');\n    this.width = +this.charts_svg.getAttribute('width');\n    // Set tooltip max width\n    this.toolTip.style.maxWidth = `${this.width - 2 * DEFAULT_SPACING}px`;\n\n    Object.keys(this.dataset.names).forEach(key => {\n      this.columnsVisible[key] = true;\n    });\n    // Create dataset help and set first slice size and indexes\n    this.dataset.columns.forEach(column => {\n      const keyOfColumn = column.shift() as any;\n      this.columnDatasets[keyOfColumn] = column as any;\n      if (!this.countElements) {\n        this.countElements = this.columnDatasets[keyOfColumn].length;\n      }\n      if (!this.sliceStartIndex) {\n        const sliceSize = Math.max(DEFAULT_SLICE, Math.floor(this.countElements / SLICE_NUMBER));\n        this.sliceStartIndex = Math.max(this.columnDatasets[keyOfColumn].length - sliceSize - 1, 0);\n      }\n      if (!this.sliceEndIndex) {\n        this.sliceEndIndex = this.columnDatasets[keyOfColumn].length - 1;\n      }\n    });\n\n    this.horizontSteps = (options && options.horizontSteps) || DEFAULT_HOR_STEPS;\n\n    this.verticleLine = generateSvgElement('line', [verticleLineClass], {\n      x1: 0 as any,\n      x2: 0 as any,\n      y1: 0 as any,\n      y2: (this.height - DEFAULT_SPACING_BTM) as any,\n    });\n\n    this.charts_svg.appendChild(this.verticleLine);\n\n    this.addMouseListener();\n\n    if (!options.withoutAxisLabel) {\n      setStyleBatch(this.axisContainer, {\n        top: `${this.height - DEFAULT_SPACING_BTM}px`,\n        width: `${this.width - (DEFAULT_SPACING_LEFT + DEFAULT_SPACING_RIGHT) / 2}px`,\n        'padding-left': `${(DEFAULT_SPACING_LEFT / 3) * 2}px`,\n        'padding-right': `${DEFAULT_SPACING_RIGHT / 2}px`,\n      });\n    }\n    this.draw();\n\n    if (!options.withoutPreview) {\n      this.previewHeight = +this.preview_svg.getAttribute('height');\n      this.previewWidth = +this.preview_svg.getAttribute('width');\n      this.drawPreview();\n      this.drawPreviewControls(true);\n    }\n\n    if (!options.withoutControls) {\n      this.generateControls();\n    }\n\n    if (!options.withoutNightMode) {\n      this.addNightModeListener();\n    }\n  }\n\n  addNightModeListener() {\n    this.nightModeControl.addEventListener('click', this.onNightModeClick);\n  }\n\n  generateControls() {\n    this.controlsContainer.style.width = `${this.width}px`;\n    Object.keys(this.columnsVisible).forEach(key => {\n      const checkBoxControl = generateNode({\n        tag: 'div',\n        classList: ['checkbox_container'],\n        attrs: {\n          key: key,\n        },\n        children: [\n          {\n            tag: 'div',\n            classList: ['round'],\n          },\n          {\n            tag: 'div',\n            classList: ['label'],\n            textValue: this.dataset.names[key],\n          },\n        ],\n      });\n      this.controlsContainer.appendChild(checkBoxControl);\n      checkBoxControl.addEventListener('click', this.onCheckBoxClick, false);\n      this.setColorCheckboxByKey(key);\n    });\n  }\n\n  doPreventDefault = (e: MouseEvent) => {\n    e.stopPropagation();\n  };\n\n  onNightModeClick = () => {\n    this.toggleNightMode();\n  };\n\n  onCheckBoxClick = (e: MouseEvent) => {\n    if (this.toggleColumnAnimationFrame) {\n      cancelAnimationFrame(this.toggleColumnAnimationFrame);\n    }\n    this.toggleColumnAnimationFrame = requestAnimationFrame(() => {\n      this.removePoints();\n      let target = e.target as HTMLElement;\n      let key = target.getAttribute('key');\n      while (!key || target === document.body) {\n        target = target.parentNode as HTMLElement;\n        key = target.getAttribute('key');\n      }\n      if (key) {\n        this.toggleColumnVisible(key);\n      }\n    });\n  };\n\n  addMouseListener() {\n    addNodeListener(this.charts_svg, this.SVG_CHARTS_LISTENERS);\n    addNodeListener(document, this.DOCUMENT_LISTENERS);\n    addNodeListener(this.toolTip, this.TOOLTIP_LISTENERS);\n  }\n\n  destroy(withRemove = true) {\n    this.resetTimer();\n    removeNodeListener(this.charts_svg, this.SVG_CHARTS_LISTENERS);\n    removeNodeListener(document, this.DOCUMENT_LISTENERS);\n    removeNodeListener(this.toolTip, this.TOOLTIP_LISTENERS);\n\n    if (!this.options.withoutControls) {\n      this.controlsContainer.querySelectorAll('.round').forEach(item => {\n        item.removeEventListener('click', this.onCheckBoxClick);\n      });\n    }\n\n    if (!this.options.withoutNightMode) {\n      this.nightModeControl.removeEventListener('click', this.onNightModeClick);\n    }\n    if (!this.options.withoutPreview) {\n      removeNodeListener(this.centerPreviewControl, this.CENTRAL_CONTROL_LISTENERS);\n\n      removeNodeListener(this.previewControlContainer, this.PREVIEW_CHART_LISTENERS);\n\n      removeNodeListener(this.leftResizeControl, this.LEFT_RESIZE_CONTROL_LISTENERS);\n\n      removeNodeListener(this.rightResizeControl, this.RIGHT_RESIZE_CONTROL_LISTENERS);\n\n      removeNodeListener(this.leftPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n\n      removeNodeListener(this.rightPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n    }\n    if (withRemove) {\n      this.node.remove();\n    }\n  }\n\n  onMouseUp = (e: any) => {\n    this.isResizeActive = false;\n    this.isDragActive = false;\n    this.activeResize = null;\n  };\n\n  onResizeStartRight = (e: MouseEvent) => {\n    e.stopPropagation();\n    this.isDragActive = false;\n    this.hideHoverLineAndPoints();\n    this.isResizeActive = true;\n    this.activeResize = true;\n  };\n\n  onResizeStartLeft = (e: MouseEvent) => {\n    e.stopPropagation();\n    this.isDragActive = false;\n    this.hideHoverLineAndPoints();\n    this.isResizeActive = true;\n    this.activeResize = false;\n  };\n\n  stopProp = (e: MouseEvent) => {\n    e.stopPropagation();\n  };\n\n  onResizeEndLeft = () => {\n    this.isResizeActive = false;\n    this.activeResize = null;\n  };\n\n  onResizeEndRight = () => {\n    this.isResizeActive = false;\n    this.activeResize = null;\n  };\n\n  onResize = (e: MouseEvent | TouchEvent) => {\n    e.preventDefault();\n    if (this.isResizeActive) {\n      if (this.resizeAnimationFrame) {\n        cancelAnimationFrame(this.resizeAnimationFrame);\n      }\n      this.resizeAnimationFrame = requestAnimationFrame(() => this.doResize(this.activeResize, e));\n    }\n  };\n\n  onDragStart = (e: MouseEvent | TouchEvent) => {\n    e.stopPropagation();\n    this.hideHoverLineAndPoints();\n    this.isDragActive = true;\n  };\n\n  onDragEnd = (e: MouseEvent | TouchEvent) => {\n    this.isDragActive = false;\n  };\n\n  onDrag = (e: MouseEvent | TouchEvent) => {\n    e.preventDefault();\n    if (this.isDragActive) {\n      if (this.dragAnimationFrame) {\n        cancelAnimationFrame(this.dragAnimationFrame);\n      }\n      this.dragAnimationFrame = requestAnimationFrame(() => this.onPreviewControlClick(e));\n    }\n  };\n\n  onMouseEnter = () => {\n    this.verticleLine.classList.add('show');\n  };\n\n  onMouseLeave = (e: MouseEvent) => {\n    const cordY = getRelativeOffset(e.clientY, this.positions.top);\n    if (e.toElement !== this.toolTip || cordY >= this.height - 100) {\n      this.hideHoverLineAndPoints();\n    }\n  };\n\n  onToolTipLeave = () => {\n    this.hideHoverLineAndPoints();\n  };\n\n  hideHoverLineAndPoints() {\n    this.removePoints();\n    this.verticleLine.classList.remove('show');\n    this.toolTip.style.display = 'none';\n  }\n\n  doResize(isRight: boolean, e: MouseEvent | TouchEvent) {\n    if (isRight === null) {\n      return;\n    }\n    const cursorX = getRelativeOffset(\n      (e as MouseEvent).clientX || (e as TouchEvent).touches[0].clientX,\n      this.positions.left,\n    );\n    const offsetIndex = relativeIndexByOffset(\n      cursorX,\n      this.previewWidth,\n      DEFAULT_PREVIEW_SPACING,\n      DEFAULT_PREVIEW_SPACING,\n      this.countElements,\n    );\n    if (!isRight) {\n      this.sliceStartIndex = offsetIndex;\n      if (this.sliceStartIndex >= this.sliceEndIndex) {\n        this.sliceStartIndex = this.sliceEndIndex - 1;\n      }\n    } else {\n      this.sliceEndIndex = offsetIndex;\n\n      if (this.sliceEndIndex <= this.sliceStartIndex) {\n        this.sliceEndIndex = this.sliceStartIndex + 1;\n      }\n    }\n\n    this.drawPreviewControls();\n    this.removeAxisXCharts();\n    this.draw();\n  }\n\n  onPreviewControlClick = (e: MouseEvent | TouchEvent) => {\n    const cursorX = getRelativeOffset(\n      (e as MouseEvent).clientX || (e as TouchEvent).touches[0].clientX,\n      this.positions.left,\n    );\n    const sliceSize = this.sliceEndIndex - this.sliceStartIndex;\n    const offsetIndexLeft = Math.floor(\n      relativeIndexByOffset(\n        cursorX,\n        this.previewWidth,\n        DEFAULT_PREVIEW_SPACING,\n        DEFAULT_PREVIEW_SPACING,\n        this.countElements,\n      ) -\n        sliceSize / 2,\n    );\n    this.sliceStartIndex = Math.max(offsetIndexLeft, 0);\n    this.sliceEndIndex = Math.min(this.sliceStartIndex + sliceSize, this.countElements - 1);\n    if (this.sliceEndIndex === this.countElements - 1) {\n      this.sliceStartIndex = Math.max(0, this.sliceEndIndex - sliceSize);\n    }\n    if (this.sliceStartIndex === 0) {\n      this.sliceEndIndex = Math.min(this.sliceStartIndex + sliceSize, this.countElements - 2);\n    }\n    this.drawPreviewControls();\n    this.removeAxisXCharts();\n    this.draw();\n  };\n\n  onMouseMove = (e: MouseEvent) => {\n    if (this.mouseMoveAnimationFrame) {\n      cancelAnimationFrame(this.mouseMoveAnimationFrame);\n    }\n    this.mouseMoveAnimationFrame = requestAnimationFrame(() => {\n      const cordX = e.offsetX;\n      const cordY = e.offsetY;\n      if (\n        cordX > DEFAULT_SPACING_LEFT / 2 &&\n        cordX < this.width - DEFAULT_SPACING_RIGHT / 2 &&\n        cordY < this.height - DEFAULT_SPACING_BTM\n      ) {\n        setNodeAttrs(this.verticleLine, {\n          x1: cordX as any,\n          x2: cordX as any,\n        });\n        const closestIndex = this.findClosesIndexOfPoint(cordX);\n        if (closestIndex === null) {\n          return;\n        }\n        const points = Object.keys(this.columnsVisible)\n          .filter(key => this.columnsVisible[key])\n          .map(key => ({\n            key: key,\n            color: this.dataset.colors[key],\n            x: this.currentSlicePoint[key][closestIndex].x,\n            y: this.currentSlicePoint[key][closestIndex].y,\n            value: this.currentSlicePoint[key][closestIndex].value,\n            date: this.currentSlicePoint[key][closestIndex].date,\n          }));\n        this.showPoints(points);\n        this.showTooltip(points, { x: cordX, y: cordY });\n      }\n    });\n  };\n\n  showPoints(arr: Array<PointWithColor> = []) {\n    this.removePoints();\n    arr.forEach(point => {\n      const circle = generateSvgElement('circle', null, {\n        cx: point.x as any,\n        cy: point.y as any,\n        stroke: point.color,\n        r: POINT_RADIUS as any,\n      });\n      this.charts_svg.appendChild(circle);\n    });\n  }\n\n  removePoints() {\n    this.charts_svg.querySelectorAll('circle').forEach(el => el.remove());\n  }\n\n  showTooltip(arr: Array<PointWithValueAndColor>, point: Point) {\n    const leftPosition = (point.x as number) + DEFAULT_SPACING_LEFT;\n    const topPosition = (point.y as number) + DEFAULT_SPACING_TOP;\n    const stylesTooltip = {\n      display: 'flex',\n      right: 'unset',\n      left: `${leftPosition}px`,\n      top: `${topPosition}px`,\n    };\n    const childContainer = this.toolTip.querySelector('.items') as HTMLElement;\n\n    removeAllChild(childContainer);\n    removeAllChild(this.toolTipDate);\n\n    this.toolTipDate.appendChild(createTextNode(getShortDateByUnix(arr[0].date, true)));\n    arr\n      .map(item =>\n        generateNode({\n          tag: 'div',\n          attrs: {\n            style: `color: ${item.color}`,\n          },\n          children: [\n            {\n              tag: 'span',\n              classList: ['value'],\n              textValue: item.value as any,\n            },\n            {\n              tag: 'span',\n              classList: ['item'],\n              textValue: this.dataset.names[item.key],\n            },\n          ],\n        }),\n      )\n      .forEach(item => childContainer.appendChild(item));\n\n    if (leftPosition > this.width - MIN_TOOLTIP_WIDTH - DEFAULT_SPACING_RIGHT) {\n      stylesTooltip.right = `${Math.min(\n        MIN_TOOLTIP_WIDTH,\n        this.width - leftPosition + DEFAULT_SPACING_LEFT + DEFAULT_SPACING_RIGHT,\n      )}px`;\n      stylesTooltip.left = 'unset';\n    }\n\n    setStyleBatch(this.toolTip, stylesTooltip);\n  }\n\n  findClosesIndexOfPoint(cordX: number): number | null {\n    const arr = Object.keys(this.columnsVisible).filter(key => this.columnsVisible[key]);\n    if (!arr.length) {\n      return null;\n    }\n    return findClosestIndexPointX(this.currentSlicePoint[arr[0]], cordX);\n  }\n\n  removePathByKey(key: string) {\n    const path = this.charts_svg.querySelector(`path#pxyup_path_${this.id}_${key}`);\n    if (path) {\n      path.remove();\n    }\n  }\n\n  setColorCheckboxByKey(key: string) {\n    const color = this.dataset.colors[key];\n    const checkbox = this.controlsContainer.querySelector(\n      `.checkbox_container[key=\"${key}\"] .round`,\n    ) as HTMLElement;\n    if (!this.columnsVisible[key]) {\n      checkbox.classList.add('not_active');\n    } else {\n      checkbox.classList.remove('not_active');\n      setStyleBatch(checkbox, {\n        'border-color': color,\n        'background-color': color,\n      });\n    }\n  }\n\n  toggleColumnVisible(key: string) {\n    this.columnsVisible[key] = !this.columnsVisible[key];\n    this.setColorCheckboxByKey(key);\n\n    if (!this.columnsVisible[key]) {\n      this.removePathByKey(key);\n    }\n    this.node.classList.add('animation');\n    if (!this.options.withoutPreview) {\n      this.drawPreview(false);\n    }\n    this.refresh(false, false);\n    if (this.animationTimer) {\n      clearTimeout(this.animationTimer);\n    }\n    this.animationTimer = window.setTimeout(() => {\n      this.node.classList.remove('animation');\n    }, 150);\n  }\n\n  drawPreviewControls(withEvents: boolean = false) {\n    const leftControlTranslate = getLeftTransitionByIndex(\n      this.sliceStartIndex,\n      this.previewWidth,\n      DEFAULT_PREVIEW_SPACING,\n      DEFAULT_PREVIEW_SPACING,\n      this.countElements,\n    );\n    const rightControlTranslate = getRightTransitionByIndex(\n      this.sliceEndIndex,\n      this.previewWidth,\n      DEFAULT_PREVIEW_SPACING,\n      DEFAULT_PREVIEW_SPACING,\n      this.countElements,\n    );\n    setStyleBatch(this.leftPreviewControl, {\n      transform: `translateX(${leftControlTranslate}px)`,\n    });\n    setStyleBatch(this.rightPreviewControl, {\n      transform: `translateX(${rightControlTranslate}px)`,\n    });\n    const centralWidth = Math.ceil(\n      Math.abs(\n        Math.abs(this.previewWidth - rightControlTranslate) - Math.abs(leftControlTranslate),\n      ),\n    );\n    setStyleBatch(this.centerPreviewControl, {\n      width: `${centralWidth}px`,\n      transform: `translateX(${Math.round(rightControlTranslate - centralWidth)}px)`,\n    });\n\n    if (withEvents) {\n      addNodeListener(this.leftPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n\n      addNodeListener(this.rightPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n\n      // PC\n\n      addNodeListener(this.centerPreviewControl, this.CENTRAL_CONTROL_LISTENERS);\n\n      addNodeListener(this.previewControlContainer, this.PREVIEW_CHART_LISTENERS);\n\n      addNodeListener(this.leftResizeControl, this.LEFT_RESIZE_CONTROL_LISTENERS);\n\n      addNodeListener(this.rightResizeControl, this.RIGHT_RESIZE_CONTROL_LISTENERS);\n    }\n  }\n\n  draw(withAnimation = true, withXAxis = true) {\n    this.setSupportsLines();\n    this.drawCurrentSlice(withAnimation, withXAxis);\n  }\n\n  refresh(withAnimation = true, withXAxis = true) {\n    this.resetTimer();\n    this.draw(withAnimation, withXAxis);\n  }\n\n  drawAxisX() {\n    removeAllChild(this.axisContainer);\n    const sliceSize = this.sliceEndIndex - this.sliceStartIndex + 1;\n    let labelCount = Math.min(DEFAULT_DAY_COUNT, sliceSize + 1);\n    const mustGeneratedLabels = labelCount;\n    const deltaDays =\n      sliceSize <= DEFAULT_DAY_COUNT + 2 ? 1 : Math.max(sliceSize / (mustGeneratedLabels - 1), 1);\n    let index = this.sliceStartIndex;\n\n    const generateLabel = (text: string) => {\n      return generateNode({\n        tag: 'div',\n        textValue: text,\n      });\n    };\n    if (deltaDays == 1) {\n      for (let i = this.sliceStartIndex; i <= this.sliceEndIndex; i++) {\n        this.axisContainer.appendChild(\n          generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][i])),\n        );\n      }\n    } else {\n      this.axisContainer.appendChild(\n        generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][this.sliceStartIndex])),\n      );\n      index += deltaDays;\n\n      while (labelCount - 2 > 0 && index < this.sliceEndIndex - 2) {\n        this.axisContainer.appendChild(\n          generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][Math.ceil(index)])),\n        );\n        labelCount -= 1;\n        index += deltaDays;\n      }\n      this.axisContainer.appendChild(\n        generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][this.sliceEndIndex])),\n      );\n    }\n  }\n\n  resetTimer() {\n    if (this.dragAnimationFrame) {\n      cancelAnimationFrame(this.dragAnimationFrame);\n      this.dragAnimationFrame = null;\n    }\n    if (this.resizeAnimationFrame) {\n      cancelAnimationFrame(this.resizeAnimationFrame);\n      this.resizeAnimationFrame = null;\n    }\n    if (this.mouseMoveAnimationFrame) {\n      cancelAnimationFrame(this.mouseMoveAnimationFrame);\n      this.mouseMoveAnimationFrame = null;\n    }\n    if (this.toggleColumnAnimationFrame) {\n      cancelAnimationFrame(this.toggleColumnAnimationFrame);\n      this.toggleColumnAnimationFrame = null;\n    }\n    if (this.animationTimer) {\n      clearTimeout(this.animationTimer);\n      this.animationTimer = null;\n    }\n  }\n\n  setRightIndexSlice(size: number) {\n    this.sliceStartIndex = size;\n    this.refresh();\n  }\n\n  setLeftIndexSlice(size: number) {\n    this.sliceEndIndex = size;\n    this.refresh();\n  }\n\n  removeAxisXCharts() {\n    const el = this.charts_svg.querySelector(`g.axis`);\n    if (el) {\n      el.remove();\n    }\n  }\n\n  drawCurrentSlice(withAnimation = true, withXAxis = true) {\n    const realMinValue = this.minValue >= 0 ? 0 : this.minValue;\n    const sliceSize = this.sliceEndIndex - this.sliceStartIndex + 1;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n\n      if (columnVisible) {\n        const currentPath = this.charts_svg.querySelector(\n          `path#${`pxyup_path_${this.id}_${key}`}`,\n        ) as SVGPathElement;\n\n        this.currentSlicePoint[key] = this.columnDatasets[key]\n          .slice(this.sliceStartIndex, this.sliceEndIndex + 1)\n          .map((point, index) => {\n            return {\n              x: getCoordsX(\n                this.width,\n                DEFAULT_SPACING_LEFT,\n                DEFAULT_SPACING_RIGHT,\n                index,\n                sliceSize,\n              ),\n              y: getCoordsY(\n                this.height,\n                DEFAULT_SPACING_TOP,\n                DEFAULT_SPACING_BTM,\n                this.maxValue,\n                realMinValue,\n                point,\n              ),\n              value: point,\n              date: this.columnDatasets[Type.X][this.sliceStartIndex + index],\n            };\n          });\n\n        if (currentPath) {\n          changePathOnElement(currentPath, getPathByPoints(this.currentSlicePoint[key]));\n          return;\n        }\n\n        const path = generateSvgElement('path', [], {\n          id: `pxyup_path_${this.id}_${key}`,\n          stroke: this.dataset.colors[key],\n          fill: 'none',\n          d: getPathByPoints(this.currentSlicePoint[key]),\n        });\n\n        this.charts_svg.appendChild(path);\n      }\n    });\n\n    if (!this.options.withoutAxisLabel && withXAxis) {\n      this.drawAxisX();\n    }\n  }\n\n  drawPreview(withAnimation = true) {\n    this.preview_svg.querySelectorAll(`path`).forEach(el => el.remove());\n    const values = [] as Array<number>;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n      if (columnVisible) {\n        values.push(...this.columnDatasets[key]);\n      }\n    });\n\n    const minMax = getMinMax(values);\n    this.minValueGlobal = minMax.min;\n    this.maxValueGlobal = minMax.max;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n      if (columnVisible) {\n        const path = generateSvgElement('path', [], {\n          id: `pxyup_path_preview_${this.id}_${key}`,\n          d: getPathByPoints(\n            this.columnDatasets[key].map((point, index) => ({\n              x: getCoordsX(\n                this.previewWidth,\n                DEFAULT_SPACING_PREVIEW,\n                DEFAULT_SPACING_PREVIEW,\n                index,\n                this.countElements,\n              ),\n              y: getCoordsY(\n                this.previewHeight,\n                DEFAULT_SPACING_TOP_PREVIEW,\n                DEFAULT_SPACING_BTM_PREVIEW,\n                this.maxValueGlobal,\n                this.minValueGlobal,\n                point,\n              ),\n            })),\n          ),\n          stroke: this.dataset.colors[key],\n          fill: 'none',\n        });\n\n        this.preview_svg.prepend(path);\n      }\n    });\n  }\n\n  setSupportsLines() {\n    const values = [] as Array<number>;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n      if (columnVisible) {\n        values.push(\n          ...this.columnDatasets[key].slice(this.sliceStartIndex, this.sliceEndIndex + 1),\n        );\n      }\n    });\n    if (values.length === 0) {\n      this.removeSteps();\n      return;\n    }\n    const minMax = getMinMax(values);\n    if (this.minValue === minMax.min && this.maxValue === minMax.max) {\n      return;\n    }\n    this.minValue = minMax.min;\n    this.maxValue = minMax.max;\n    const step =\n      values.length === 0\n        ? 0\n        : Math.ceil(\n            (this.minValue > 0 ? this.maxValue : this.maxValue - this.minValue) /\n              this.horizontSteps,\n          );\n\n    const stepsArr = this.minValue > 0 ? [0] : [this.minValue];\n    for (let index = 1; index < this.horizontSteps; index++) {\n      stepsArr.push(stepsArr[0] + step * index || index);\n    }\n\n    this.drawSteps(stepsArr);\n  }\n\n  toggleNightMode() {\n    this.night_mod = !this.night_mod;\n    removeAllChild(this.nightModeControl);\n    if (this.night_mod) {\n      this.node.classList.add('night');\n\n      this.nightModeControl.appendChild(createTextNode('Switch to day mode'));\n    } else {\n      this.node.classList.remove('night');\n      this.nightModeControl.appendChild(createTextNode('Switch to night mode'));\n    }\n  }\n\n  removeSteps() {\n    const groupSteps = this.charts_svg.querySelector('g.steps');\n    if (groupSteps) {\n      groupSteps.remove();\n    }\n  }\n\n  drawSteps(arr: Array<number>) {\n    this.removeSteps();\n    const realMinValue = this.minValue >= 0 ? 0 : this.minValue;\n    const stepsElements = [] as Array<SVGElement>;\n    arr.forEach((step, index) => {\n      const cordY =\n        index === 0\n          ? this.height - DEFAULT_SPACING_BTM\n          : (getCoordsY(\n              this.height,\n              DEFAULT_SPACING_TOP,\n              DEFAULT_SPACING_BTM,\n              this.maxValue,\n              realMinValue,\n              step,\n            ) as any);\n      const line = generateSvgElement('line', [classNameStepLine], {\n        x1: 0 as any,\n        x2: this.width as any,\n        y1: cordY,\n        y2: cordY,\n      });\n      const text = generateSvgElement(\n        'text',\n        [classNameStepTitle],\n        {\n          x: 0 as any,\n          y: (cordY - 5) as any,\n        },\n        [],\n        step as any,\n      );\n      stepsElements.push(line);\n      stepsElements.push(text);\n    });\n    const groupStepsEl = generateSvgElement('g', ['steps'], null, stepsElements);\n    this.charts_svg.prepend(groupStepsEl);\n  }\n\n  preventDrag = (e: DragEvent) => {\n    e.preventDefault();\n    return false;\n  };\n\n  getTranspilingDataset() {\n    return this.columnDatasets;\n  }\n\n  onMouseEnterPreview = () => {\n    this.hideHoverLineAndPoints();\n  };\n\n  private SVG_CHARTS_LISTENERS = {\n    mouseenter: this.onMouseEnter,\n    mouseleave: this.onMouseLeave,\n    mousemove: this.onMouseMove,\n  };\n\n  private CENTRAL_CONTROL_LISTENERS = {\n    mousedown: this.onDragStart,\n    dragstart: this.preventDrag,\n    mouseup: this.onDragEnd,\n    touchstart: this.onDragStart,\n    touchend: this.onDragEnd,\n  };\n\n  private PREVIEW_CHART_LISTENERS = {\n    mouseenter: this.onMouseEnterPreview,\n    mousemove: [this.onDrag, this.onResize],\n    touchmove: [this.onDrag, this.onResize],\n  };\n\n  private DOCUMENT_LISTENERS = {\n    mouseup: this.onMouseUp,\n  };\n\n  private TOOLTIP_LISTENERS = {\n    mouseleave: this.onToolTipLeave,\n  };\n\n  private LEFT_RESIZE_CONTROL_LISTENERS = {\n    mouseup: this.onResizeEndLeft,\n    dragstart: this.preventDrag,\n    mousedown: this.onResizeStartLeft,\n    touchend: this.onResizeEndLeft,\n    touchstart: this.onResizeStartLeft,\n    click: this.stopProp,\n  };\n\n  private RIGHT_RESIZE_CONTROL_LISTENERS = {\n    mouseup: this.onResizeEndRight,\n    dragstart: this.preventDrag,\n    mousedown: this.onResizeStartRight,\n    touchend: this.onResizeEndRight,\n    touchstart: this.onResizeStartRight,\n    click: this.stopProp,\n  };\n\n  get positions() {\n    if (!this._position) {\n      this._position = this.charts_svg.getBoundingClientRect();\n    }\n    return this._position;\n  }\n}\n","import { Chart, ChartOptions } from '../interfaces/chart';\nimport { createTextNode, getSize, setNodeAttrs } from '../utils/misc';\n\nimport { PxyUpChart } from './chart';\nimport { PxyupNode } from '../interfaces/node';\n\nlet id = 0;\n\nexport function generateSvgElement(\n  type: string,\n  classList?: Array<string>,\n  attrs?: { [key: string]: string },\n  childs?: Array<SVGElement>,\n  value?: string,\n): SVGElement {\n  const element = document.createElementNS('http://www.w3.org/2000/svg', type);\n\n  if (classList) {\n    classList.forEach(item => {\n      element.classList.add(item);\n    });\n  }\n  if (attrs) {\n    setNodeAttrs(element, attrs);\n  }\n\n  if (childs) {\n    childs.forEach(item => {\n      element.appendChild(item);\n    });\n  }\n\n  if (value !== undefined) {\n    element.appendChild(document.createTextNode(value));\n  }\n\n  return element;\n}\n\nexport function generateNode(node: PxyupNode): HTMLElement | SVGSVGElement | null {\n  if (node.skip) {\n    return null;\n  }\n\n  const rootNode =\n    node.tag === 'svg'\n      ? document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n      : document.createElement(node.tag);\n\n  if (node.textValue) {\n    rootNode.appendChild(createTextNode(node.textValue));\n  }\n\n  if (node.classList) {\n    node.classList.forEach(item => {\n      rootNode.classList.add(item);\n    });\n  }\n\n  if (node.attrs) {\n    if (node.tag === 'svg') {\n      Object.keys(node.attrs).forEach(key => {\n        rootNode.setAttributeNS(null, key, node.attrs[key]);\n      });\n      rootNode.setAttributeNS(\n        null,\n        'viewBox',\n        `0 0 ${node.attrs['width']} ${node.attrs['height']}`,\n      );\n    } else {\n      setNodeAttrs(rootNode, node.attrs);\n    }\n  }\n\n  if (node.children) {\n    node.children.forEach((item: any) => {\n      if (!item) {\n        return;\n      }\n      if (!item.tag) {\n        rootNode.appendChild(item as HTMLHtmlElement);\n        return;\n      }\n      const child = generateNode(item as PxyupNode);\n      if (child) {\n        rootNode.appendChild(child);\n      }\n    });\n  }\n\n  return rootNode;\n}\n\nexport function chartsGenerator(\n  rootNode: HTMLElement,\n): (dataset: Chart, options?: ChartOptions) => PxyUpChart {\n  return (dataset: Chart, options: ChartOptions = {}) => {\n    const axisContainer = generateNode({\n      tag: 'div',\n      classList: ['axis_labels'],\n      skip: options.withoutAxisLabel,\n    });\n    const chartsNode = generateNode({\n      tag: 'svg',\n      classList: ['main_chart'],\n      attrs: {\n        ...getSize(options.chartsContainer, {\n          width: '400',\n          height: '400',\n        }),\n      },\n    });\n\n    const previewNode = generateNode({\n      tag: 'svg',\n      skip: options.withoutPreview,\n      classList: ['chart_preview'],\n      attrs: {\n        ...getSize(options.previewContainer, {\n          width: '400',\n          height: '60',\n        }),\n      },\n    });\n\n    const leftResizeControl = generateNode({\n      tag: 'div',\n      classList: ['resize'],\n      children: [\n        generateNode({\n          tag: 'div',\n          classList: ['caret'],\n        }),\n      ],\n    });\n\n    const rightResizeControl = generateNode({\n      tag: 'div',\n      classList: ['resize'],\n      children: [\n        generateNode({\n          tag: 'div',\n          classList: ['caret'],\n        }),\n      ],\n    });\n\n    const leftPreviewContainer = generateNode({\n      tag: 'div',\n      classList: ['control', 'left'],\n      children: [leftResizeControl],\n    });\n\n    const centerPreviewContainer = generateNode({\n      tag: 'div',\n      classList: ['control', 'center'],\n    });\n\n    const rightPreviewContainer = generateNode({\n      tag: 'div',\n      classList: ['control', 'right'],\n      children: [rightResizeControl],\n    });\n\n    const previewControlContainer = generateNode({\n      tag: 'div',\n      classList: ['preview_controls'],\n      children: [leftPreviewContainer, centerPreviewContainer, rightPreviewContainer],\n    });\n\n    const previewContainer = generateNode({\n      tag: 'div',\n      skip: options.withoutPreview,\n      classList: ['preview_container'],\n      children: [previewNode, previewControlContainer],\n    });\n\n    const toolTipDateNode = generateNode({\n      tag: 'p',\n      classList: ['date'],\n    });\n    const toolTipNode = generateNode({\n      tag: 'div',\n      classList: ['tooltip'],\n      children: [\n        toolTipDateNode,\n        {\n          tag: 'div',\n          classList: ['items'],\n        },\n      ],\n    });\n    const controlsNode = generateNode({\n      tag: 'div',\n      classList: ['controls'],\n      skip: options.withoutControls,\n    });\n    const nightModeControl = generateNode({\n      tag: 'a',\n      textValue: 'Switch to Night mode',\n    });\n    const basicNode = generateNode({\n      attrs: {\n        id: `pxyup_chart_${id}`,\n      },\n      classList: ['pxyup_chart_container'],\n      tag: 'div',\n      children: [\n        chartsNode,\n        axisContainer,\n        previewContainer,\n        toolTipNode,\n        controlsNode,\n        {\n          tag: 'div',\n          classList: ['night_mode_control'],\n          skip: options.withoutNightMode,\n          children: [nightModeControl],\n        },\n      ],\n    });\n    return new PxyUpChart(\n      id++,\n      rootNode.appendChild(basicNode) as HTMLElement,\n      chartsNode,\n      previewNode,\n      toolTipNode as HTMLElement,\n      toolTipDateNode as HTMLElement,\n      controlsNode as HTMLElement,\n      nightModeControl as HTMLElement,\n      axisContainer as HTMLElement,\n      leftPreviewContainer as HTMLElement,\n      rightPreviewContainer as HTMLElement,\n      centerPreviewContainer as HTMLElement,\n      leftResizeControl as HTMLElement,\n      rightResizeControl as HTMLElement,\n      previewControlContainer as HTMLElement,\n      dataset,\n      options,\n    );\n  };\n}\n","import { Chart, chartsGenerator } from './charts';\n\nconst generator = chartsGenerator(document.querySelector('.draw_engine'));\n\nfetch('./chart_data.json')\n  .then(res => res.json())\n  .then(dataSets => {\n    dataSets.forEach((dataset: any) => {\n      generator(dataset as Chart);\n    });\n  });\n"],"names":["computedIntlDateArr","long","short","computedOldDateArr","isIntl","window","Intl","IntlLong","DateTimeFormat","weekday","month","day","IntlShort","setStyleBatch","node","styles","computedStyle","Object","keys","map","key","join","style","cssText","getSize","container","defaultValue","size","height","width","getRelativeOffset","targetCoords","parentCoords","getMinMax","arr","minMax","min","Number","POSITIVE_INFINITY","max","NEGATIVE_INFINITY","reduce","prev","curr","Math","Type","generatorDate","unix","withWeekday","format","Date","toLocaleString","undefined","getShortDateByUnix","getPathByPoints","points","point","index","x","y","removeAllChild","firstChild","removeChild","createTextNode","text","document","addNodeListener","listeners","forEach","event","Array","isArray","callback","addEventListener","removeNodeListener","removeEventListener","setNodeAttrs","attrs","setAttribute","getCoordsX","chartsWidth","spacingLeft","spacingRight","indexElem","count","getCoordsY","chartsHeight","spacingTop","spacingBtn","maxValue","minValue","value","relativeIndexByOffset","offsetX","fullWidth","round","DEFAULT_SPACING_RIGHT","DEFAULT_SPACING_LEFT","DEFAULT_SPACING_BTM","DEFAULT_PREVIEW_SPACING","id","charts_svg","preview_svg","toolTip","toolTipDate","controlsContainer","nightModeControl","axisContainer","leftPreviewControl","rightPreviewControl","centerPreviewControl","leftResizeControl","rightResizeControl","previewControlContainer","dataset","options","this","e","stopPropagation","_this","toggleNightMode","toggleColumnAnimationFrame","cancelAnimationFrame","requestAnimationFrame","removePoints","target","getAttribute","body","parentNode","toggleColumnVisible","isResizeActive","isDragActive","activeResize","hideHoverLineAndPoints","preventDefault","resizeAnimationFrame","doResize","dragAnimationFrame","onPreviewControlClick","verticleLine","classList","add","cordY","clientY","positions","top","toElement","cursorX","clientX","touches","left","sliceSize","sliceEndIndex","sliceStartIndex","offsetIndexLeft","floor","previewWidth","countElements","drawPreviewControls","removeAxisXCharts","draw","mouseMoveAnimationFrame","cordX","offsetY","x1","x2","closestIndex_1","findClosesIndexOfPoint","columnsVisible","filter","color","colors","currentSlicePoint","date","showPoints","showTooltip","mouseenter","onMouseEnter","mouseleave","onMouseLeave","mousemove","onMouseMove","mousedown","onDragStart","dragstart","preventDrag","mouseup","onDragEnd","touchstart","touchend","onMouseEnterPreview","onDrag","onResize","touchmove","onMouseUp","onToolTipLeave","onResizeEndLeft","onResizeStartLeft","click","stopProp","onResizeEndRight","onResizeStartRight","maxWidth","names","columns","column","keyOfColumn","shift","columnDatasets","length","horizontSteps","generateSvgElement","y1","y2","appendChild","addMouseListener","withoutAxisLabel","padding-left","padding-right","withoutPreview","previewHeight","drawPreview","withoutControls","generateControls","withoutNightMode","addNightModeListener","PxyUpChart","onNightModeClick","checkBoxControl","generateNode","tag","children","textValue","onCheckBoxClick","setColorCheckboxByKey","SVG_CHARTS_LISTENERS","DOCUMENT_LISTENERS","TOOLTIP_LISTENERS","withRemove","resetTimer","querySelectorAll","item","CENTRAL_CONTROL_LISTENERS","PREVIEW_CHART_LISTENERS","LEFT_RESIZE_CONTROL_LISTENERS","RIGHT_RESIZE_CONTROL_LISTENERS","remove","display","isRight","offsetIndex","circle","cx","cy","stroke","r","el","leftPosition","stylesTooltip","right","childContainer","querySelector","middleIndex","rightIndex","leftIndex","findClosestIndexPointX","path","checkbox","border-color","background-color","removePathByKey","refresh","animationTimer","clearTimeout","setTimeout","withEvents","leftControlTranslate","rightControlTranslate","transform","centralWidth","ceil","abs","withAnimation","withXAxis","setSupportsLines","drawCurrentSlice","labelCount","mustGeneratedLabels","deltaDays","DEFAULT_DAY_COUNT","generateLabel","i","X","realMinValue","currentPath","slice","fill","d","drawAxisX","values","push","minValueGlobal","maxValueGlobal","prepend","step","stepsArr","drawSteps","removeSteps","night_mod","groupSteps","stepsElements","line","groupStepsEl","_position","getBoundingClientRect","type","childs","element","createElementNS","skip","rootNode","createElement","setAttributeNS","child","generator","chartsNode","chartsContainer","previewNode","previewContainer","leftPreviewContainer","centerPreviewContainer","rightPreviewContainer","toolTipDateNode","toolTipNode","controlsNode","basicNode","fetch","then","res","json","dataSets"],"mappings":"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"}