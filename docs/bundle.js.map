{"version":3,"file":"bundle.js","sources":["../src/utils/misc.ts","../src/interfaces/chart.ts","../src/charts/chart.ts","../src/charts/generator.ts","../src/index.ts"],"sourcesContent":["import { Container, MinMax, Point, RectangleOptions } from '../interfaces/chart';\n\nconst withDayOptions = {\n  weekday: 'short',\n  month: 'short',\n  day: 'numeric',\n};\n\nconst withoutDayOptions = {\n  month: 'short',\n  day: 'numeric',\n};\n\nconst computedIntlDateArr = {\n  long: {},\n  short: {},\n} as { long: { [key: number]: any }; short: { [key: number]: any } };\n\nconst computedOldDateArr = {} as { [key: number]: Date };\nconst isIntl = !!(window as any).Intl;\nconst IntlLong = isIntl && new Intl.DateTimeFormat('en-US', withDayOptions);\nconst IntlShort = isIntl && new Intl.DateTimeFormat('en-US', withoutDayOptions);\n\nexport function setStyleBatch(node: HTMLElement | SVGElement, styles: { [key: string]: string }) {\n  const computedStyle = Object.keys(styles).reduce(\n    (prev, cur) => prev + `${cur}: ${styles[cur]};`,\n    '',\n  );\n  node.style.cssText = computedStyle;\n}\n\nexport function getSize(container: Container, defaultValue?: any): RectangleOptions {\n  if (container && container.size) {\n    return {\n      height: container.size.height,\n      width: container.size.width,\n    };\n  }\n  return defaultValue;\n}\n\nexport function getRelativeOffset(targetCoords: number, parentCoords: number): number {\n  return targetCoords - parentCoords;\n}\n\nexport function findClosestIndexPointX(arr: Array<Point>, value: number): number {\n  let rightIndex = 0;\n  let leftIndex = arr.length - 1;\n  let middleIndex;\n  while (leftIndex - rightIndex > 1) {\n    middleIndex = ((rightIndex + leftIndex) / 2) | 0;\n    if (value < arr[middleIndex].x) {\n      leftIndex = middleIndex;\n    } else {\n      if (value > arr[middleIndex].x) {\n        rightIndex = middleIndex;\n      } else {\n        return middleIndex;\n      }\n    }\n  }\n  if (value - (arr[rightIndex].x as number) <= (arr[leftIndex].x as number) - value) {\n    return rightIndex;\n  }\n  return leftIndex;\n}\n\nexport function getMinMax(arr: Array<number>): MinMax {\n  const minMax = {\n    min: Number.POSITIVE_INFINITY,\n    max: Number.NEGATIVE_INFINITY,\n  };\n  return arr.reduce((prev, curr) => {\n    prev['min'] = Math.min(prev.min, curr);\n    prev['max'] = Math.max(prev.max, curr);\n    return prev;\n  }, minMax);\n}\n\nconst createGetterForDate = () => {\n  if (isIntl) {\n    return (unix: number, withWeekday = false): string => {\n      if (withWeekday) {\n        if (!computedIntlDateArr.long[unix]) {\n          computedIntlDateArr.long[unix] = IntlLong.format(unix);\n        }\n        return computedIntlDateArr.long[unix];\n      }\n      if (!computedIntlDateArr.short[unix]) {\n        computedIntlDateArr.short[unix] = IntlShort.format(unix);\n      }\n      return computedIntlDateArr.short[unix];\n    };\n  }\n  return (unix: number, withWeekday = false): string => {\n    if (!computedOldDateArr[unix]) {\n      computedOldDateArr[unix] = new Date(unix);\n    }\n    return computedOldDateArr[unix].toLocaleString('en-us', {\n      weekday: withWeekday ? 'short' : undefined,\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n};\n\nconst generatorDate = createGetterForDate();\n\nexport function getShortDateByUnix(unix: number, withWeekday = false): string {\n  return generatorDate(unix, withWeekday);\n}\n\nexport function getPathByPoints(points: Array<Point>): string {\n  return points.reduce((prev, point, index) => {\n    if (index === 0) {\n      return prev + `M ${point.x} ${point.y}`;\n    }\n    return prev + ` L ${point.x} ${point.y}`;\n  }, '');\n}\n\nexport function changePathOnElement(el: SVGPathElement, path: string) {\n  el.setAttribute('d', path);\n}\n\nexport function removeAllChild(node: HTMLElement) {\n  while (node.firstChild) {\n    node.removeChild(node.firstChild);\n  }\n}\n\nexport function addNodeListener(\n  node: HTMLElement | Document | SVGElement,\n  listeners: { [key: string]: any | Array<any> },\n) {\n  Object.keys(listeners).forEach(event => {\n    if (!Array.isArray(listeners[event])) {\n      node.addEventListener(event, listeners[event]);\n      return;\n    }\n    listeners[event].forEach((callback: any) => {\n      node.addEventListener(event, callback);\n    });\n  });\n}\n\nexport function removeNodeListener(\n  node: HTMLElement | Document | SVGElement,\n  listeners: { [key: string]: any | Array<any> },\n) {\n  Object.keys(listeners).forEach(event => {\n    if (!Array.isArray(listeners[event])) {\n      node.removeEventListener(event, listeners[event]);\n      return;\n    }\n    listeners[event].forEach((callback: any) => {\n      node.removeEventListener(event, callback);\n    });\n  });\n}\n\nexport function setNodeAttrs(\n  node: HTMLElement | SVGElement | Element,\n  attrs: { [key: string]: string },\n) {\n  Object.keys(attrs).forEach(key => {\n    node.setAttribute(key, attrs[key]);\n  });\n}\n\nexport function getCoordsX(\n  chartsWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  indexElem: number,\n  count: number,\n): number {\n  if (count === 1) {\n    return spacingLeft + (chartsWidth - spacingLeft - spacingRight) / 2;\n  }\n  return spacingLeft + ((chartsWidth - spacingLeft - spacingRight) / (count - 1)) * indexElem;\n}\n\nexport function getCoordsY(\n  chartsHeight: number,\n  spacingTop: number,\n  spacingBtn: number,\n  maxValue: number,\n  minValue: number,\n  value: number,\n): number {\n  if (value === maxValue) {\n    return spacingTop;\n  }\n  if (value === minValue) {\n    return chartsHeight - spacingBtn;\n  }\n  if (minValue === maxValue) {\n    return chartsHeight - spacingBtn - (chartsHeight - spacingTop - spacingBtn) / 2;\n  }\n\n  return (\n    chartsHeight -\n    spacingBtn -\n    (chartsHeight - spacingTop - spacingBtn) * ((value - minValue) / (maxValue - minValue))\n  );\n}\n\nexport function relativeIndexByOffset(\n  offsetX: number,\n  fullWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  count: number,\n): number {\n  if (offsetX <= spacingLeft) {\n    return 0;\n  }\n\n  if (offsetX >= fullWidth - spacingRight) {\n    return count - 1;\n  }\n\n  return Math.min(\n    count - 1,\n    Math.round(((offsetX - spacingLeft) / (fullWidth - spacingLeft - spacingRight)) * (count - 1)),\n  );\n}\n\nexport function getLeftTransitionByIndex(\n  leftIndex: number,\n  fullWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  count: number,\n): number {\n  return -(\n    fullWidth -\n    (leftIndex / (count - 1)) * (fullWidth - spacingLeft - spacingRight) -\n    spacingRight\n  );\n}\n\nexport function getRightTransitionByIndex(\n  rightIndex: number,\n  fullWidth: number,\n  spacingLeft: number,\n  spacingRight: number,\n  count: number,\n): number {\n  return (rightIndex / (count - 1)) * (fullWidth - spacingLeft - spacingRight) + spacingLeft;\n}\n","export interface Chart {\n  columns: Array<Column>;\n  types: Types;\n  colors: { [key: string]: string };\n  names: { [key: string]: string };\n}\n\nexport interface LinePoints {\n  x1: number | string;\n  x2: number | string;\n  y1: number | string;\n  y2: number | string;\n}\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport interface PointWithColor extends Point {\n  color: string;\n}\n\nexport interface PointWithValue extends Point {\n  value: number;\n  date: number;\n}\n\nexport interface PointWithValueAndColor extends Point {\n  value: number;\n  color: string;\n  date: number;\n  key?: string;\n}\n\nexport interface ChartOptions {\n  withoutPreview?: boolean;\n  withoutControls?: boolean;\n  withoutNightMode?: boolean;\n  withoutAxisLabel?: boolean;\n  chartsContainer?: Container;\n  previewContainer?: Container;\n  horizontSteps?: number;\n}\n\nexport interface Container {\n  size: RectangleOptions;\n}\n\nexport interface RectangleOptions {\n  width: string | number;\n  height: string | number;\n}\n\nexport type Column = [String, ...Array<number>];\n\nexport enum Type {\n  Line = 'line',\n  X = 'x',\n}\n\nexport type Types = { [key: string]: Type };\n\nexport interface MinMax {\n  min: number;\n  max: number;\n}\n","import {\n  Chart,\n  ChartOptions,\n  Point,\n  PointWithColor,\n  PointWithValue,\n  PointWithValueAndColor,\n  Type,\n} from '../interfaces/chart';\nimport {\n  addNodeListener,\n  changePathOnElement,\n  findClosestIndexPointX,\n  getCoordsX,\n  getCoordsY,\n  getLeftTransitionByIndex,\n  getMinMax,\n  getPathByPoints,\n  getRelativeOffset,\n  getRightTransitionByIndex,\n  getShortDateByUnix,\n  relativeIndexByOffset,\n  removeAllChild,\n  removeNodeListener,\n  setNodeAttrs,\n  setStyleBatch,\n} from '../utils/misc';\nimport { generateNode, generateSvgElement } from './generator';\n\n// constant number\nconst POINT_RADIUS = 5;\nconst MIN_TOOLTIP_WIDTH = 90;\nconst DEFAULT_HOR_STEPS = 6;\nconst DEFAULT_SPACING_RIGHT = 30;\nconst DEFAULT_SPACING_LEFT = 30;\nconst DEFAULT_SPACING_PREVIEW = 10;\nconst DEFAULT_SPACING_TOP = 10;\nconst DEFAULT_SPACING_BTM = 10;\nconst DEFAULT_SPACING_TOP_PREVIEW = 5;\nconst DEFAULT_SPACING_BTM_PREVIEW = 5;\nconst DEFAULT_SPACING = DEFAULT_SPACING_RIGHT + DEFAULT_SPACING_LEFT;\nconst DEFAULT_PREVIEW_SPACING = 10;\nconst DEFAULT_SLICE = 19; // Programming + 1\nconst SLICE_NUMBER = 5.5;\nconst DEFAULT_DAY_COUNT = 6;\n\n// ClassNames\nconst classNameStepLine = 'line_step';\nconst verticleLineClass = 'verticle';\nconst classNameStepTitle = 'text_step';\n\nexport class PxyUpChart {\n  private isDragActive = false;\n  private isResizeActive = false;\n  private activeResize: boolean | null = null;\n  private resizeAnimationFrame: number | null = null;\n  private dragAnimationFrame: number | null = null;\n  private mouseMoveAnimationFrame: number | null = null;\n  private toggleColumnAnimationFrame: number | null = null;\n\n  private maxValue: number;\n  private minValue: number;\n\n  private maxValueGlobal: number;\n  private minValueGlobal: number;\n\n  private height: number;\n  private width: number;\n\n  private previewWidth: number;\n  private previewHeight: number;\n\n  private night_mod = false;\n\n  private horizontSteps: number;\n\n  private sliceStartIndex = 0;\n\n  private sliceEndIndex = 0;\n\n  private currentSlicePoint: { [key: string]: Array<PointWithValue> } = {};\n\n  private verticleLine: SVGElement;\n\n  private columnsVisible: { [key: string]: boolean } = {};\n\n  private columnDatasets: { [key: string]: Array<number> } = {};\n\n  private countElements: number;\n\n  private _position: ClientRect;\n\n  private animationTimer: number | null = null;\n\n  constructor(\n    private id: number,\n    private node: HTMLElement,\n    private charts_svg: HTMLElement | SVGElement,\n    private preview_svg: HTMLElement | SVGElement,\n    private toolTip: HTMLElement,\n    private toolTipDate: HTMLElement,\n    private controlsContainer: HTMLElement,\n    private nightModeControl: HTMLElement,\n    private axisContainer: HTMLElement,\n    private leftPreviewControl: HTMLElement,\n    private rightPreviewControl: HTMLElement,\n    private centerPreviewControl: HTMLElement,\n    private leftResizeControl: HTMLElement,\n    private rightResizeControl: HTMLElement,\n    private previewControlContainer: HTMLElement,\n    private dataset: Chart,\n    private options: ChartOptions,\n  ) {\n    // Hi Telegram Team!\n    // I tried charts with get min time for Scripting/Rendering/Painting in Chrome Dev Tools and Application size\n    // And i tried do it scalable, animation of axis X with point on chart > 1000, will be slow\n    // Because you every time need hide/show/translate more > 994 elements, i wanna scalable solution(And it is looks ugly when you fast  repeat left to right)\n    // That reason why i tried optimize all of them appendChild, remove, setStyle and more another things\n    // Thank you for challenge!\n    this.height = +this.charts_svg.getAttribute('height');\n    this.width = +this.charts_svg.getAttribute('width');\n    // Set tooltip max width\n    this.toolTip.style.maxWidth = `${this.width - 2 * DEFAULT_SPACING}px`;\n\n    Object.keys(this.dataset.names).forEach(key => {\n      this.columnsVisible[key] = true;\n    });\n    // Create dataset help and set first slice size and indexes\n    this.dataset.columns.forEach(column => {\n      const keyOfColumn = column.shift() as any;\n      this.columnDatasets[keyOfColumn] = column as any;\n      if (!this.countElements) {\n        this.countElements = this.columnDatasets[keyOfColumn].length;\n      }\n      if (!this.sliceStartIndex) {\n        const sliceSize = Math.max(DEFAULT_SLICE, (this.countElements / SLICE_NUMBER) | 0);\n        this.sliceStartIndex = Math.max(this.columnDatasets[keyOfColumn].length - sliceSize - 1, 0);\n      }\n      if (!this.sliceEndIndex) {\n        this.sliceEndIndex = this.columnDatasets[keyOfColumn].length - 1;\n      }\n    });\n\n    this.horizontSteps = (options && options.horizontSteps) || DEFAULT_HOR_STEPS;\n\n    this.verticleLine = generateSvgElement('line', [verticleLineClass], {\n      x1: 0 as any,\n      x2: 0 as any,\n      y1: 0 as any,\n      y2: (this.height - DEFAULT_SPACING_BTM) as any,\n    });\n\n    this.charts_svg.appendChild(this.verticleLine);\n\n    this.addMouseListener();\n\n    if (!options.withoutAxisLabel) {\n      setStyleBatch(this.axisContainer, {\n        top: `${this.height - DEFAULT_SPACING_BTM}px`,\n        width: `${this.width - (DEFAULT_SPACING_LEFT + DEFAULT_SPACING_RIGHT) / 2}px`,\n        'padding-left': `${(DEFAULT_SPACING_LEFT / 3) * 2}px`,\n        'padding-right': `${DEFAULT_SPACING_RIGHT / 2}px`,\n      });\n    }\n    this.draw();\n\n    if (!options.withoutPreview) {\n      this.previewHeight = +this.preview_svg.getAttribute('height');\n      this.previewWidth = +this.preview_svg.getAttribute('width');\n      this.drawPreview();\n      this.drawPreviewControls(true);\n    }\n\n    if (!options.withoutControls) {\n      this.generateControls();\n    }\n\n    if (!options.withoutNightMode) {\n      this.addNightModeListener();\n    }\n  }\n\n  addNightModeListener() {\n    this.nightModeControl.addEventListener('click', this.onNightModeClick);\n  }\n\n  generateControls() {\n    this.controlsContainer.style.width = `${this.width}px`;\n    Object.keys(this.columnsVisible).forEach(key => {\n      const checkBoxControl = generateNode({\n        tag: 'div',\n        classList: ['checkbox_container'],\n        attrs: {\n          key: key,\n        },\n        children: [\n          {\n            tag: 'div',\n            classList: ['round'],\n          },\n          {\n            tag: 'div',\n            classList: ['label'],\n            textValue: this.dataset.names[key],\n          },\n        ],\n      });\n      this.controlsContainer.appendChild(checkBoxControl);\n      checkBoxControl.addEventListener('click', this.onCheckBoxClick, false);\n      this.setColorCheckboxByKey(key);\n    });\n  }\n\n  doPreventDefault = (e: MouseEvent) => {\n    e.stopPropagation();\n  };\n\n  onNightModeClick = () => {\n    this.toggleNightMode();\n  };\n\n  onCheckBoxClick = (e: MouseEvent) => {\n    if (this.toggleColumnAnimationFrame) {\n      cancelAnimationFrame(this.toggleColumnAnimationFrame);\n    }\n    this.toggleColumnAnimationFrame = requestAnimationFrame(() => {\n      this.removePoints();\n      let target = e.target as HTMLElement;\n      let key = target.getAttribute('key');\n      while (!key || target === document.body) {\n        target = target.parentNode as HTMLElement;\n        key = target.getAttribute('key');\n      }\n      if (key) {\n        this.toggleColumnVisible(key);\n      }\n    });\n  };\n\n  addMouseListener() {\n    addNodeListener(this.charts_svg, this.SVG_CHARTS_LISTENERS);\n    addNodeListener(document, this.DOCUMENT_LISTENERS);\n    addNodeListener(this.toolTip, this.TOOLTIP_LISTENERS);\n  }\n\n  destroy(withRemove = true) {\n    this.resetTimer();\n    removeNodeListener(this.charts_svg, this.SVG_CHARTS_LISTENERS);\n    removeNodeListener(document, this.DOCUMENT_LISTENERS);\n    removeNodeListener(this.toolTip, this.TOOLTIP_LISTENERS);\n\n    if (!this.options.withoutControls) {\n      this.controlsContainer.querySelectorAll('.round').forEach(item => {\n        item.removeEventListener('click', this.onCheckBoxClick);\n      });\n    }\n\n    if (!this.options.withoutNightMode) {\n      this.nightModeControl.removeEventListener('click', this.onNightModeClick);\n    }\n    if (!this.options.withoutPreview) {\n      removeNodeListener(this.centerPreviewControl, this.CENTRAL_CONTROL_LISTENERS);\n\n      removeNodeListener(this.previewControlContainer, this.PREVIEW_CHART_LISTENERS);\n\n      removeNodeListener(this.leftResizeControl, this.LEFT_RESIZE_CONTROL_LISTENERS);\n\n      removeNodeListener(this.rightResizeControl, this.RIGHT_RESIZE_CONTROL_LISTENERS);\n\n      removeNodeListener(this.leftPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n\n      removeNodeListener(this.rightPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n    }\n    if (withRemove) {\n      this.node.remove();\n    }\n  }\n\n  onMouseUp = (e: any) => {\n    this.isResizeActive = false;\n    this.isDragActive = false;\n    this.activeResize = null;\n  };\n\n  onResizeStartRight = (e: MouseEvent) => {\n    e.stopPropagation();\n    this.isDragActive = false;\n    this.hideHoverLineAndPoints();\n    this.isResizeActive = true;\n    this.activeResize = true;\n  };\n\n  onResizeStartLeft = (e: MouseEvent) => {\n    e.stopPropagation();\n    this.isDragActive = false;\n    this.hideHoverLineAndPoints();\n    this.isResizeActive = true;\n    this.activeResize = false;\n  };\n\n  stopProp = (e: MouseEvent) => {\n    e.stopPropagation();\n  };\n\n  onResizeEndLeft = () => {\n    this.isResizeActive = false;\n    this.activeResize = null;\n  };\n\n  onResizeEndRight = () => {\n    this.isResizeActive = false;\n    this.activeResize = null;\n  };\n\n  onResize = (e: MouseEvent | TouchEvent) => {\n    e.preventDefault();\n    if (this.isResizeActive) {\n      if (this.resizeAnimationFrame) {\n        cancelAnimationFrame(this.resizeAnimationFrame);\n      }\n      this.resizeAnimationFrame = requestAnimationFrame(() => this.doResize(this.activeResize, e));\n    }\n  };\n\n  onDragStart = (e: MouseEvent | TouchEvent) => {\n    e.stopPropagation();\n    this.hideHoverLineAndPoints();\n    this.isDragActive = true;\n  };\n\n  onDragEnd = (e: MouseEvent | TouchEvent) => {\n    this.isDragActive = false;\n  };\n\n  onDrag = (e: MouseEvent | TouchEvent) => {\n    e.preventDefault();\n    if (this.isDragActive) {\n      if (this.dragAnimationFrame) {\n        cancelAnimationFrame(this.dragAnimationFrame);\n      }\n      this.dragAnimationFrame = requestAnimationFrame(() => this.onPreviewControlClick(e));\n    }\n  };\n\n  onMouseEnter = () => {\n    this.verticleLine.classList.add('show');\n  };\n\n  onMouseLeave = (e: MouseEvent) => {\n    const cordY = getRelativeOffset(e.clientY, this.positions.top);\n    if (e.toElement !== this.toolTip || cordY >= this.height - 100) {\n      this.hideHoverLineAndPoints();\n    }\n  };\n\n  onToolTipLeave = () => {\n    this.hideHoverLineAndPoints();\n  };\n\n  hideHoverLineAndPoints() {\n    this.removePoints();\n    this.verticleLine.classList.remove('show');\n    this.toolTip.style.display = 'none';\n  }\n\n  doResize(isRight: boolean, e: MouseEvent | TouchEvent) {\n    if (isRight === null) {\n      return;\n    }\n    const cursorX = getRelativeOffset(\n      (e as MouseEvent).clientX || (e as TouchEvent).touches[0].clientX,\n      this.positions.left,\n    );\n    const offsetIndex = relativeIndexByOffset(\n      cursorX,\n      this.previewWidth,\n      DEFAULT_PREVIEW_SPACING,\n      DEFAULT_PREVIEW_SPACING,\n      this.countElements,\n    );\n    if (!isRight) {\n      this.sliceStartIndex = offsetIndex;\n      if (this.sliceStartIndex >= this.sliceEndIndex) {\n        this.sliceStartIndex = this.sliceEndIndex - 1;\n      }\n    } else {\n      this.sliceEndIndex = offsetIndex;\n\n      if (this.sliceEndIndex <= this.sliceStartIndex) {\n        this.sliceEndIndex = this.sliceStartIndex + 1;\n      }\n    }\n\n    this.drawPreviewControls();\n    this.removeAxisXCharts();\n    this.draw();\n  }\n\n  onPreviewControlClick = (e: MouseEvent | TouchEvent) => {\n    const cursorX = getRelativeOffset(\n      (e as MouseEvent).clientX || (e as TouchEvent).touches[0].clientX,\n      this.positions.left,\n    );\n    const sliceSize = this.sliceEndIndex - this.sliceStartIndex;\n    const offsetIndexLeft = (\n      relativeIndexByOffset(\n        cursorX,\n        this.previewWidth,\n        DEFAULT_PREVIEW_SPACING,\n        DEFAULT_PREVIEW_SPACING,\n        this.countElements,\n      ) -\n        sliceSize / 2\n    ) | 0\n    this.sliceStartIndex = Math.max(offsetIndexLeft, 0);\n    this.sliceEndIndex = Math.min(this.sliceStartIndex + sliceSize, this.countElements - 1);\n\n    if (this.sliceEndIndex === this.countElements - 1) {\n      this.sliceStartIndex = Math.max(0, this.sliceEndIndex - sliceSize);\n    }\n    if (this.sliceStartIndex === 0) {\n      this.sliceEndIndex = Math.min(this.sliceStartIndex + sliceSize, this.countElements - 1);\n    }\n\n    this.drawPreviewControls();\n    this.removeAxisXCharts();\n    this.draw();\n  };\n\n  onMouseMove = (e: MouseEvent) => {\n    if (this.mouseMoveAnimationFrame) {\n      cancelAnimationFrame(this.mouseMoveAnimationFrame);\n    }\n    this.mouseMoveAnimationFrame = requestAnimationFrame(() => {\n      const cordX = e.offsetX;\n      const cordY = e.offsetY;\n      if (\n        cordX > DEFAULT_SPACING_LEFT / 2 &&\n        cordX < this.width - DEFAULT_SPACING_RIGHT / 2 &&\n        cordY < this.height - DEFAULT_SPACING_BTM\n      ) {\n        setNodeAttrs(this.verticleLine, {\n          x1: cordX as any,\n          x2: cordX as any,\n        });\n        const closestIndex = this.findClosesIndexOfPoint(cordX);\n        if (closestIndex === null) {\n          return;\n        }\n        const points = Object.keys(this.columnsVisible)\n          .filter(key => this.columnsVisible[key])\n          .map(key => ({\n            key: key,\n            color: this.dataset.colors[key],\n            x: this.currentSlicePoint[key][closestIndex].x,\n            y: this.currentSlicePoint[key][closestIndex].y,\n            value: this.currentSlicePoint[key][closestIndex].value,\n            date: this.currentSlicePoint[key][closestIndex].date,\n          }));\n        this.showPoints(points);\n        this.showTooltip(points, { x: cordX, y: cordY });\n      }\n    });\n  };\n\n  showPoints(arr: Array<PointWithColor> = []) {\n    this.removePoints();\n    arr.forEach(point => {\n      const circle = generateSvgElement('circle', null, {\n        cx: point.x as any,\n        cy: point.y as any,\n        stroke: point.color,\n        r: POINT_RADIUS as any,\n      });\n      this.charts_svg.appendChild(circle);\n    });\n  }\n\n  removePoints() {\n    this.charts_svg.querySelectorAll('circle').forEach(el => el.remove());\n  }\n\n  showTooltip(arr: Array<PointWithValueAndColor>, point: Point) {\n    const leftPosition = (point.x as number) + DEFAULT_SPACING_LEFT;\n    const topPosition = (point.y as number) + DEFAULT_SPACING_TOP;\n    const stylesTooltip = {\n      display: 'flex',\n      right: 'unset',\n      left: `${leftPosition}px`,\n      top: `${topPosition}px`,\n    };\n    const childContainer = this.toolTip.querySelector('.items') as HTMLElement;\n\n    removeAllChild(childContainer);\n\n    this.toolTipDate.textContent = getShortDateByUnix(arr[0].date, true);\n    arr.forEach(item =>\n      childContainer.appendChild(\n        generateNode({\n          tag: 'div',\n          attrs: {\n            style: `color: ${item.color}`,\n          },\n          children: [\n            {\n              tag: 'span',\n              classList: ['value'],\n              textValue: item.value as any,\n            },\n            {\n              tag: 'span',\n              classList: ['item'],\n              textValue: this.dataset.names[item.key],\n            },\n          ],\n        }),\n      ),\n    );\n\n    if (leftPosition > this.width - MIN_TOOLTIP_WIDTH - DEFAULT_SPACING_RIGHT) {\n      stylesTooltip.right = `${Math.min(\n        MIN_TOOLTIP_WIDTH,\n        this.width - leftPosition + DEFAULT_SPACING_LEFT + DEFAULT_SPACING_RIGHT,\n      )}px`;\n      stylesTooltip.left = 'unset';\n    }\n\n    setStyleBatch(this.toolTip, stylesTooltip);\n  }\n\n  findClosesIndexOfPoint(cordX: number): number | null {\n    const arr = Object.keys(this.columnsVisible).filter(key => this.columnsVisible[key]);\n    if (!arr.length) {\n      return null;\n    }\n    return findClosestIndexPointX(this.currentSlicePoint[arr[0]], cordX);\n  }\n\n  removePathByKey(key: string) {\n    const path = this.charts_svg.querySelector(`path#pxyup_path_${this.id}_${key}`);\n    if (path) {\n      path.remove();\n    }\n  }\n\n  setColorCheckboxByKey(key: string) {\n    const color = this.dataset.colors[key];\n    const checkbox = this.controlsContainer.querySelector(\n      `.checkbox_container[key=\"${key}\"] .round`,\n    ) as HTMLElement;\n    if (!this.columnsVisible[key]) {\n      checkbox.classList.add('not_active');\n    } else {\n      checkbox.classList.remove('not_active');\n      setStyleBatch(checkbox, {\n        'border-color': color,\n        'background-color': color,\n      });\n    }\n  }\n\n  toggleColumnVisible(key: string) {\n    this.columnsVisible[key] = !this.columnsVisible[key];\n    this.setColorCheckboxByKey(key);\n\n    if (!this.columnsVisible[key]) {\n      this.removePathByKey(key);\n    }\n    this.node.classList.add('animation');\n    if (!this.options.withoutPreview) {\n      this.drawPreview(false);\n    }\n    this.refresh(false, false);\n    if (this.animationTimer) {\n      clearTimeout(this.animationTimer);\n    }\n    this.animationTimer = window.setTimeout(() => {\n      this.node.classList.remove('animation');\n    }, 150);\n  }\n\n  drawPreviewControls(withEvents: boolean = false) {\n    const leftControlTranslate = getLeftTransitionByIndex(\n      this.sliceStartIndex,\n      this.previewWidth,\n      DEFAULT_PREVIEW_SPACING,\n      DEFAULT_PREVIEW_SPACING,\n      this.countElements,\n    );\n    const rightControlTranslate = getRightTransitionByIndex(\n      this.sliceEndIndex,\n      this.previewWidth,\n      DEFAULT_PREVIEW_SPACING,\n      DEFAULT_PREVIEW_SPACING,\n      this.countElements,\n    );\n    setStyleBatch(this.leftPreviewControl, {\n      transform: `translateX(${leftControlTranslate}px)`,\n    });\n    setStyleBatch(this.rightPreviewControl, {\n      transform: `translateX(${rightControlTranslate}px)`,\n    });\n    const centralWidth = Math.ceil(\n      Math.abs(\n        Math.abs(this.previewWidth - rightControlTranslate) - Math.abs(leftControlTranslate),\n      ),\n    );\n    setStyleBatch(this.centerPreviewControl, {\n      width: `${centralWidth}px`,\n      transform: `translateX(${Math.round(rightControlTranslate - centralWidth)}px)`,\n    });\n\n    if (withEvents) {\n      addNodeListener(this.leftPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n\n      addNodeListener(this.rightPreviewControl, {\n        click: this.onPreviewControlClick,\n      });\n\n      // PC\n\n      addNodeListener(this.centerPreviewControl, this.CENTRAL_CONTROL_LISTENERS);\n\n      addNodeListener(this.previewControlContainer, this.PREVIEW_CHART_LISTENERS);\n\n      addNodeListener(this.leftResizeControl, this.LEFT_RESIZE_CONTROL_LISTENERS);\n\n      addNodeListener(this.rightResizeControl, this.RIGHT_RESIZE_CONTROL_LISTENERS);\n    }\n  }\n\n  draw(withAnimation = true, withXAxis = true) {\n    this.setSupportsLines();\n    this.drawCurrentSlice(withAnimation, withXAxis);\n  }\n\n  refresh(withAnimation = true, withXAxis = true) {\n    this.resetTimer();\n    this.draw(withAnimation, withXAxis);\n  }\n\n  drawAxisX() {\n    removeAllChild(this.axisContainer);\n    const sliceSize = this.sliceEndIndex - this.sliceStartIndex + 1;\n    let labelCount = Math.min(DEFAULT_DAY_COUNT, sliceSize + 1);\n    const mustGeneratedLabels = labelCount;\n    const deltaDays =\n      sliceSize <= DEFAULT_DAY_COUNT + 2 ? 1 : Math.max(sliceSize / (mustGeneratedLabels - 1), 1);\n    let index = this.sliceStartIndex;\n\n    const generateLabel = (text: string) => {\n      return generateNode({\n        tag: 'div',\n        textValue: text,\n      });\n    };\n    if (deltaDays == 1) {\n      for (let i = this.sliceStartIndex; i <= this.sliceEndIndex; i++) {\n        this.axisContainer.appendChild(\n          generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][i])),\n        );\n      }\n    } else {\n      this.axisContainer.appendChild(\n        generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][this.sliceStartIndex])),\n      );\n      index += deltaDays;\n\n      while (labelCount - 2 > 0 && index < this.sliceEndIndex - 2) {\n        this.axisContainer.appendChild(\n          generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][Math.ceil(index)])),\n        );\n        labelCount -= 1;\n        index += deltaDays;\n      }\n      this.axisContainer.appendChild(\n        generateLabel(getShortDateByUnix(this.columnDatasets[Type.X][this.sliceEndIndex])),\n      );\n    }\n  }\n\n  resetTimer() {\n    if (this.dragAnimationFrame) {\n      cancelAnimationFrame(this.dragAnimationFrame);\n      this.dragAnimationFrame = null;\n    }\n    if (this.resizeAnimationFrame) {\n      cancelAnimationFrame(this.resizeAnimationFrame);\n      this.resizeAnimationFrame = null;\n    }\n    if (this.mouseMoveAnimationFrame) {\n      cancelAnimationFrame(this.mouseMoveAnimationFrame);\n      this.mouseMoveAnimationFrame = null;\n    }\n    if (this.toggleColumnAnimationFrame) {\n      cancelAnimationFrame(this.toggleColumnAnimationFrame);\n      this.toggleColumnAnimationFrame = null;\n    }\n    if (this.animationTimer) {\n      clearTimeout(this.animationTimer);\n      this.animationTimer = null;\n    }\n  }\n\n  setRightIndexSlice(size: number) {\n    this.sliceStartIndex = size;\n    this.refresh();\n  }\n\n  setLeftIndexSlice(size: number) {\n    this.sliceEndIndex = size;\n    this.refresh();\n  }\n\n  removeAxisXCharts() {\n    const el = this.charts_svg.querySelector(`g.axis`);\n    if (el) {\n      el.remove();\n    }\n  }\n\n  drawCurrentSlice(withAnimation = true, withXAxis = true) {\n    const realMinValue = this.minValue >= 0 ? 0 : this.minValue;\n    const sliceSize = this.sliceEndIndex - this.sliceStartIndex + 1;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n\n      if (columnVisible) {\n        const currentPath = this.charts_svg.querySelector(\n          `path#${`pxyup_path_${this.id}_${key}`}`,\n        ) as SVGPathElement;\n\n        this.currentSlicePoint[key] = this.columnDatasets[key]\n          .slice(this.sliceStartIndex, this.sliceEndIndex + 1)\n          .map((point, index) => {\n            return {\n              x: getCoordsX(\n                this.width,\n                DEFAULT_SPACING_LEFT,\n                DEFAULT_SPACING_RIGHT,\n                index,\n                sliceSize,\n              ),\n              y: getCoordsY(\n                this.height,\n                DEFAULT_SPACING_TOP,\n                DEFAULT_SPACING_BTM,\n                this.maxValue,\n                realMinValue,\n                point,\n              ),\n              value: point,\n              date: this.columnDatasets[Type.X][this.sliceStartIndex + index],\n            };\n          });\n\n        if (currentPath) {\n          changePathOnElement(currentPath, getPathByPoints(this.currentSlicePoint[key]));\n          return;\n        }\n\n        const path = generateSvgElement('path', [], {\n          id: `pxyup_path_${this.id}_${key}`,\n          stroke: this.dataset.colors[key],\n          fill: 'none',\n          d: getPathByPoints(this.currentSlicePoint[key]),\n        });\n\n        this.charts_svg.appendChild(path);\n      }\n    });\n\n    if (!this.options.withoutAxisLabel && withXAxis) {\n      this.drawAxisX();\n    }\n  }\n\n  drawPreview(withAnimation = true) {\n    this.preview_svg.querySelectorAll(`path`).forEach(el => el.remove());\n    const values = [] as Array<number>;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n      if (columnVisible) {\n        values.push(...this.columnDatasets[key]);\n      }\n    });\n\n    const minMax = getMinMax(values);\n    this.minValueGlobal = minMax.min;\n    this.maxValueGlobal = minMax.max;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n      if (columnVisible) {\n        const path = generateSvgElement('path', [], {\n          id: `pxyup_path_preview_${this.id}_${key}`,\n          d: getPathByPoints(\n            this.columnDatasets[key].map((point, index) => ({\n              x: getCoordsX(\n                this.previewWidth,\n                DEFAULT_SPACING_PREVIEW,\n                DEFAULT_SPACING_PREVIEW,\n                index,\n                this.countElements,\n              ),\n              y: getCoordsY(\n                this.previewHeight,\n                DEFAULT_SPACING_TOP_PREVIEW,\n                DEFAULT_SPACING_BTM_PREVIEW,\n                this.maxValueGlobal,\n                this.minValueGlobal,\n                point,\n              ),\n            })),\n          ),\n          stroke: this.dataset.colors[key],\n          fill: 'none',\n        });\n\n        this.preview_svg.prepend(path);\n      }\n    });\n  }\n\n  setSupportsLines() {\n    const values = [] as Array<number>;\n\n    Object.keys(this.columnsVisible).forEach(key => {\n      const columnVisible = this.columnsVisible[key];\n      if (columnVisible) {\n        values.push(\n          ...this.columnDatasets[key].slice(this.sliceStartIndex, this.sliceEndIndex + 1),\n        );\n      }\n    });\n    if (values.length === 0) {\n      this.minValue = undefined;\n      this.maxValue = undefined;\n      this.removeSteps();\n      return;\n    }\n    const minMax = getMinMax(values);\n    if (this.minValue === minMax.min && this.maxValue === minMax.max) {\n      return;\n    }\n    this.minValue = minMax.min;\n    this.maxValue = minMax.max;\n    const step =\n      values.length === 0\n        ? 0\n        : Math.ceil(\n            (this.minValue > 0 ? this.maxValue : this.maxValue - this.minValue) /\n              this.horizontSteps,\n          );\n\n    const stepsArr = this.minValue > 0 ? [0] : [this.minValue];\n    for (let index = 1; index < this.horizontSteps; index++) {\n      stepsArr.push(stepsArr[0] + step * index || index);\n    }\n\n    this.drawSteps(stepsArr);\n  }\n\n  toggleNightMode() {\n    this.night_mod = !this.night_mod;\n    if (this.night_mod) {\n      this.node.classList.add('night');\n      this.nightModeControl.textContent = 'Switch to day mode';\n    } else {\n      this.node.classList.remove('night');\n      this.nightModeControl.textContent = 'Switch to night mode';\n    }\n  }\n\n  removeSteps() {\n    const groupSteps = this.charts_svg.querySelector('g.steps');\n    if (groupSteps) {\n      groupSteps.remove();\n    }\n  }\n\n  drawSteps(arr: Array<number>) {\n    this.removeSteps();\n    const realMinValue = this.minValue >= 0 ? 0 : this.minValue;\n    const stepsElements = [] as Array<SVGElement>;\n    arr.forEach((step, index) => {\n      const cordY =\n        index === 0\n          ? this.height - DEFAULT_SPACING_BTM\n          : (getCoordsY(\n              this.height,\n              DEFAULT_SPACING_TOP,\n              DEFAULT_SPACING_BTM,\n              this.maxValue,\n              realMinValue,\n              step,\n            ) as any);\n      const line = generateSvgElement('line', [classNameStepLine], {\n        x1: 0 as any,\n        x2: this.width as any,\n        y1: cordY,\n        y2: cordY,\n      });\n      const text = generateSvgElement(\n        'text',\n        [classNameStepTitle],\n        {\n          x: 0 as any,\n          y: (cordY - 5) as any,\n        },\n        [],\n        step as any,\n      );\n      stepsElements.push(line);\n      stepsElements.push(text);\n    });\n    const groupStepsEl = generateSvgElement('g', ['steps'], null, stepsElements);\n    this.charts_svg.prepend(groupStepsEl);\n  }\n\n  preventDrag = (e: DragEvent) => {\n    e.preventDefault();\n    return false;\n  };\n\n  getTranspilingDataset() {\n    return this.columnDatasets;\n  }\n\n  onMouseEnterPreview = () => {\n    this.hideHoverLineAndPoints();\n  };\n\n  private SVG_CHARTS_LISTENERS = {\n    mouseenter: this.onMouseEnter,\n    mouseleave: this.onMouseLeave,\n    mousemove: this.onMouseMove,\n  };\n\n  private CENTRAL_CONTROL_LISTENERS = {\n    mousedown: this.onDragStart,\n    dragstart: this.preventDrag,\n    mouseup: this.onDragEnd,\n    touchstart: this.onDragStart,\n    touchend: this.onDragEnd,\n  };\n\n  private PREVIEW_CHART_LISTENERS = {\n    mouseenter: this.onMouseEnterPreview,\n    mousemove: [this.onDrag, this.onResize],\n    touchmove: [this.onDrag, this.onResize],\n  };\n\n  private DOCUMENT_LISTENERS = {\n    mouseup: this.onMouseUp,\n  };\n\n  private TOOLTIP_LISTENERS = {\n    mouseleave: this.onToolTipLeave,\n  };\n\n  private LEFT_RESIZE_CONTROL_LISTENERS = {\n    mouseup: this.onResizeEndLeft,\n    dragstart: this.preventDrag,\n    mousedown: this.onResizeStartLeft,\n    touchend: this.onResizeEndLeft,\n    touchstart: this.onResizeStartLeft,\n    click: this.stopProp,\n  };\n\n  private RIGHT_RESIZE_CONTROL_LISTENERS = {\n    mouseup: this.onResizeEndRight,\n    dragstart: this.preventDrag,\n    mousedown: this.onResizeStartRight,\n    touchend: this.onResizeEndRight,\n    touchstart: this.onResizeStartRight,\n    click: this.stopProp,\n  };\n\n  get positions() {\n    if (!this._position) {\n      this._position = this.charts_svg.getBoundingClientRect();\n    }\n    return this._position;\n  }\n}\n","import { Chart, ChartOptions } from '../interfaces/chart';\nimport { getSize, setNodeAttrs } from '../utils/misc';\n\nimport { PxyUpChart } from './chart';\nimport { PxyupNode } from '../interfaces/node';\n\nlet id = 0;\n\nexport function generateSvgElement(\n  type: string,\n  classList?: Array<string>,\n  attrs?: { [key: string]: string },\n  childs?: Array<SVGElement>,\n  value?: string,\n): SVGElement {\n  const element = document.createElementNS('http://www.w3.org/2000/svg', type);\n\n  if (classList) {\n    classList.forEach(item => {\n      element.classList.add(item);\n    });\n  }\n  if (attrs) {\n    setNodeAttrs(element, attrs);\n  }\n\n  if (childs) {\n    childs.forEach(item => {\n      element.appendChild(item);\n    });\n  }\n\n  if (value !== undefined) {\n    element.appendChild(document.createTextNode(value));\n  }\n\n  return element;\n}\n\nexport function generateNode(node: PxyupNode): HTMLElement | SVGSVGElement | null {\n  if (node.skip) {\n    return null;\n  }\n\n  const rootNode =\n    node.tag === 'svg'\n      ? document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n      : document.createElement(node.tag);\n\n  if (node.textValue) {\n    rootNode.textContent = node.textValue;\n  }\n\n  if (node.classList) {\n    node.classList.forEach(item => {\n      rootNode.classList.add(item);\n    });\n  }\n\n  if (node.attrs) {\n    if (node.tag === 'svg') {\n      Object.keys(node.attrs).forEach(key => {\n        rootNode.setAttributeNS(null, key, node.attrs[key]);\n      });\n      rootNode.setAttributeNS(\n        null,\n        'viewBox',\n        `0 0 ${node.attrs['width']} ${node.attrs['height']}`,\n      );\n    } else {\n      setNodeAttrs(rootNode, node.attrs);\n    }\n  }\n\n  if (node.children) {\n    node.children.forEach((item: any) => {\n      if (!item) {\n        return;\n      }\n      if (!item.tag) {\n        rootNode.appendChild(item as HTMLHtmlElement);\n        return;\n      }\n      const child = generateNode(item as PxyupNode);\n      if (child) {\n        rootNode.appendChild(child);\n      }\n    });\n  }\n\n  return rootNode;\n}\n\nexport function chartsGenerator(\n  rootNode: HTMLElement,\n): (dataset: Chart, options?: ChartOptions) => PxyUpChart {\n  return (dataset: Chart, options: ChartOptions = {}) => {\n    const axisContainer = generateNode({\n      tag: 'div',\n      classList: ['axis_labels'],\n      skip: options.withoutAxisLabel,\n    });\n    const chartsNode = generateNode({\n      tag: 'svg',\n      classList: ['main_chart'],\n      attrs: {\n        ...getSize(options.chartsContainer, {\n          width: '400',\n          height: '400',\n        }),\n      },\n    });\n\n    const previewNode = generateNode({\n      tag: 'svg',\n      skip: options.withoutPreview,\n      classList: ['chart_preview'],\n      attrs: {\n        ...getSize(options.previewContainer, {\n          width: '400',\n          height: '60',\n        }),\n      },\n    });\n\n    const leftResizeControl = generateNode({\n      tag: 'div',\n      classList: ['resize'],\n      children: [\n        generateNode({\n          tag: 'div',\n          classList: ['caret'],\n        }),\n      ],\n    });\n\n    const rightResizeControl = generateNode({\n      tag: 'div',\n      classList: ['resize'],\n      children: [\n        generateNode({\n          tag: 'div',\n          classList: ['caret'],\n        }),\n      ],\n    });\n\n    const leftPreviewContainer = generateNode({\n      tag: 'div',\n      classList: ['control', 'left'],\n      children: [leftResizeControl],\n    });\n\n    const centerPreviewContainer = generateNode({\n      tag: 'div',\n      classList: ['control', 'center'],\n    });\n\n    const rightPreviewContainer = generateNode({\n      tag: 'div',\n      classList: ['control', 'right'],\n      children: [rightResizeControl],\n    });\n\n    const previewControlContainer = generateNode({\n      tag: 'div',\n      classList: ['preview_controls'],\n      children: [leftPreviewContainer, centerPreviewContainer, rightPreviewContainer],\n    });\n\n    const previewContainer = generateNode({\n      tag: 'div',\n      skip: options.withoutPreview,\n      classList: ['preview_container'],\n      children: [previewNode, previewControlContainer],\n    });\n\n    const toolTipDateNode = generateNode({\n      tag: 'p',\n      classList: ['date'],\n    });\n    const toolTipNode = generateNode({\n      tag: 'div',\n      classList: ['tooltip'],\n      children: [\n        toolTipDateNode,\n        {\n          tag: 'div',\n          classList: ['items'],\n        },\n      ],\n    });\n    const controlsNode = generateNode({\n      tag: 'div',\n      classList: ['controls'],\n      skip: options.withoutControls,\n    });\n    const nightModeControl = generateNode({\n      tag: 'a',\n      textValue: 'Switch to Night mode',\n    });\n    const basicNode = generateNode({\n      attrs: {\n        id: `pxyup_chart_${id}`,\n      },\n      classList: ['pxyup_chart_container'],\n      tag: 'div',\n      children: [\n        chartsNode,\n        axisContainer,\n        previewContainer,\n        toolTipNode,\n        controlsNode,\n        {\n          tag: 'div',\n          classList: ['night_mode_control'],\n          skip: options.withoutNightMode,\n          children: [nightModeControl],\n        },\n      ],\n    });\n    return new PxyUpChart(\n      id++,\n      rootNode.appendChild(basicNode) as HTMLElement,\n      chartsNode,\n      previewNode,\n      toolTipNode as HTMLElement,\n      toolTipDateNode as HTMLElement,\n      controlsNode as HTMLElement,\n      nightModeControl as HTMLElement,\n      axisContainer as HTMLElement,\n      leftPreviewContainer as HTMLElement,\n      rightPreviewContainer as HTMLElement,\n      centerPreviewContainer as HTMLElement,\n      leftResizeControl as HTMLElement,\n      rightResizeControl as HTMLElement,\n      previewControlContainer as HTMLElement,\n      dataset,\n      options,\n    );\n  };\n}\n","import { Chart, chartsGenerator } from './charts';\n\nconst generator = chartsGenerator(document.querySelector('.draw_engine'));\n\nfetch('./chart_data.json')\n  .then(res => res.json())\n  .then(dataSets => {\n    dataSets.forEach((dataset: any) => {\n      generator(dataset as Chart);\n    });\n  });\n"],"names":["computedIntlDateArr","long","short","computedOldDateArr","isIntl","window","Intl","IntlLong","DateTimeFormat","weekday","month","day","IntlShort","setStyleBatch","node","styles","computedStyle","Object","keys","reduce","prev","cur","style","cssText","getSize","container","defaultValue","size","height","width","getRelativeOffset","targetCoords","parentCoords","getMinMax","arr","minMax","min","Number","POSITIVE_INFINITY","max","NEGATIVE_INFINITY","curr","Math","Type","generatorDate","unix","withWeekday","format","Date","toLocaleString","undefined","getShortDateByUnix","getPathByPoints","points","point","index","x","y","removeAllChild","firstChild","removeChild","addNodeListener","listeners","forEach","event","Array","isArray","callback","addEventListener","removeNodeListener","removeEventListener","setNodeAttrs","attrs","key","setAttribute","getCoordsX","chartsWidth","spacingLeft","spacingRight","indexElem","count","getCoordsY","chartsHeight","spacingTop","spacingBtn","maxValue","minValue","value","relativeIndexByOffset","offsetX","fullWidth","round","DEFAULT_SPACING_RIGHT","DEFAULT_SPACING_LEFT","DEFAULT_SPACING_BTM","DEFAULT_PREVIEW_SPACING","id","charts_svg","preview_svg","toolTip","toolTipDate","controlsContainer","nightModeControl","axisContainer","leftPreviewControl","rightPreviewControl","centerPreviewControl","leftResizeControl","rightResizeControl","previewControlContainer","dataset","options","this","e","stopPropagation","_this","toggleNightMode","toggleColumnAnimationFrame","cancelAnimationFrame","requestAnimationFrame","removePoints","target","getAttribute","document","body","parentNode","toggleColumnVisible","isResizeActive","isDragActive","activeResize","hideHoverLineAndPoints","preventDefault","resizeAnimationFrame","doResize","dragAnimationFrame","onPreviewControlClick","verticleLine","classList","add","cordY","clientY","positions","top","toElement","cursorX","clientX","touches","left","sliceSize","sliceEndIndex","sliceStartIndex","offsetIndexLeft","previewWidth","countElements","drawPreviewControls","removeAxisXCharts","draw","mouseMoveAnimationFrame","cordX","offsetY","x1","x2","closestIndex_1","findClosesIndexOfPoint","columnsVisible","filter","map","color","colors","currentSlicePoint","date","showPoints","showTooltip","mouseenter","onMouseEnter","mouseleave","onMouseLeave","mousemove","onMouseMove","mousedown","onDragStart","dragstart","preventDrag","mouseup","onDragEnd","touchstart","touchend","onMouseEnterPreview","onDrag","onResize","touchmove","onMouseUp","onToolTipLeave","onResizeEndLeft","onResizeStartLeft","click","stopProp","onResizeEndRight","onResizeStartRight","maxWidth","names","columns","column","keyOfColumn","shift","columnDatasets","length","horizontSteps","generateSvgElement","y1","y2","appendChild","addMouseListener","withoutAxisLabel","padding-left","padding-right","withoutPreview","previewHeight","drawPreview","withoutControls","generateControls","withoutNightMode","addNightModeListener","PxyUpChart","onNightModeClick","checkBoxControl","generateNode","tag","children","textValue","onCheckBoxClick","setColorCheckboxByKey","SVG_CHARTS_LISTENERS","DOCUMENT_LISTENERS","TOOLTIP_LISTENERS","withRemove","resetTimer","querySelectorAll","item","CENTRAL_CONTROL_LISTENERS","PREVIEW_CHART_LISTENERS","LEFT_RESIZE_CONTROL_LISTENERS","RIGHT_RESIZE_CONTROL_LISTENERS","remove","display","isRight","offsetIndex","circle","cx","cy","stroke","r","el","leftPosition","stylesTooltip","right","childContainer","querySelector","textContent","middleIndex","rightIndex","leftIndex","findClosestIndexPointX","path","checkbox","border-color","background-color","removePathByKey","refresh","animationTimer","clearTimeout","setTimeout","withEvents","leftControlTranslate","rightControlTranslate","transform","centralWidth","ceil","abs","withAnimation","withXAxis","setSupportsLines","drawCurrentSlice","labelCount","mustGeneratedLabels","deltaDays","DEFAULT_DAY_COUNT","generateLabel","text","i","X","realMinValue","currentPath","slice","fill","d","drawAxisX","values","push","minValueGlobal","maxValueGlobal","prepend","removeSteps","step","stepsArr","drawSteps","night_mod","groupSteps","stepsElements","line","groupStepsEl","_position","getBoundingClientRect","type","childs","element","createElementNS","createTextNode","skip","rootNode","createElement","setAttributeNS","child","generator","chartsNode","chartsContainer","previewNode","previewContainer","leftPreviewContainer","centerPreviewContainer","rightPreviewContainer","toolTipDateNode","toolTipNode","controlsNode","basicNode","fetch","then","res","json","dataSets"],"mappings":"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"}